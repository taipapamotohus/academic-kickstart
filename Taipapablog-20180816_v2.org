#+HUGO_BASE_DIR: ./
#+setupfile: /Users/kohkichi/Sources/org-macros/org-macros.setup
#+STARTUP: align shrink

* COMMENT Home
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: home
  :END:

** COMMENT About
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :EXPORT_HUGO_TYPE: about
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_WEIGHT: 4
   :EXPORT_HUGO_WIDGET: about
   :EXPORT_HUGO_ACTIVE: t
   :END:

*** *このサイトについて*
    フリーソフトで学会発表用のスライドを作ったり，論文を書いたりするのに役に立ちそうなことを，自分のためにまとめておく備忘録みたいなもの．最近とみに衰えてきた記憶力の補助になればいいな．．．  :smile:

    Emacsのorg-modeやLaTeX絡みの話が多くなりそう．．．

    殆どは先人の方々からの受け売りなので，できるだけ情報元も併記するようにする．

*** *環境*
    MacBook Pro (16-inch, 2019), Catalina

    GNU Emacs 26.3, TeX Live 2019 (MacTeX-2019)

    -----

    # [[/files/petercheng_resume.pdf][Click here for a pdf version of my resume]]

    #  #+INCLUDE: "../../../resume/resume.org" :lines "35-"

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_WEIGHT: 1
  :END:
** COMMENT Emacsのインストール                                      :emacs:homebrew:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Emacs_Install
   :EXPORT_DATE: 2018-08-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris.jpg") (caption . "Paris"))
   :END:
   なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここでは[[https://brew.sh/index_ja][Homebrew]]を使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．

   Emacsで日本語を書いてると，M-xしたときに面倒なことになるので，[[https://ja.wikipedia.org/wiki/インプット_メソッド_エディタ][Imput Method Editor (IME)]]用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（[[https://github.com/railwaycat/homebrew-emacsmacport][Emacs Mac Port]]）．ありがたい．

   #+begin_src shell
     $ brew tap railwaycat/emacsmacport
     $ brew install emacs-mac --with-modern-icon --with-imagemagick
     $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
   #+end_src

   - --with-modern-iconを指定すると、新しいアイコンになる。

   - なお，他のoptionは以下のように打てば分かる．
   #+begin_src sh
    $ brew tap railwaycat/emacsmacport
    $ brew info emacs-mac
   #+end_src

** COMMENT Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記） :emacs:prelude:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Prelude_install
   :EXPORT_DATE: 2018-08-15
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Istanbul-long.jpg") (caption . "Istanbul"))
   :END:
   昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．
*** Preludeとは
    - Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．．
    - [[https://github.com/bbatsov/prelude][Prelude]] Githubはこちら
*** Preludeのインストール
    - 上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになってはいるが心配性なもんで）．
      #+begin_src shell
      $ curl -L https://git.io/epre | sh
      #+end_src
    - インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．~~auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！~~ *（2018年10月9日修正）* デフォルトのままではこうならない．下記のように設定する必要あり．
    - prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．
      #+begin_src lisp
        (require 'prelude-helm) ;; Interface for narrowing and search
        (require 'prelude-helm-everywhere) ;; Enable Helm everywhere
        ..................
        (require 'prelude-latex)
      #+end_src
      helmにすっかり慣らされてしまったのでこのあたりは外している．prelude-latexのコメントアウトを外すことにより，次回にEmacsを立ち上げるときに *auctex* がインストールされる．
    - preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．
    - *super-save* について（ *2019年6月1日追記* ）：この記事を書いてからすぐに気がついたのだが，現在のpreludeはsuper-saveがdefaultで設定されるので，こちらもoffにしないと自動保存が行われてしまう．これは好みの問題だとは思うが，私は嫌いなのでoffにしている．遅まきながら追記しておく．設定の変更は上述のとおりで，M-x customize からsuper-saveを検索し，offにする．下図を参考にしていただきたい．

      #+attr_html: :width 100% :target _self
      [[./static/img/Super-save.jpg]]

    - 個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．

** COMMENT Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する :emacs:init_org:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: init_org
   :EXPORT_DATE: 2018-08-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Honolulu-1.jpg") (caption . "Honolulu"))
   :END:
   自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．

*** 参考サイト
    - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]
    - [[https://futurismo.biz/archives/6057/][babel-loader:org-mode で init.el を管理する方法]]
    - [[https://uwabami.junkhub.org/log/?date=20111213][平衡点(2011-12-13)]]
    - [[https://ameblo.jp/concello/entry-10786074455.html][ORG-Babel + init.el = ?? | くらいまーず　はい]]
    - [[https://funwithemacs.wordpress.com/2013/04/21/prelude-init-el-org-babel/][Prelude init.el & org-babel]]

*** Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法
**** 基本方針
     - 個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む．
     - 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む．
     - 具体的には，init.elで，(require 'org)した後にorg-babel-load-fileでinit.orgを読み込む．
     - しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．
**** Preludeの導入
     前回のポスト（[[../prelude_install][Emacsの設定（その1）Preludeの導入]]）を参考　
**** emac-init.elの作成
     - ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む
     #+begin_src lisp
       (require 'org)
       (defvar my-config-dir (concat user-emacs-directory "personal/"))
       (org-babel-load-file
        (expand-file-name "init.org" my-config-dir))
     #+end_src
     - 工夫と言っても， *init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう*  ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ．
     - これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．
**** init.orgの作成
     - これでいよいよ肝心のinit.orgの作成を行う
     - org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている．
     - 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．
***** Code blockの挿入
      - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．
      - org-modeで以下のようにする．（後述する設定が必要）
        #+begin_src lisp
          <l （ここで<TAB>すると．．．）
          以下のように展開される
          ,#+begin_src emacs-lisp

          ,#+end_src
        #+end_src
****** *2019年1月14日追加*
       上記の「TABで展開」に関して，Disqusで，mickaushyさんから「<lではなくて<sではないのか」とのご指摘をいただいた．全くそのとおりで，（後述する設定が必要）と自分で書いておきながら，その設定を書き忘れていた．mickaushyさんが指摘されている通りの設定をしている．
       - 参考：http://pages.sachachua.com/.emacs.d/Sacha.html#org74bcbb3
       #+begin_src lisp
         ,#+begin_src emacs-lisp
         (setq org-structure-template-alist
               '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
                 ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
                 ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
                 ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
                 ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
                 ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
                 ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
                 ;; ("l" "#+begin_src lisp\n?\n#+end_src" "<src lang=\"lisp\">\n?\n</src>")
                 ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
                 ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
                 ("H" "#+html: " "<literal style=\"html\">?</literal>")
                 ("a" "#+begin_ascii\n?\n#+end_ascii")
                 ("A" "#+ascii: ")
                 ("i" "#+index: ?" "#+index: ?")
                 ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
         ,#+end_src
       #+end_src
       この設定を，init.orgに書き込んでおいて，「<lのあとにTAB」とすれば，上述のように展開される．この次の記事でまとめて書こうと考えていたが，すっかり失念していた．ここに書いておいたほうが確かにわかりやすい．mickaushyさん，ご指摘ありがとうございました．
***** Codeの記述
      - 上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ．
      - code-blockの中にいるときに
        - C-c 'とする
        - 当該のcode blockだけのバッファが表示される（下図の下のバッファ）

          #+attr_html: :width 100% :target _self
          [[./static/img/CodeBlock_small.jpg]]

        - この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．
        - C-c nとする
        - すると，インデントも綺麗に整えてくれる．
        - 満足したら，C-c 'で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！
      - 具体的なinit.orgの内容は次回のポスト以降に記述予定
** COMMENT Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など :emacs:prelude:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Japanese_setup
   :EXPORT_DATE: 2018-08-18
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Colosseum.jpg") (caption . "Colosseum"))
   :END:
   ようやく，ここからinit.orgの具体的な記述になる．
*** Coding systemの設定
    - まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から
    - init.orgに以下のように書き込む
      #+begin_src lisp
        ,* Coding System Environment
        ,** 言語を日本語にする
           ,#+BEGIN_SRC lisp
           (set-language-environment 'Japanese)
           ,#+END_SRC
        ,** 極力UTF-8とする
           ,#+BEGIN_SRC lisp
             (prefer-coding-system 'utf-8)
           ,#+END_SRC
        ,** 日本語フォントをヒラギノにする
           - 日本語のサイズを指定しないと動的にサイズを変えられるようになる
           - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/
           ,#+BEGIN_SRC lisp
             (when (or (eq window-system 'mac) (eq window-system 'ns))
               (set-face-attribute 'default nil
                                   :family "Menlo"
                                   :height 180) ;; 18pt
               (set-fontset-font nil 'japanese-jisx0208
                                 (font-spec :family "Hiragino Kaku Gothic ProN"))
               (setq face-font-rescale-alist
                     '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
           ,#+END_SRC
      #+end_src
    - これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．
      #+begin_src lisp
        (set-language-environment 'Japanese)

        (prefer-coding-system 'utf-8)

        (when (or (eq window-system 'mac) (eq window-system 'ns))
          (set-face-attribute 'default nil
                              :family "Menlo"
                              :height 180) ;; 18pt
          (set-fontset-font nil 'japanese-jisx0208
                            (font-spec :family "Hiragino Kaku Gothic ProN"))
          (setq face-font-rescale-alist
                '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
      #+end_src
    - つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．
    - この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．
*** Inline-patchの設定
    - ついで，最も重要なinline-patchの設定
    - 参考：[[http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945][Macに最新バージョンのEmacsをインストール]]
    - 参考：[[http://suzuki.tdiary.net/20160103.html][El Capitan での日本語入力時に Emacs 内のカーソル色を変更する]]
    - init.orgに以下のように書き込む．
      #+begin_src lisp
        ,* inline-patch on macosx
        ,** ミニバッファ入力時に自動的に英語入力モードにする
           - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           ,#+BEGIN_SRC lisp
             (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
               (mac-auto-ascii-mode 1))
           ,#+END_SRC
        ,** 日本語か英語かで，カーソルの色を変える．
           - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           - 参考２：http://suzuki.tdiary.net/20160103.html
           ,#+BEGIN_SRC lisp
             (when (fboundp 'mac-input-source)
               (defun my-mac-selected-keyboard-input-source-chage-function ()
                 (let ((mac-input-source (mac-input-source)))
                   (set-cursor-color
                                                     ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
                    (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                        "#91C3FF" "#FF9300"))))
               (add-hook 'mac-selected-keyboard-input-source-change-hook
                         'my-mac-selected-keyboard-input-source-chage-function))
           ,#+END_SRC
      #+end_src
    - これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．
      #+begin_src lisp
        (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
          (mac-auto-ascii-mode 1))

        (when (fboundp 'mac-input-source)
          (defun my-mac-selected-keyboard-input-source-chage-function ()
            (let ((mac-input-source (mac-input-source)))
              (set-cursor-color
                                                ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
               (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                   "#91C3FF" "#FF9300"))))
          (add-hook 'mac-selected-keyboard-input-source-change-hook
                    'my-mac-selected-keyboard-input-source-chage-function))
      #+end_src
    - これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．
    - ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．
** COMMENT LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記） :emacs:latex:pdf:skim:beamer:auctex:
   :PROPERTIES:
   :EXPORT_FILE_NAME: latexmk
   :EXPORT_DATE: 2018-08-19
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/琵琶湖.jpg") (caption . "琵琶湖"))
   :END:
*** TeX Live 2018のインストール
    - 参考サイト１：[[https://texwiki.texjp.org/?TeX%20Live][TeX Wiki TeX Live]]
    - 参考サイト２：[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]
    - 参考サイト３：[[http://www.tug.org/mactex/][The MacTeX-2018 Distribution]]
    - 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする．
    - これでスライド作成ソフトであるbeamerも一緒にインストールされる．
    - beamerに固有の設定は特に必要なし．
*** TeX Live 2018のインストール（2018年9月1日追記）
    大事なことを２つ忘れていたので追記する．
**** ヒラギノフォントの埋め込みなど
     - 参考サイト：[[http://doratex.hatenablog.jp/entry/20180501/1525144736][MacTeX 2018のインストール&日本語環境構築法]]
     - こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい．
     - マックユーザーにとっての最大の問題点は *「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」* ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．
**** インストール後のパスの修正（symbolic linkを張る）
     - 参考サイト：[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]
     - MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記の[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]に書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．
       #+begin_src shell
       $ sudo /usr/local/texlive/????/bin/*/tlmgr path add
       #+end_src
     - 上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．
       #+begin_src shell
       $ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add
       #+end_src

*** auctexのインストールと設定
    - latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見）
    - preludeをインストールした時点で，auctexもインストールされる．
    - auctexの設定などについては以下を参照（手抜き..... (^^;;; ）
      + [[https://www.gnu.org/software/auctex/][AUCTEX – Sophisticated document creation]]
      + [[https://texwiki.texjp.org/?AUCTeX][TeX Wiki AUCTeX]]
      + [[https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX][Emacs/AUCTeX]]
      + [[https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/][AUCTeX の設定と便利な機能]]
    - しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．
***  latexmk
    - Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．
    - 参考サイト：[[https://texwiki.texjp.org/?Latexmk][TeX Wiki Latexmk]]
    - texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．
    - ~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）
      #+begin_src lisp
        $pdflatex = 'xelatex -interaction=nonstopmode -synctex=1 %O %S';
        $pdf_mode = 1;
        $postscript_mode = $dvi_mode = 0;
        $pdf_previewer  = 'open -a Skim';
        $preview_continuous_mode = 1;  # equivalent to -pvc
      #+end_src
*** 実際の作業
    - 上記のようにセットアップしていることとする．
    - ターミナルで，texファイルが有るdirectoryに移動し，
      #+BEGIN_SRC shell
      latexmk -pvc -pdf -view=none document.tex
      #+END_SRC
    - これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．
*** XeLaTeXについて
    - 以下を参照されたい．特に最初にあげたZRさんの文書は必読！
      + [[http://zrbabbler.sp.land.to/xelatex.html][XeLaTeX で日本語する件について]]
      + [[https://texwiki.texjp.org/?XeTeX][TeXWiki XeTeX]]
      + [[http://suzusime-log.hatenablog.jp/entry/2017/04/15/210327][XeLaTeXだとかな混植が簡単にできて最高だという話]]
** COMMENT beamerでスライド原稿用pdfを作成する（その１） :latex:latexmk:beamer:texlive:mactex:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer
   :EXPORT_DATE: 2018-08-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Kojidai.jpg") (caption . "Kojidai"))
   :END:
   前回のポスト（[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]]）により，既にLaTeXはインストールされたので，今回は学会発表向けのスライド原稿作成についてまとめる．ようやく実質的な話になる．
   　
*** beamerによるスライド原稿の作成
    - 基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である．
    - 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う．
    - なお， \usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=729][beamerでの数式フォントの変更]]
    - また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．
    #+begin_src tex
      % -*-coding:utf-8-*-
      \documentclass[svgnames, table, 14pt]{beamer}
      \usepackage{zxjatype}
      \usepackage[hiragino-dx]{zxjafont}

      % ヒラギノ角ゴ Proを使う
      \setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}
      \setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}

      % themeを指定する
      \usetheme{Darmstadt}

      \usefonttheme[onlylarge]{structurebold}
      \setbeamerfont*{frametitle}{size=\large,series=\bfseries}
      \setbeamertemplate{navigation symbols}{}

      \usepackage[english]{babel}
      \usepackage[latin1]{inputenc}
      \usepackage{times}
      \usepackage[T1]{fontenc}
      \usepackage{hyperref}

      % Setup TikZ
      \usepackage{tikz}
      \usetikzlibrary{arrows}
      \tikzstyle{block}=[draw opacity=0.7,line width=1.4cm]
      % Figure position
      \usepackage[absolute,overlay]{textpos}
      % math
      \usepackage{mathabx}

      \usefonttheme{professionalfonts}

      % Author, Title, etc.
      \title[hoge/fugaによる相補的な治療における高難度症例の治療と成績]
      {hoge/fugaによる相補的な治療における高難度症例の治療と成績}
      \author[taipapa]
      {taipapa, 織田信長, 豊臣秀吉, 徳川家康}
      \institute[hogefuga University]
      {hogefuga大学大学院 hogefuga研究科　hogefuga分野}


      \date[日本hogefuga外科学会 第??回学術総会　\hspace{2.4cm} 201X年X月XX日]
      {\scriptsize{Symposium-02「とっーても難しいhogeとfuga」
      \\ \vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を
      完了しています．\\本演題の発表に関して開示すべきCOIはありません
      }}

      % 学会名，日付，スライド番号を挿入
      \setbeamertemplate{footline}
      {\color{gray} %
      \hspace{.075cm}
      \insertshortdate%
      \hspace{4cm}
      \insertframenumber{} / \inserttotalframenumber%
      }

      \begin{document}

      \begin{frame}
      \titlepage
      \end{frame}

      \section{Introduction}

      \begin{frame}{背景と目的}
      \begin{block}{}
      \begin{itemize}
      \item hogeとfugaを比較してみると，一方で難易度の高い症例で
      も他方では容易に行える場合も多い.
      \item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に
      用いることにより合併症の減少を目指す方針をとっている．
      \item そこで，自験例から高難度のhogefuga症例についての
      方針と成績を主にhogefuga surgeonの立場から検討した.
      \end{itemize}
      \end{block}
      \end{frame}

      \section{Results}
      \begin{frame}
      \frametitle{hogefuga症例の画像}
      \centering
      \includegraphics[width=3.5in]{hoge_fuga.pdf}
      \end{frame}
      \end{document}
    #+end_src
    - ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする]]を参考　
      #+begin_src shell
        latexmk -pvc -pdf -view=none beamer_test.tex
      #+end_src
    - これで下記のようなpdfが出来上がるはず．

      #+attr_html: :width 100% :target _self
      [[./static/img/beamer_test.jpg]]

      #+attr_html: :width 100% :target _self
      [[./static/img/beamer_test2.jpg]]

    - 画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，
      #+begin_src shell
        \includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}
      #+end_src
      などと打てばよい．以下のようなスライドが得られる．

      #+attr_html: :width 100% :target _self
      [[./static/img/beamer_test3.jpg]]

    - なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\centering を使用する．

    - 次回は，beamerで動画を走らせる件について書く予定．

** COMMENT beamerでスライド原稿用pdfを作成する（その2）動画が走るスライド原稿を作る :beamer:movie:latex:pdf:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer_movie
   :EXPORT_DATE: 2018-08-25
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Kojidai2.jpg") (caption . "Kojidai"))
   :END:
   実は，同じような内容について2010年に，[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100][TeX QA]] に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．

*** beamerで動画が走るスライド原稿を作る
    - 前述した ，[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100][TeX QA]] に経緯は投稿してあるので，詳細はそちらを読んでいただきたい．
    - 参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf の以下の部分
      #+begin_example
      3 Annotations

      An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype', for instance, `/Text', `/Link', `/Sound', `/Movie', etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect'. DVIPDFM(x) provides the following special command for annotations............

       The following example shows a movie annotation that enables us to run the movie file ‘mymovie.avi’ inside a PDF viewer program.

       \special{pdf:ann bbox 0 0 360 180 <<
       /Subtype /Movie /Border [1 0 0]
       /T (My Movie) /Movie <<
       /F (mymovie.avi) /Aspect [720 360]
       /Poster true >>
       /A << /ShowControls false >> >>}
      #+end_example
    - アスペクト比やコントロールバーの有無，リピートするかどうかなども指示できる（下記参照）
    - mymovie.aviのところに動かしたい動画を記入（パスも効く）
    - 私の作成したものは読んでいただければおわかりのように，非常にダサいベタ書きである．
    - 最近の書き方は以下の通りで，もっぱら，mov形式の画像を使用している．コンテナがaviやwmvだと動かないが，Mac以外でどうなるのかは不明．そういえば，Windowsで試したことはなかった.....
      #+begin_src tex
        {
            \usebackgroundtemplate{\put(20, -265){\includegraphics[scale=0.45]{/Data/.../..../Figures/hogefuga.pdf}}}
            \begin{frame}
            \frametitle{hogefugaの対策}
            \special{pdf:ann bbox -10 -130 320 90 <<
                     /Subtype /Movie /Border [0 0 1]
                     /T (My Movie) /Movie <<
                     /F (/Data/.../hogefuga.mov)
                     %/Aspect [720 480]
                     /Aspect [640 480]
                     /Poster false >>
                     /A << /ShowControls true /Mode /Repeat >> >>}
            \end{frame}
        }
      #+end_src
    - \usebackgroundtemplateの部分には動画のキャプチャー画像を貼り付けておく．なにもないと，動画が動き出す前の画面が空白になってしまう（もっと良い方法があれば，どなたかご教示ください）．
    - \putで背景画像（キャプチャー画像）の位置を直接指定し，\includegraphicsのscaleで倍率を指定して動画の大きさに合わせている．
    - これで，画像をクリックすると（ほぼ）同じ大きさの動画が（ほぼ）同じ位置で動くようになる
    - 動画の大きさはbboxで，かぶせる静止画の大きさはscaleで調整する．
    - プレゼンテーションにskimを使うと動画が動かないので注意．
    - 動画は同一directoryにある必要はなく，パスで指定すれば良い
    - 動画自体はpdfの中に埋め込まれないので，pdfの容量がむやみに大きくならないという利点がある．
    - Adobe Acrobat Readerでプレゼンすれば，動画は動くし，音もでる．コントロールバーにより早送りなども可能．
    - 最初にpdfで動画をクリックすると「セキュリティ上の問題．．．」というメッセージが表示される．この横にあるオプションボタンをクリックして，信頼するを選択すれば，動画が動くようになる．
** COMMENT beamerでスライド原稿用pdfを作成する（その3）動画が走るスライド原稿を作る（media9に関する追記） :beamer:movie:latex:pdf:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer_movie2
   :EXPORT_DATE: 2018-08-26
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Florence-1.jpg") (caption . "Florence"))
   :END:
   前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．
*** media9
    media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．
    - 参考サイト１：[[https://texwiki.texjp.org/?media9][TeXWiki media9]]
    - 参考サイト２：[[https://blog.tokor.org/2016/06/04/TeXでプレゼン-LaTeX-Beamerを使う人のためのTips集/][TeXでプレゼン - LaTeX Beamerを使う人のためのTips集]]
    - 参考サイト３：[[https://www.youtube.com/watch?v=HHzcrP27I08][How to embed video files in a PDF using LaTeX (a media9/beamer example)]]
    - 参考サイト４：[[http://empitsu.hatenablog.com/entry/2012/11/02/182722][Beamer で PDF ファイルに動画を埋め込む]]
    - 参考サイト５：[[http://tug.org/pipermail/macostex-archives/2014-July/052673.html][media9 problems]]
*** beamerで動画が走るスライド原稿を作る（media9版）
    - 同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い
    - preambleに，\usepackage{media9}を忘れずに追加しておく．
      #+begin_src tex
        \newcommand{\showmovie}[1]{\includemedia[
          activate=pageopen,
          deactivate=pageclose,
          width=110mm, height=72mm,
          addresource=#1,
          flashvars={
            src=#1
            &loop=true
            &autoPlay=false
          }
          ]{}{StrobeMediaPlayback.swf}
        }

        \begin{frame}
          \frametitle{hogefugaの動画}
          \centering
          \showmovie{hogefuga.mov}
        \end{frame}
      #+end_src
    - 110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．
    - loopは，ループ再生するかどうか
    - autoplayは自動再生するかどうか
*** media9を使用したときの利点
    - なんと言ってもべた書きよりもelegant!
    - スライドを開けたときに，何もしなくても動画の静止画が映るので，前回のやり方のように背景をべた書きしなくて良い．
*** media9を使用したときの欠点
    もう完全にmedia9に乗り換えるつもりでいたが，以下に述べるようにいくつか欠点もあることが判明した．
    - media9はpdf自体に動画を埋め込むようである．したがって，200MBの動画を走らせるとすると，pdf自体が200MB以上の大きさになってしまう．
    - それだけでなく，200MB程度の動画になると，途中で固まってしまう！これでは使い物にならない．
    - 一方，前回記事のべた書き方式だと，pdf自体に動画を埋め込まないので，pdfは大きくならないし，動画指定のパスは効くし，200MBだろうともっと大きかろうと動画はガンガン動く．
*** 結論
    - 容量の小さな動画であれば，media9でも十分であろう．
    - 私のように，容量の大きな動画を使用するような場合は，べた書きを使用するほうが良いであろう．
    - ということで，結局，元の木阿弥に戻ることとなった．
** COMMENT Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力） :org:mode:emacs:latex:html:word:pandoc:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_paper_1
   :EXPORT_DATE: 2018-09-01
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris-2.jpg") (caption . "Pyramide du Louvre"))
   :END:
   私がEmacsを使用している最大の理由はorg-modeである．あらゆる文書作成にorg-modeを用いている．もちろん，論文を書くのにも使っているが，これに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．
*** 目的
    1. org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする
    2. org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする
    3. org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする
*** org-modeで論文を書く利点
    - LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる．
    - latexの力を借りることで，文献の引用やリストの作成を自動化できる．
    - 必要なら，htmlとしても出力できる．
    - どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．
*** org-modeの設定・セットアップ（pdfとhtmlへの出力用）
    設定が最もよくまとまっているのは[[https://texwiki.texjp.org/?Emacs%2FOrg%20mode][TeX Wiki Emacs/Org mode]] 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．

    私は，[[https://ctan.org/pkg/koma-script][koma-script – A bundle of versatile classes and packages]] と [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]] を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．
**** [[https://ctan.org/pkg/koma-script][koma-script – A bundle of versatile classes and packages]]
     - 参考サイト１：[[http://konoyonohana.blog.fc2.com/blog-category-12.html][Koma-Script 入門　～初歩の初歩～]]
     - 参考サイト２：[[https://ichiro-maruta.blogspot.com/2013/03/latex.html][使ってはいけない LaTeX のコマンド・パッケージ・作法]]
     - 参考サイト３：[[https://qiita.com/zr_tex8r/items/297154ca924749e62471][LaTeX の「アレなデフォルト」 傾向と対策]]
     - アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．
**** [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]]
     - 参考サイト１： [[https://github.com/tsdye/tufte-org-mode/blob/master/README.md][tufte-org-mode]]
     - [[https://www.edwardtufte.com/tufte/index][Edward R. Tufte]]によって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった．
     -  [[https://github.com/tsdye/tufte-org-mode/blob/master/README.md][tufte-org-mode]]はこのtufte classをorg-modeから使えるようにした有り難いパッケージである．
**** org-bullet
     - 参考サイト１：https://github.com/sabof/org-bullets
     - 参考サイト２：http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html
     - pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．

       #+attr_html: :width 100% :target _self
       [[./static/img/org-bullet.jpg]]

     - init.elには以下のように[[https://github.com/jwiegley/use-package][use-package]]を用いて記述してインストール兼設定となる．もちろん，これも以前の記事（[[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]）で説明したように，init.orgに書いたものから生成されたinit.elである．

       #+begin_src lisp
           (use-package org-bullets
             :ensure t
             :config
             (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
       #+end_src
**** org-modeのinit.elの設定（pdf出力用）
     - 前述のごとく，koma-scriptとTufte-LaTeXについて設定する．

     - 何回もしつこいようだが，これも以前の記事（[[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]）で説明したように，init.orgに書いたものから生成されたinit.elである．

       #+begin_src lisp
         (require 'ox-latex)
         (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
         (setq org-latex-default-class "bxjsarticle")

         (add-to-list 'org-latex-classes
                      '("koma-article"
                        "\\documentclass{scrartcl}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

         (add-to-list 'org-latex-classes
                      '("koma-jarticle"
                        "\\documentclass{scrartcl}
                        \\usepackage{amsmath}
                        \\usepackage{amssymb}
                        \\usepackage{xunicode}
                        \\usepackage{fixltx2e}
                        \\usepackage{zxjatype}
                        \\usepackage[hiragino-dx]{zxjafont}
                        \\usepackage{xltxtra}
                        \\usepackage{graphicx}
                        \\usepackage{longtable}
                        \\usepackage{float}
                        \\usepackage{wrapfig}
                        \\usepackage{soul}
                        \\usepackage{hyperref}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

         ;; tufte-handout class for writing classy handouts and papers
         (add-to-list 'org-latex-classes
                      '("tufte-handout"
                        "\\documentclass[twoside,nobib]{tufte-handout}
                                          [NO-DEFAULT-PACKAGES]
                         \\usepackage{zxjatype}
                         \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")))
         ;; tufte-book class
         (add-to-list 'org-latex-classes
                      '("tufte-book"
                        "\\documentclass[twoside,nobib]{tufte-book}
                                         [NO-DEFAULT-PACKAGES]
                          \\usepackage{zxjatype}
                          \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\part{%s}" . "\\part*{%s}")
                        ("\\chapter{%s}" . "\\chapter*{%s}")
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")))
       #+end_src

     - 私はxelatexを使っているので，compileは以下のように設定している．

       #+begin_src lisp
         (setq org-latex-pdf-process
               '("xelatex -interaction nonstopmode -output-directory %o %f"
                 "bibtex %b"
                 "xelatex -interaction nontopmode -output-directory %o %f"
                 "xelatex -interaction nonstopmode -output-directory %o %f"))
       #+end_src

     - ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．

       #+attr_html: :width 100% :target _self
       [[./static/img/org-C-c-C-e.jpg]]

     - pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．

     - 同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．
*** 「org-modeで論文を書く」の実例
    - それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする．
    - 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略.....(^^;;;
    #+begin_src lisp
      ,#+LaTeX_CLASS: koma-jarticle
      ,#+LaTeX_CLASS_OPTIONS: [12pt]
      ,#+LATEX_HEADER: \usepackage{geometry}
      ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
      ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
      ,#+STARTUP:  overview
      ,#+STARTUP:  hidestars
      ,#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
      ,#+OPTIONS: date:nil
      ,#+LINK_UP:
      ,#+LINK_HOME:

      ,#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
      ,#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
      \vspace*{-1.5cm}

      \hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

      ,* 背景と目的
      hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
      ,* 結果
      hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．

      ,#+NAME: hoge_fuga
      ,#+caption: hoge-fuga（重症例である）
      ,#+attr_latex: :float t :width 3in  :align center
      ,#+ATTR_HTML: :width 500  :float: wrap :align center
      [[./hoge_fuga.jpg]]

      ,* 結論
      hogefugaによる治療は有効である．
    #+end_src

    - ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．

      #+attr_html: :width 100% :target _self
      [[./static/img/hogefuga_text.jpg]]

    - また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．

      #+attr_html: :width 100% :target _self
      [[./static/img/hogefuga_html.jpg]]

    - 長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．

** COMMENT Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理） :reference:citation:bibdesk:bibtex:pdf:pubmed:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_paper_2
   :EXPORT_DATE: 2018-09-12
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris-3.jpg") (caption . "Musée du Louvre"))
   :END:
   さて，前回（[[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]）はorg-modeによる論文本体の執筆に付いてまとめたわけだが，今回は論文引用の方法についてまとめる．と思ったのだが，論文を引用するためには，当然のことながら論文を収集しなければならない．そのうち膨大な数の論文の海に溺れることになる．そこで，収集した論文，つまり，pdfの整理をするソフトが必要になってくる．その引用も，書式や番号付を雑誌の規定に合わせて自動化してくれれば言うことはない．ということで，そのようなソフトについて書くことにする．有料ソフトの定番としては，EndoNoteがあるし，フリーソフトでは，[[https://www.zotero.org][zotero]]や[[https://www.mendeley.com/?switchedFrom=][Mendeley]]が有名である．私自身は，LaTeXを利用することが多い関係上，[[https://bibdesk.sourceforge.io][BibDesk]]というこれまた老舗のソフトをもっぱら利用している．ネット上でもzoteroやmendeleyについての情報は豊富だが，BibDeskについてはそれほど見られないので，まとめておくことは多少の意味があるであろうと考え，BibDeskによる論文収集を説明することにした．

*** [[https://bibdesk.sourceforge.io][BibDesk]]
    - texliveをインストールすればその中に入っているが，最新版はリンク先にあるので，そちらを落とすほうが良い．
    - 文献をbibtexのファイルとして管理する．pdfとの関連付けができるので，書誌事項とpdfが一体化して管理できる．
    - [[http://www.bibtex.org][bibtex]]に関しては，[[https://qiita.com/SUZUKI_Masaya/items/14f9727845e020f8e7e9][BiBTeXとは]] を参照
    - bibtexファイルなので，当然，latexの機能を用いて，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．これが便利！
    - 見た目はこんな感じ

      #+attr_html: :width 100% :target _self
      [[./static/img/bibdesk.jpg]]

    - 医学系の論文となると，やはり，[[https://www.ncbi.nlm.nih.gov/pubmed][PubMed]]などネットでの連携が重要である．下図のごとく，BibDeskではSearches menuからPubMedを選ぶことにより，BibDeskの中からPubMedを検索できる．

    #+attr_html: :width 100% :target _self
    [[./static/img/bibdesk-pubmed.jpg]]

    - 検索欄に，例えば，"heat shock protein"と打つと，下図のように検索結果が50編ずつ並ぶが，50編以上ある場合は，Searchを繰り返しクリックすることにより，100編と150編とどんどんリストに取り込まれていく．

      #+attr_html: :width 100% :target _self
      [[./static/img/bibdesk-pubmed2.jpg]]

    - 上図のごとく，検索結果欄の左端に"Import" ボタンがあるが，これをクリックするとその論文の書誌事項が取り込まれる．その際に，自分の文献リストの名前を，"hogefuga-reference.bib" など適当に決めれば良い．以後はそのリストに追加していくことになる．

    - また，取り込まれる際にcite-keyをBibDeskが自動的に決めてくれる．このcite-keyは次回の記事で述べる「引用の自動化」の際にreftexに使用される．

    - なお，PubMedの番号，つまり，Pmidが分かっていれば，それを打ち込めば一発で書誌事項を検索できる．

    - リストの中から興味のある論文をクリックして選択し，グレーにハイライトさせると，下図のごとく右側のサイドパネルに，その論文のあるサイトを示すアイコンが表示される．これをクリックすれば，ブラウザーが開いてそのサイトに飛ぶ．もし，その論文がオープンアクセスであれば，あるいは，所属する組織が出版社と契約を交わしていれば，その論文のpdfを落とせる．落としたpdfをドラッグしてその論文に該当するリストのラインにドロップすれば，その書誌事項とpdfはリンクし，以降はその論文のサイドパネルにpdfのアイコンが表示され，ダブルクリックによりオープンするようになる．さらに言えば，pdfではなく，パワポやワードのファイルとして文献が存在することもある．同じようにドラッグ＆ドロップすれば，これまたリンクする．しかも一つの文献にいくつものpdfやその他のファイルをリンクできる．非常に便利である．

      #+attr_html: :width 100% :target _self
      [[./static/img/bibdesk-pubmed3.jpg]]

    - また，下図のごとく，左のサイドパネルの一番上の方にある"Web BibDesk Web Group"をクリックして選択すれば，更にいろいろな文献ソースが表示される．医学系では，Google Scholarが有用なので，これをクリックすれば，BibDeskの中からGoogle Scholarを検索できるし，書誌事項も取り込める．pdfのリンクが存在すればBibDeskの中でpdfを落とすこともできる．

      #+attr_html: :width 100% :target _self
      [[./static/img/bibdesk-pubmed4.jpg]]

    - 収集した文献の書誌事項はhogefuga-reference.bibにbibtex fileとしてまとめられているが，その中身は以下のような情報の集積である（下の例ではabstractなどは省略している）．
      #+begin_src tex
        @article{Rothwell:2018aa,

          Author = {Rothwell, Peter M and Cook, Nancy R and Gaziano, J Michael and Price, Jacqueline F and Belch, Jill F F and Roncaglioni, Maria Carla and Morimoto, Takeshi and Mehta, Ziyah},
          Date-Added = {2018-08-03 22:46:26 +0900},
          Date-Modified = {2018-08-03 22:46:26 +0900},
          Doi = {10.1016/S0140-6736(18)31133-4},
          Journal = {Lancet},
          Journal-Full = {Lancet (London, England)},
          Month = {Jul},
          Pmid = {30017552},
          Pst = {aheadofprint},
          Title = {Effects of aspirin on risks of vascular events and cancer according to bodyweight and dose: analysis of individual patient data from randomised trials},
          Year = {2018},
        }
      #+end_src

    - bibtexなので，前述のごとく，文献の引用，引用スタイルの設定，文献リストの作成，文献リストのスタイルの設定などをすべて自動化できる．

    - Emacsのorg-modeと組み合わせて，どのように文献の引用を自動化するかについては次回の記事にまとめる．


** COMMENT Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化） :reference:citation:bibtex:reftex:latex:org:mode:automation:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_paper_3
   :EXPORT_DATE: 2018-09-15
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris-4.jpg") (caption . "Arc de triomphe de l'Étoile"))
   :END:

   前回（[[../org-mode_paper_2][Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）]]）は，BibDeskを用いて文献情報をbibtex ファイルとして収集する方法についてまとめた．今回は，この文献情報を利用した引用をEmacsのorg-modeでどのように自動化するかについてまとめる．早い話が，org-modeからlatexのbibtexとreftexの機能を利用するということになる．

*** org-mode-reftex-setup
    - 参照サイト：[[http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/][Using Emacs Org-mode to Draft Papers]]
    - RefTex-ModeというものがEmacsには含まれている．文献や引用の管理のためのパッケージである．詳細はC-h iでマニュアルを見れば分かる，と言いたいところだが，このマニュアルが膨大である．そこで，RefTeX in a Nutshellという2ページほどの要約を読めば，使うのには十分であるとマニュアル自体に書いてある（笑）．実は私はそれすらろくに読んでいないが，以下のように設定すれば，十分に使える．設定方法は，以前の記事（[[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]）に記載したとおり，init.orgに書き込めば良い．
      #+begin_src lisp
        ,#+begin_src emacs-lisp
        (defun org-mode-reftex-setup ()
          (load-library "reftex")
          (and (buffer-file-name)
               (file-exists-p (buffer-file-name))
               (reftex-parse-all))
          (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
          )
        (add-hook 'org-mode-hook 'org-mode-reftex-setup)
        ,#+end_src
      #+end_src
    - 上記の設定により，参照サイトの説明のように，org-modeの中でreftex-citationの機能が働くようになる．

**** org-mode-reftex-setupの使用方法
     - org-modeで文書を書いている最中に文献を引用したい箇所で，C-c ) と打つ
     - すると，まず，どの文献リストを使うかを聞いてくるので，hogefuga-reference.bibなど使いたいリストの名前を打つ．前回説明した方法で収集した文献のbib ファイルが有るはずである．
     - 次に，文献を絞り込むためにキーワードを打つように催促されるので，それを打つ．すると，そのキーワードを有する文献のリストがずらずらと並ぶ．下図の例では，stetler と著者名を打ったときの結果が下のバッファに表示されている．該当する文献にカーソルを持ってくるか，クリックして選択し，リターンを押せば決定され，本文の該当箇所にその論文の cite-key，つまり，\cite{Stetler:2012jt} が入力される．

       #+attr_html: :width 100% :target _self
       [[./static/img/reftex.jpg]]

     - 上図の下のバッファ内でも，C-sの検索機能は使えるので，さらに絞り込みが必要な際は便利である．以前の記事（[[../prelude_install][Emacsの設定（その1）Preludeの導入]]）で述べたようにpreludeを導入して，かつ，helmを有効にしておけば，下図のようにC-sでswiperが使えて更に便利である．（なお，下図では，まず，heat shock proteinと打ち，ズラッと並んだ真ん中のバッファでC-sとやってstetlerと打ったところである．一番下のバッファにstetlerで絞り込まれた候補が並んでいる）

       #+attr_html: :width 100% :target _self
       [[./static/img/reftex-2.jpg]]

*** [[https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ox-bibtex.el][ox-bibtex.el]]
    - 参考サイト：[[https://aliquote.org/post/org-and-bibtex/][Org and Bibtex]]
    - 上述の作業で，文献を本文中にcite-keyとして引用することはできた．次に必要なのはorg-modeからpdfやhtmlにexportする際に，cite-keyをもとに，文献が雑誌の規定の様式で引用され，最後に文献リストが規定の様式で記述されるようにすることである．この面倒をみてくれるのが，[[https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ox-bibtex.el][ox-bibtex.el]] である．
    - ox-bibtex.elは，org-plus-contrib packageの中に含まれているので，まず，org-plus-contribをインストールする．これは，[[http://emacs-jp.github.io/packages/package-management/package-el.html][package.el]] を使えば簡単である．
    - 次いで，use-packageを使って，ox-bibtexを設定する．と言っても以下のようにinit.orgに書くだけである．
      #+begin_src lisp
        (use-package ox-bibtex)
      #+end_src
    - なお，use-packageを使ってox-bibtexを設定する際に，defer t にすると，htmlへの文献のexportができなくなるので注意！
    - use-packageは非常に便利．emacsの新しいパッケージの導入と管理はこれでいいと思う．
      - 参照サイト1：[[https://github.com/jwiegley/use-package][use-package]]
      - 参照サイト2：[[https://qiita.com/kai2nenobu/items/5dfae3767514584f5220][use-packageで可読性の高いinit.elを書く]]
    - ox-bibtex.elはbibtexをLaTeX, html, asciiにexportしてくれる．HTMLへのexportには，[[https://www.lri.fr/~filliatr/bibtex2html/][bibtex2html]] が使われる．そこで，bibtex2htmlをインストールしておく．homebrewがインストールされていれば以下のようにすれば良い．
      #+begin_src shell
        brew install bibtex2html
      #+end_src
    - ox-bibtexの使い方はソースの最初に書いてあるとおりである．すなわち，文献をexportするためには，org-mode文書の冒頭に例えば以下を追加し，
      #+begin_src lisp
      #+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
      #+end_src
      最後に，
      #+begin_src lisp
      #+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-references.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
      #+end_src
      を追加する．
    - #+LaTeX_HEADER: の行の最後の[[https://ctan.org/pkg/natbib][natbib]] は，texliveに含まれる文献サポートのパッケージであり，1, 2, 3,....というような番号付タイプの文献引用や author-yearタイプの文献引用の両方に（それ以外にも）対応している．その手前はnatbibのオプションである．
    - #+BIBLIOGRAPHY: のあとにfoo.bibを書くわけだが，この部分はフルパスで書いて良い．その後にはスタイルを書く．上記のStroke_3-authors_alphabetical.bstは自作だが，これは投稿ジャーナルの規定に合わせて作成する．ジャーナルによってはbst ファイルを用意してあるかもしれない．
    - option: -foobar はbibtex2htmlに 'foobar' を渡す．つまり
      #+begin_src lisp
        option:-d    sort by date
        option:-a    sort as BibTeX (usually by author) *default*
        option:-u    unsorted i.e. same order as in .bib file
        option:-r    reverse the sort
      #+end_src
    - 複数のオプションを使用することも可能
      #+begin_src lisp
      option:-d option:-r
      #+end_src
    - 上述のように， *limit:t* とすることにより，引用された文献のみのリストになる．これをしないと bib ファイルの中のすべての論文がリストになってしまう．
*** bst ファイルについて
    - bibtexにおいて引用のスタイルを決めているファイルであり，これを目指すジャーナルの投稿規定に合わせる．既にそのようなbst ファイルがあれば極楽だが，ない場合は大変である．この辺は以下のサイトを参照．
      - [[http://www.ketsuago.com/entry/2015/03/16/231806][LaTeXで参考文献の形式を変更する方法（bstファイルの編集）]]
      - [[http://www.med.osaka-u.ac.jp/pub/anes/www/html/manual/bibtex.html][BibTeXのドキュメント]]
**** bst ファイルの置き場所
     - これにはかなり悩まされたが，なんのことはないMacTeXのFAQサイトに書いてあった．
     - [[http://www.tug.org/mactex/2013/faq/#qm05][The Most Frequently Asked Questions (FAQ)]]

       *QM.06 :* Why can't the latest MacTeX find my local BibTeX files? Earlier versions of MacTeX worked correctly.  \\
       \\
       *AM.06 :* TeX Live is slightly pickier about placement of these files. ".bib" files go in \\
       *~/Library/texmf/bibtex/bib* \\
       or subfolders of this directory, and ".bst" files go in \\
       *~/Library/texmf/bibtex/bst* \\
       or subfolders of this directory.
     - ここにおいておけば，パスを指定することなく，どこからでもbstファイルを指定してスタイルを決められる．

*** 文献を引用したorg-modeからのexportの実例
    - ようやく，これで準備が整ったので，実例を示す．以下のファイルを作成し，hogefuga.orgとして保存する．
    #+begin_src lisp
      ,#+LaTeX_CLASS: koma-jarticle
      ,#+LaTeX_CLASS_OPTIONS: [12pt]
      ,#+LATEX_HEADER: \usepackage{geometry}
      ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
      ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
      ,#+STARTUP:  overview
      ,#+STARTUP:  hidestars
      ,#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
      ,#+OPTIONS: date:nil
      ,#+LINK_UP:
      ,#+LINK_HOME:

      ,#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
      ,#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
      \vspace*{-1.5cm}

      \hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

      ,* 背景と目的
      hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
      ,* 結果
      hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\cite{Cosentino:2011dn}

      ,#+NAME: hoge_fuga
      ,#+caption: hoge-fuga（重症例である）
      ,#+attr_latex: :float t :width 3in  :align center
      ,#+ATTR_HTML: :width 500  :float: wrap :align center
      [[./hoge_fuga.jpg]]

      ,* 結論
      hogefugaによる治療は有効である．

      ,#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
    #+end_src

    - hogefuga-References.bibの部分やbstの部分は，それぞれ該当するファイルに置き換えていただきたい．
    - \cite{Stetler:2012jt}  \cite{Cosentino:2011dn} の部分は私のbibファイルにおけるcite-keyである．
    - C-c C-e l o で，文献が番号付きで引用されたpdfが作成され，skimで開く．
    - 下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．また，このbstでは著者名のアルファベット順を指定しているので，最初にでてきた文献が2に，二番目にでてきた文献が1になっていることに注意してほしい．さらに，著者名は3人までは全員記載し，4人以上の論文では4人目以降はet alになっている．bibtexの活用により，これらのことが自動的になされている．

      #+attr_html: :width 100% :target _self
      [[./static/img/ref-pdf.jpg]]
    - ついで，htmlである．C-c C-e h o で，文献が番号付きで引用されたhtmlが作成され，browserで開く．
    - 下図のように，文献リストも付いているし，本文中の番号をクリックすれば文献リストの該当論文にジャンプするリンク付きである．その他もpdfと同様であるが，文献リストにはabstractやDOIも追加される．投稿する際はpdfか，別記事のようにwordにしてしまうので，html出力の設定はこれ以上触っていない．
      #+attr_html: :width 100% :target _self
      [[./static/img/ref-html.jpg]]
    - ようやく，文献付きの原稿の出力の設定にまでたどり着くことができた．次回はpandocを利用して，org-modeからword ファイルを出力する方法をまとめる．
** COMMENT Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする） :org:mode:pandoc:word:export:reference:citation:ox:pandoc:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_paper_4
   :EXPORT_DATE: 2018-09-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   # :EXPORT_HUGO_TOC: true
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/BlueMosque.jpg") (caption . "Sultanahmet Camii"))
   :END:

   医学系の多くのジャーナルでは，論文投稿の際のフォーマットを Microsoft Word と指定しているところが多い．．．．．

   いま，一瞬，憤りのあまり意識を失いかけたが，気を取り直して続ける．実際のところ，仕事でもしばしばword文書を要求される．イチからwordで文書を書くのはやりたくないわけで，ふと，org-modeからexportできないかと調べてみた．やはり，同じようなことを考える人はいるもので，エライ人はそれを実現させるべく色々な方法を開発していた．それらの中から，自分で試してみてうまく行った方法をまとめておく．使用するのは， *pandoc* とそれをorg−modeから利用するための *ox-pandoc* である．

*** ox-pandoc
    - 参照サイト1：本家　[[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
    - 参照サイト2：[[http://kitchingroup.cheme.cmu.edu/blog/2015/06/11/ox-pandoc-org-mode-+-org-ref-to-docx-with-bibliographies/][ox-pandoc - org-mode + org-ref to docx with bibliographies]]
    - 参照サイト3：もっと本家　[[https://pandoc.org][Pandoc   a universal document converter]]
    - pandoc自体の説明は略．ご存知，フォーマット変換のスイスアーミーナイフ．
    - ox-pandocは，pandocを介してorg-mode fileを様々なフォーマットに変換する新しいexporterであり，40種ものフォーマットに変換できる．
    - pandoc 2.0 (or later version)と，bibliography featureを使うならpandoc-citeproc 0.3 (or later)が必要なので，homebrewでインストールする．
      #+begin_src shell
       $  brew install pandoc
       $  brew install pandoc-citeproc
      #+end_src
    - init.orgには以下のように書き込んで，ox-pandocをインストールし，設定する．use-packageを使うと両方がいっぺんにできて便利である．
      #+begin_src lisp
        ,#+begin_src emacs-lisp
        (use-package ox-pandoc
          :ensure t
          :config
          ;; default options for all output formats
          (setq org-pandoc-options '((standalone . t)))
          ;; cancel above settings only for 'docx' format
          (setq org-pandoc-options-for-docx '((standalone . nil)))
          ;; special settings for beamer-pdf and latex-pdf exporters
          (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
          (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
          )
        ,#+end_src
      #+end_src
    - latex engineにxelatex以外を使っている場合は，上記の設定をそちらに変更する．
    - 以上でorg-mode自体の基本的な設定は終了である．

*** 文書の中で実際に引用された論文のみからなる文献リストを生成する方法
    - このリスト（bib ファイル）を作成しておかないと，Wordをexportする際にうまくいかない．
    - reftex-create-bibtex-fileとbibexportの２つの方法がある．
**** reftex-create-bibtex-file
     - 参照サイト：[[https://www.gnu.org/software/emacs/manual/html_node/reftex/BibTeX-Database-Subsets.html][reftex-create-bibtex-file]]
     - Emacsの中に最初から入っているコマンドである．
     - 前回の記事（[[../org-mode_paper_3][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化]]）の際に作成したhogefuga.orgからpdfをexportした際に同じdirectory内にhogefuga.texも保存されているはずである．これをEmacsでオープンし, *M-x reftex-create-bibtex-file* と打つ．すると，実際に引用された論文のみからなる文献リストを生成してくれる．この際に名前をどうするかを聞かれるので，適当につける．今回は，extract.bibとした．
     - しかし，たまに，reftex-create-bibtex-fileで引用された論文の一部が欠けてしまうことがある．そのようなときは，第２の方法であるbibexportが役に立つ．
**** bibexport
     - 参考サイト1：[[https://ctan.org/pkg/bibexport][bibexport – Extract a BibTEX file based on a .aux file]]
     - 参考サイト2：[[https://tex.stackexchange.com/questions/41821/creating-bib-file-containing-only-the-cited-references-of-a-bigger-bib-file][Creating .bib file containing only the cited references of a bigger .bib file]]
     - texliveに含まれているshell script
     - 文書の中の *\cite* で引用された文献のみを抽出する．上記のreftex-create-bibtex-fileはtex ファイルが有れば抽出できたが，こちらはaux ファイルを必要とする．したがって，まず，org-modeからpdfをexportし，tex ファイルを作成し，次いで，tex ファイルをlatex でコンパイルしてaux ファイルを作成し，そのaux ファイルに対してbibexportを用いるというややこしいことをする必要がある．
     - しかし，reftex-create-bibtex-fileでうまく抽出できないときも，bibexportならうまくいくことが多いので，知っておいて損はない．
     - 使い方は以下を参考
       #+begin_src sh :exports both :results code
       bibexport --help
       #+end_src
     - 例えばこんなふうにshellで打つ
       #+begin_src sh
         $ bibexport -o extract2.bib hogefuga_English.aux
       #+end_src

*** pandocのための設定
    - word fileとして出力しても，スタイルが気に入らない可能性は高い．そこで，予めスタイルファイルを自分好みにしておく．
    - 参考サイト1：[[https://github.com/jgm/pandoc/wiki/Defining-custom-DOCX-styles-in-LibreOffice-(and-Word)][Defining custom DOCX styles in LibreOffice (and Word)]]
    - 参考サイト2：[[https://support.office.com/en-us/article/Customize-styles-in-Word-for-Mac-1ef7d8e1-1506-4b21-9e81-adc5f698f86a][Customize styles in Word for Mac]]
    - 参考サイト3：[[https://qiita.com/sky_y/items/5fd5c9568ea550b1d7af][ドキュメント変換ツールPandoc：ユーザーズガイドを熟読して分かったマニアックな使い方]]
    - 上記のサイトを参考にスタイルファイルを作成し，~/.pandocにword用に *reference.docx* として置く．このテンプレートのフォーマットに従ってword fileが出力される．
    - しかし，実は，これが結構面倒くさいのである．念のため自作のものを[[./static/files/reference.docx][ここ]]に置いておく．
*** Citation Style Language (CSL)の設定
    - 参考サイト1：[[https://citationstyles.org][Citation Style Language]]  ご本家
    - 参考サイト2：[[https://github.com/citation-style-language/styles][citation-style-language/styles]] スタイルの在り処
    - 参考サイト3：[[https://github.com/citation-style-language/styles/blob/master/stroke.csl][citation-style-language/styles/stroke.csl]]  今回使用するスタイル
    - CSLは学術出版の引用と文献スタイルの書式自動化を促進することを目的としたオープンソースプロジェクト．ありがたく使わせていただく．
    - 上記の[[https://github.com/citation-style-language/styles/blob/master/stroke.csl][参考サイト3]]からstroke.cslをダウンロードする．
    - stroke.cslをexportの対象のorg fileと同じdirectoryに置いておく．
    - これで，[[https://www.ahajournals.org/journal/str][Stroke]] という雑誌の引用書式に従ったスタイルになってword fileがexportされる．
*** 英語論文の場合のorg fileの設定
    - ここからは，個々のorg-mode file側の設定である．
    - 英語の場合は殆どなんの問題もなくexportされる．
    - 早速実例を見てみる．まず下のorg fileをhogefuga_English.orgとして保存する．
      #+begin_src lisp
        ,#+LaTeX_CLASS: koma-article
        ,#+LaTeX_CLASS_OPTIONS: [12pt]
        ,#+LATEX_HEADER: \usepackage{times}
        ,#+LATEX_HEADER: \usepackage{geometry}
        ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
        ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
        ,#+STARTUP:  overview
        ,#+STARTUP:  hidestars
        ,#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil
        ,#+LINK_UP:
        ,#+LINK_HOME:

        ,#+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease
        ,#+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa

         \vspace*{-1.5cm}

              \hspace{2.5cm} Department of Hogefuga, Hogefuga University

        ,,* Introduction

        Stroke is estimated to be ranked as the second leading cause of death and the third most common cause of permanent disability around the world.\cite{Donnan:2008ax} The proportion of ischemic stroke is more than 90% in all stroke. The underlying metabolomic pathophysiology of ischemic stroke, however, remains poorly understood.

        Recently, metabolome analysis using “omics” method has developed. Mass spectrometry (MS) and nuclear magnetic resonance (NMR) spectroscopy have garnered the most use for profiling a large number of metabolites simultaneously.\cite{Lewis:2008uq} These technologies offer comprehensive information about thousands of low-molecular mass compounds (less than 2kDa) including lipids, amino acids, peptides, nucleic acids, organic acids, vitamins, thiols and carbohydrates. Metabolomics renders the metabolic profile of a system, the end points of biological events, and reflect the state of a cell or group of cells at a given time.\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry (GC/MS) is one of the wide-spread techniques, which enables researchers to determine analyte masses with such high precision and accuracy that peptides and metabolites can be identified unambiguously even in complex fluids.\cite{Lewis:2010oq}

        The profiling of low molecular weight biochemicals that serve as substrates and products in metabolic pathways is particularly relevant to cardiovascular diseases.\cite{Lewis:2008uq} At present, however, very few studies have been reported on metabolic profiling of stroke. Unlike myocardial infarction, metabolomic changes in the brain are not sufficiently reflected by blood biomarkers due to the presence of the blood-brain barrier and dilution by peripheral blood.\cite{kim2013biomarkers} In addition, most of the studies focused on acute stage of stroke.\cite{Jiang:2011uq,Jung:2011fk,Kimberly:2013mq

        ,#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_6-authors.bst option:-a limit:t

      #+end_src
    - 何故か *Introductionの前に２つコンマを打たないとうまくhugoでブログにexportされない（理由は不明，ご教示を乞う）．このために画面上 *Introduction の前にコンマが一つ残っているが，もしコピーして試して見るなら，この余分なコンマは除かないとうまくいかないので注意していただきたい．
    - Emacsで上記のhogefuga_English.orgを開いた状態で，C-c C-e l oとすると，pdfが作成され，下図のようにskimで開かれる．

    #+attr_html: :width 100% :target _self
    [[./static/img/hogefuga_English-pdf.jpg]]

    - 本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．
    - 何故pdfを作成するかというと， *文書の中で実際に引用された論文のみからなる文献リストを生成する* ためである．pdfと一緒にできたtex ファイルで，reftex-create-bibtex-file もしくは bibexportを使って抽出された文献リストであるextract.bibを作成する．
    - 実際に行った手順は以下の通りである．
      1. pdfのexportの際に一緒に生成された *hogefuga_English.tex* をEmacsで開く．

      2. *M-x reftex-create-bibtex-file* する

      3. 抽出された文献ファイルをextract.bibと命名し保存

      4. しかし，extract.bibは何故か引用された8つの文献のうちの6つしか含まれていなかった．

      5. そこで，上述のように *bibexport* を利用することにした．texファイルをxelatexでコンパイルし，できたaux ファイルにbibexportを適用した．[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]]のlatexmkの項を参照のこと．
         #+begin_src sh
            $ latexmk -pvc -pdf -view=none hogefuga_English.tex
            $ bibexport -o extract2.bib hogefuga_English.aux
         #+end_src

      6. これで，８つの文献をすべて含むextract2.bibが生成された．

*** 英語論文のWord fileのexport
    - ようやくWord fileへexportできる段階となった．
    - 上記で作成したhogefuga_Engolish.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．多分パスも効くが，この原稿専用のリストなので，同じdirectoryの方が混乱することがないであろう．

      #+begin_src lisp
        ,#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
        ,#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
        ,#+BIBLIOGRAPHY: extract2.bib
      #+end_src

    - さらに，最後の文献についての以下の部分は削除する．
      #+begin_src lisp
        ,#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
      #+end_src

    - 以上で，下図のようになるので，hogefuga_English_WORD.org として保存する．

      #+begin_src lisp
        ,#+LaTeX_CLASS: koma-article
        ,#+LaTeX_CLASS_OPTIONS: [12pt]
        ,#+LATEX_HEADER: \usepackage{times}
        ,#+LATEX_HEADER: \usepackage{geometry}
        ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
        ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
        ,#+STARTUP:  overview
        ,#+STARTUP:  hidestars
        ,#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc DATE:nil
        ,#+PANDOC_OPTIONS: csl:/Data/Stroke2018/Survival_CEA_CAS-MN/stroke.csl
        ,#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
        ,#+BIBLIOGRAPHY: extract2.bib
        ,#+LINK_UP:
        ,#+LINK_HOME:

        ,#+TITLE: Hogefuga profiling to identify distinct changes associated with hogefuga events in hogefuga disease
        ,#+AUTHOR: taipapa, Nobunaga Oda, Hideyoshi Toyotomi, Ieyasu Tokugawa.

                 \vspace*{-1.5cm}

                      \hspace{3cm} Department of Hogefuga, Hogefuga University

        ,,* Introduction
          Stroke is estimated to be ranked as the second leading cause of
          death and the third most common cause of permanent disability
          around the world.\cite{Donnan:2008ax} The proportion of ischemic
          stroke is more than 90% in all stroke. The underlying metabolomic
          pathophysiology of ischemic stroke, however, remains poorly
          understood.

          Recently, metabolome analysis using “omics” method has
          developed. Mass spectrometry (MS) and nuclear magnetic resonance
          (NMR) spectroscopy have garnered the most use for profiling a large
          number of metabolites simultaneously.\cite{Lewis:2008uq} These
          technologies offer comprehensive information about thousands of
          low-molecular mass compounds (less than 2kDa) including lipids,
          amino acids, peptides, nucleic acids, organic acids, vitamins,
          thiols and carbohydrates. Metabolomics renders the metabolic profile
          of a system, the end points of biological events, and reflect the
          state of a cell or group of cells at a given
          time.\cite{Gerszten:2008uq} Gas-chromatography/mass-spectrometry
          (GC/MS) is one of the wide-spread techniques, which enables
          researchers to determine analyte masses with such high precision and
          accuracy that peptides and metabolites can be identified
          unambiguously even in complex fluids.\cite{Lewis:2010oq}

          The profiling of low molecular weight biochemicals that serve as
          substrates and products in metabolic pathways is particularly
          relevant to cardiovascular diseases.\cite{Lewis:2008uq} At present,
          however, very few studies have been reported on metabolic profiling
          of stroke. Unlike myocardial infarction, metabolomic changes in the
          brain are not sufficiently reflected by blood biomarkers due to the
          presence of the blood-brain barrier and dilution by peripheral
          blood.\cite{kim2013biomarkers} In addition, most of the studies
          focused on acute stage of
          stroke.\cite{Jiang:2011uq, Jung:2011fk, Kimberly:2013mq}
      #+end_src

    - *Introductionの前のコンマについては前述のとおりである．

**** org-modeからWord fileへのexportの方法
     - ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, *export via pandoc* のメニューが見える．そこで，p xとして，export via pandoc ---> to docx and openを選択する．

       #+attr_html: :width 100% :target _self
       [[./static/img/org-C-c-C-e.jpg]]

     - 暫く待つと，下図のようにWordが立ち上がって，docx file（ *hogefuga_English_WORD.docx* ）が開かれる．

       #+attr_html: :width 100% :target _self
       [[./static/img/hogefuga_English-WORD.jpg]]

       - 全体的なスタイルはまずまずである．

       - 本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．

       - 文献リストの体裁はインデントに問題ありだが，これは手作業でやっても苦痛でないレベルである．

       - org-modeのオプションが見えてしまっているが，この程度であれば僅かな手作業で消去できる．

       - *英語に関しては，pdfと比べると多少見劣りがするが，まず問題ないレベルのWord fileが出力できた．*

*** 日本語論文の場合のorg fileの設定
    - 前回の記事（[[../org-mode_paper_3][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化]]）の際に作成したhogefuga.orgをEmacsでオープンし，冒頭に以下の3行を追加する．1行目は引用のスタイルファイルを指定し，2行目はWordのスタイルファイルを指定し，3行目は文書の中で実際に引用された文献のみのリストを指定している．この文献リストはorg-modeと同じdirectoryに置いておく．

      #+begin_src lisp
        ,#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
        ,#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
        ,#+BIBLIOGRAPHY: extract.bib
      #+end_src

    - さらに，最後の文献についての以下の部分は削除する．
      #+begin_src lisp
        ,#+BIBLIOGRAPHY: /Users/taipapa/Documents/hogefuga-References.bib Stroke_3-authors_alphabetical.bst option:-a limit:t
      #+end_src

    - 以上で，下図のようになるので，hogefuga_WORD.org として保存する．

    #+begin_src lisp
      ,#+LaTeX_CLASS: koma-jarticle
      ,#+LaTeX_CLASS_OPTIONS: [12pt]
      ,#+LATEX_HEADER: \usepackage{geometry}
      ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
      ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
      ,#+STARTUP:  overview
      ,#+STARTUP:  hidestars
      ,#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
      ,#+OPTIONS: date:nil
      ,#+PANDOC_OPTIONS: csl:/Data/hoge/fuga/stroke.csl
      ,#+PANDOC_OPTIONS: reference-doc:~/.pandoc/reference.docx
      ,#+BIBLIOGRAPHY: extract.bib
      ,#+LINK_UP:
      ,#+LINK_HOME:

      ,#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
      ,#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
      \vspace*{-1.5cm}

      \hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

      ,* 背景と目的
      hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．\cite{Stetler:2012jt}当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
      ,* 結果
      hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．\cite{Cosentino:2011dn}

      ,#+NAME: hoge_fuga
      ,#+caption: hoge-fuga（重症例である）
      ,#+attr_latex: :float t :width 3in  :align center
      ,#+ATTR_HTML: :width 500  :float: wrap :align center
      [[./hoge_fuga.jpg]]

      ,* 結論
      hogefugaによる治療は有効である．

    #+end_src
*** org-modeからWord fileへのexportの方法
    - ここで，C-c C-e とすると，exportのバッファが表示される．C-nで下の方まで下がると，下図のように, *export via pandoc* のメニューが見える．そこで，p xとして，export via pandoc ---> to docx and openを選択する．

      #+attr_html: :width 100% :target _self
      [[./static/img/org-C-c-C-e.jpg]]

    - 暫く待つと，下図のようにWordが立ち上がって，docx file（ *hogefuga_WORD.docx* ）が開かれる．

      #+attr_html: :width 100% :target _self
      [[./static/img/word-1.jpg]]

      - 本文中に文献番号はついているし，文献リストもStrokeというジャーナルの投稿規定通り6人までの著者名は提示し，それ以上はet al. になっている．

      - Figureのキャプションが消えているが，通常，論文投稿時には，本文と画像は別々になるので，画像自体を本文から削除できるため，問題無しとする．

      - しかし，英語の場合には見られなかった大きな問題が発覚した！　本文が,  *濁点分離* してしまっている．
*** Word file の濁点分離を修正する方法
    - *濁点分離* したままでは使いものにならないので，修正する必要がある．しかし，Word fileの内容を点検して，いちいち手作業をやっていては堪らない．そこで，一気に濁点分離を修正する方法はないものかといろいろ探ってみた．
    - 参考サイト1：[[https://ja.stackoverflow.com/questions/36762/wordで文書内の文字をunicode-nfc正規化する方法][Wordで文書内の文字をUnicode NFC正規化する方法]]
    - 参考サイト2：[[http://labs.timedia.co.jp/2018/04/post-57.html][あらゆる文字に濁点と半濁点を付けてみよう]]
    - 参考サイト3：[[http://ikeikeikeike.hatenablog.com/entry/2013/11/20/121930][Macの濁点問題を解決するPython unicodedataモジュール]]
    - 参考サイト4：[[http://emasaka.blog65.fc2.com/blog-entry-1407.html][濁点問題]]
    - 参考サイト5：[[https://www.slideshare.net/emasaka/ss-82692529][濁点の話]]
    - 参考サイト6：[[https://github.com/emasaka/docx-normarize-nfc][docx-normarize-nfc]]
    - 上記の参考サイト4, 5, 6では，emasaka氏により，pythonを用いた方法が報告されており，[[https://github.com/emasaka/docx-normarize-nfc][docx-normarize-nfc]] としてGithubにアップされている．これはpython scriptであり，.docxファイルをZIPアーカイブとして開き、文書本体のXMLテキストを開いてNFC正規化し、ZIPアーカイブに書き戻すというものであり，これを使わせてもらうことにした．
**** Pythonの導入
     - 参考サイト：[[https://www.python.org][Welcome to Python.org]] （本家）ご存知いま一番アツい言語．それしか知らなくても下記のようにして使える（笑）
     - まず下準備としてpythonを入れる．
     - homebrew でpython3をインストール
       #+begin_src shell
         $ brew install python3
       #+end_src
**** docx-normarize-nfcの導入
     - [[https://github.com/emasaka/docx-normarize-nfc][docx-normarize-nfc]] からダウンロードして，/usr/local/bin/ にコピーする．（/usr/local/binにパスが通っているものとする）
**** 濁点分離の修正
     - これでWord fileに対して上記のスクリプトを使用すれば良い．
     - 念のために，Word fileの名前を，hogefuga_WORD_濁点分離修正済み.docxに変更し新規保存しておく．
     - そのうえで，shellで以下の操作を行う
       #+begin_src shell
         $ docx-normarize-nfc hogefuga_WORD_濁点分離修正済み.docx
       #+end_src
     - 一瞬で修正は終わるので，ファイルをオープンして確かめてみると，下図のように修正されている．素晴らしい．

       #+attr_html: :width 100% :target _self
       [[./static/img/word-fixed.jpg]]
     - ようやく，使い物になる日本語のWord fileを作成することができた．
     - これで，英語でも日本語でも，pdfからWordにコピペして修正するという難行苦行から解放される．
     - しかし，co-authorとのすり合わせやrevisionの際は，まだ，Wordでの作業が必要とされる．苦行は続くのである．．．．．


*** COMMENT Unicode NFC正規化を行うためにucs-normalizeを使う．
**** ucs-normalize
     - 参考１：[[http://sky-y.hatenablog.jp/entry/20120805/1344169124][Emacs小ネタ: MacでPDFからコピーすると濁点が分離する問題を直す]]
     - 参考２：[[http://d.hatena.ne.jp/nakamura001/20120529/1338305696][Mac で PDF からコピーした濁点/半濁点付きの文字列を Firefox に貼り付けた時におかしくなる問題の対処方法]]
     - 以下のようにインストールと設定を行う．
     #+begin_src lisp
       ,#+BEGIN_SRC emacs-lisp
       ;; (require 'ucs-normalize)
       (use-package ucs-normalize
         :config
         (prefer-coding-system 'utf-8-hfs)
         (setq file-name-coding-system 'utf-8-hfs)
         (setq locale-coding-system 'utf-8-hfs)
         )

       (defun ucs-normalize-NFC-buffer ()
         (interactive)
         (ucs-normalize-NFC-region (point-min) (point-max))
         )
       (global-set-key (kbd "C-M-8") 'ucs-normalize-NFC-buffer)
       ,#+END_SRC
     #+end_src
     - M-x ucs-normalize-NFC-buffer または "C-M-8" で，バッファ全体の濁点分離を直してくれる．

**** 具体的な修正方法
     - 参考サイト：[[https://ja.stackoverflow.com/questions/36762/wordで文書内の文字をunicode-nfc正規化する方法][Wordで文書内の文字をUnicode NFC正規化する方法]]
     1. hogefuga_WORD.docxをhogefuga_WORD_v2.docxと新規保存し，拡張子を .zip に変更し，hogefuga_WORD_v2.zip とする．
     2. 手持ちのソフトで，hogefuga_WORD_v2.zipを解凍する．
     3. hogefuga_WORD_v2というdirectoryが展開される．その中は下図のようになっている．

        #+attr_html: :width 70% :target _self
        [[./static/img/word-tree.jpg]]

** COMMENT Emacsとskimで，latexのソースとpdfの間を行ったり来たり :latex:pdf:synchronization:tex:emacs:emacsclient:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Synchronization
   :EXPORT_DATE: 2018-10-07
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Pharaoh.jpg") (caption . "Pharaoh"))
   :END:
   以前の記事（[[../beamer][beamerでスライド原稿用pdfを作成する（その１）]]）で，Emacsでbeamerを用いてlatexのソースを書いてコンパイルし，スライド原稿としてpdfを出力する方法をまとめた．この際に，pdfの特定の箇所がlatexのソースでどこに当たるのかがわかったり，逆に，latexのソースの特定の箇所がpdf上のどこに当たるのかがわかったりすると便利である．今回はそれについてまとめる．なお，auctexの全般的な設定については，TeXWikiの[[https://texwiki.texjp.org/?AUCTeX#h32722ec][macOS での設定例]] を参照していただきたい．

   - 参照：[[https://ryogan.org/blog/2015/12/30/mac-os-x-el-capitan-の-auctex-の設定/][Mac OS X El Capitan の AUCTeX の設定]]
   - 参照：[[https://texwiki.texjp.org/?Emacs#e9c08b3d][skimとの連携]]
   - 参照：[[https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/][AUCTeX の設定と便利な機能]]
   - 参照：[[https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/][TeX_and_PDF_Synchronization]]

*** backward search
    - こちらのほうが便利なので最初に説明する．
    - skimで表示されたpdf上の特定の箇所に該当するLaTeX文書の箇所を探して示してくれる．
    - この機能を可能にするには，skimの環境設定を開いて「同期する」の初期値を「カスタム」とし，コマンドのところに以下のように打ち込む．
      #+begin_src shell
        $ /usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1/bin/emacsclient
      #+end_src
    - defaultでは初期値に「Emacs」となっており，本来ならこれで動くはずだが，homebrewで最新のEmacsをinstallしたために，もともと入っているemacsとはversionが異なる．つまり，サーバーとして起動しているEmacsと、使用するEmacsClientのバージョンが異なることになり，このままでは動かない．そこで，homebrewでインストールした方をfull pathで明示的に指示する必要がある．
    - 引数のところには，以下のように打ち込む．
      #+begin_src shell
         $ --no-wait +%line "%file"
      #+end_src
    - つまりこうなる．
      #+attr_html: :width 100% :target _self
      [[./static/img/skim-1.jpg]]
    - 一方，Emacsのinit.orgには以下のように記述して，Emacs serverを立ち上げておく．
      #+begin_src lisp
        ,#+begin_src emacs-lisp
        ;; Starts the Emacs server
        (server-start)
        ,#+end_src
      #+end_src
    - これで，pdf上の任意の箇所で，Shift-Command-Clickすると，該当するlatex documentの箇所に飛ぶ．~~もし，Emacsが立ち上がっていなければ，Emacsを立ち上げるところからやってくれる．素晴らしい！~~ これは確かめてみると勘違いであった．Emacsは立ち上げておかないといけない．
    - この機能は知ってしまうと，無くてはならないほど便利に感じる機能である．pdfで間違いを見つけたときに，それがlatexソースのどこに相当するかを同定するのは結構面倒であるが，この機能により一発で同定することができる．
    - 該当箇所が少しずれることがあるのが欠点であるが，それでも十分に役に立つ．

*** forward search
    - こちらも，backward searchほどではないが，役に立つ．
    - Emacs上のlatex document上の特定の箇所に該当するpdfの箇所を探して示してくれる．
    - この機能を可能にするには，init.orgに以下のように記述する．
      #+begin_src lisp
        ,#+begin_src emacs-lisp
        (add-hook 'LaTeX-mode-hook
                  (function (lambda ()
                              (add-to-list 'TeX-command-list
                                           '("displayline"
                                             "/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf \"%b\""
                                             TeX-run-discard-or-function t t :help "Forward search with Skim"))
                              )))
        ,#+end_src
      #+end_src
    - これで，C-c C-c displayline により，Emacsのlatex document上の特定の箇所に該当するpdfの箇所に飛んでくれる．pdfの該当するところが赤丸で示される（数秒で消える）．
    - ただし，該当する箇所が結構ずれてしまうことが多い．最近は，beamerでしか使わないので，もしかすると，通常のlatex 文書だと狂いなく示すのかもしれない．まぁ，backward searchと違って， なくても困らない機能である．

** COMMENT Swiper, ivy, avy, migemoによるEmacsの検索強化 :emacs:swiper:ivy:migemo:search:avy:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Swiper_migemo
   :EXPORT_DATE: 2018-10-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Pont_des_Arts.jpg") (caption . "Pont des Arts"))
   :END:

   文章を書いている際に，ある単語を検索したくなるようなことがよくある．Emacsでのデフォルトはisearchであるが，今回は，これを強化するpackageを紹介する．また，最近開いたディレクトリ directory をまた開きたいこともよくあることである．これについてもivyによる検索が便利であるので紹介する．例によってネタ元を見たほうが早いかもしれない．．．(^^;;;

*** swiper.el
    - 参照1：[[https://github.com/abo-abo/swiper][swiper]]  ご本家
    - 参照2：[[http://emacs.rubikitch.com/swiper/][swiper.el: 一覧付き正規表現isearch！C-sを置き換えろ]]
    - 参照3：[[https://qiita.com/blue0513/items/c0dc35a880170997c3f5][Emacsの補完&検索を超強化する]]
    - Emacsでは，C-sに割り当てられたisearchによる正規表現検索がデフォルトで存在する．これをivyを用いて一覧を付加するようにした強化版である．
**** Install & setup
     - 以下を，int.orgに書き込む．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package swiper
         :ensure t
         :config
         (defun isearch-forward-or-swiper (use-swiper)
           (interactive "p")
           ;; (interactive "P") ;; 大文字のPだと，C-u C-sでないと効かない
           (let (current-prefix-arg)
             (call-interactively (if use-swiper 'swiper 'isearch-forward))))
         (global-set-key (kbd "C-s") 'isearch-forward-or-swiper)
         )

       (use-package ivy
         :ensure t
         ;; :config
         ;; (fset 'ivy--regex 'identity)
         )
       ,#+end_src
     #+end_src
     - ivyのコメントアウトしている部分については後述する．
**** 使い方
     - 現在開いているEmacsのバッファで，C-sとするだけでよい．
     - 下図は，ivyを検索しているところだが，下に"Swiper"と表示されるバッファが表示され，そこに”ivy”と打つと，上の本文の中のivyは黄色でハイライトされる．同時に下のバッファでは，現在見ているivyのある行に下線が引かれ，行数が横に示される．上下のArrow Keyでivyのある行から次の行に飛べる．リターンすれば本文のその行に行ける．非常に便利である．

       #+attr_html: :width 100% :target _self
       [[./static/img/swiper-1a.jpg]]

*** migemo
    - 参照1：[[http://0xcc.net/migemo/][Migemo: ローマ字のまま日本語をインクリメンタル検索]]
    - 参照2：[[https://www.yokoweb.net/2017/03/05/emacs-macos-migemo/][【Emacs/macOS】migemoを有効にし、ローマ字のまま日本語検索する]]
    - migemoとは，「ローマ字のまま日本語をインクリメンタル検索するため のツールです。かな漢字変換をすることなく日本語のインクリメン タル検索を快適に行うことができます。」
    - 一度使い始めるとやみつきになるので，オススメ！
**** cmigemoのinstall
     - まず，C言語で再実装されたcmigemoをインストールする．homebrewで簡単にインストールできる．--HEADのオプションが必要との記載もあるが，なくても同じであった．
     #+begin_src shell
       $ brew install cmigemo
     #+end_src
**** migemo.elのInstall & setup
     - 以下を，int.orgに書き込む．
     #+begin_src lisp
       ,#+BEGIN_SRC emacs-lisp
       (use-package migemo
         :ensure t
         :config
         ;; C/Migemo を使う場合は次のような設定を .emacs に加えます．
         (setq migemo-command "cmigemo")
         (setq migemo-options '("-q" "--emacs" "-i" "\a"))
         (setq migemo-dictionary "/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict")  ;; 各自の辞書の在り処を指示
         (setq migemo-user-dictionary nil)
         (setq migemo-regex-dictionary nil)
         ;; charset encoding
         (setq migemo-coding-system 'utf-8-unix))
       ,#+END_SRC
     #+end_src
*** avy-migemo（swiperのmigemo対応）
    - 参照１：[[https://github.com/momomo5717/avy-migemo/blob/master/README.jp.org][avy-migemo]]
    - 参照２：[[https://dev.classmethod.jp/tool/emacs-avy-migemo/][avy と migemo を組み合わせたパッケージ avy-migemo.el のご紹介]]
    - 参照３：[[https://qiita.com/ballforest/items/7810e229d6f771d0ab16][avyのmigemo対応およびswiperのmigemo対応]]
    - 上記のswiperだけでも十分に便利であるが，swiperをmigemoに対応させることで，更に便利になる．
    - 前述したswiper.elでのコメントアウトした設定部分，つまり，
      #+begin_src emacs-lisp
          ;; (fset 'ivy--regex 'identity)
      #+end_src
      は，コメントアウトしておかないと，migemo化を無効にしてしまうので注意。

**** Install & setup
     - 以下を，int.orgに書き込む．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package avy-migemo
         :ensure t
         :config
         (avy-migemo-mode 1)
         (setq avy-timeout-seconds nil)
         (require 'avy-migemo-e.g.swiper)
         (global-set-key (kbd "C-M-;") 'avy-migemo-goto-char-timer)
         ;;  (global-set-key (kbd "M-g m m") 'avy-migemo-mode)
         )
       ,#+end_src
     #+end_src
**** 使い方
     - 現在開いているEmacsのバッファで，C-sとするだけでよい．
     - 下図は，"taiou"，つまり，「対応」を検索しているところである．migemo化する前と同じようにローマ字で日本語が検索できる．
     - 当たり前だが，漢字を入力しても検索できる．

       #+attr_html: :width 100% :target _self
       [[./static/img/swiper-2a.jpg]]

*** 最近開いたディレクトリを開く
    - 参照：[[http://pragmaticemacs.com/emacs/open-a-recent-directory-in-dired-revisited/][OPEN A RECENT DIRECTORY IN DIRED: REVISITED]]　ネタ元
    - ivyを使って最近開いたディレクトリを動的に探索する方法をコード化してくれているので紹介する．
    - 以下のコードをinit.orgに書き込めば良い．
      #+begin_src lisp
        ,#+begin_src emacs-lisp
        (defun bjm/ivy-dired-recent-dirs ()
          "Present a list of recently used directories and open the selected one in dired"
          (interactive)
          (let ((recent-dirs
                 (delete-dups
                  (mapcar (lambda (file)
                            (if (file-directory-p file) file (file-name-directory file)))
                          recentf-list))))

            (let ((dir (ivy-read "Directory: "
                                 recent-dirs
                                 :re-builder #'ivy--regex
                                 :sort nil
                                 :initial-input nil)))
              (dired dir))))

        (global-set-key (kbd "C-x C-d") 'bjm/ivy-dired-recent-dirs)
        ,#+end_src
      #+end_src
    - C-x C-dすれば，下図のように，最近開いたディレクトリが表示され，その中から行きたいディレクトリを選んで，リターンすれば良い．
      #+attr_html: :width 100% :target _self
      [[./static/img/directory-1a.jpg]]

    以上，今回は小ネタだが非常に有用なものばかりを紹介した．

** COMMENT RをMac OSX (Sierra)にbrewでinstallしていて，upgradeしてハマったときの対処法 :R:Rstudio:bioconductor:homebrew:install:update:error:
   :PROPERTIES:
   :EXPORT_FILE_NAME: R_homebrew_update_error
   :EXPORT_DATE: 2018-10-27
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/GrandPlace.jpg") (caption . "Grand Place"))
   :END:
   [[https://www.r-project.org][R]]とは，オープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である（Wikipediaより）．org-modeと同じくらい必要不可欠なRではあるが，定期的にupdateする必要がある．いや，まぁ，したほうが良い，というか，しないと新しいパッケージが試せなかったりするので，しないではいられない．しかし，updateすると，たいていどこかでハマる．そこで，今回は，ハマったときの対処法を自分のためにまとめておくことにする．ハマるのはbioconductorの方が多いような気がする．ちなみに当方の環境は，MacBook Pro (15-inch, Late 2016) macOS Sierra 10.12.6である．先日もRを3.5.1にupdateしてハマったばかりである.....(^^;;;

*** gccのリンク絡みのトラブル
    - 大体は以下で直ることが多い（[[https://github.com/Homebrew/homebrew-science/issues/5587][r has dependency on gcc@6, but only lists gcc (which has updated to 7) #5587]]）
      #+begin_src shell
        $ brew link --overwrite gcc
      #+end_src

*** XMLが入らない
    - XMLを入れるのが目的ではなく，なにか別のパッケージをインストールしようとして，それがXMLに依存しており，XMLを入れようとしてハマることが多いと思う．エラーメッセージは，configure: error: “libxml not found”である．しかし，homebrewで，brew listしてみると，libxml2はインストールされている．このあたりは，[[https://medium.com/biosyntax/installing-r-package-xml-on-macos-10-13-6-1738146d4ee0][Installing R package XML on MacOS 10.13.6]]と同じである．対処法は，同サイトや引用元の[[https://stackoverflow.com/questions/40682615/cannot-install-xml-package-in-r][Cannot install XML package in r]]にある通り，以下のようにコンパイラーに正しいxml2-configの場所を教えてやれば良い．
      #+begin_src shell
        Sys.setenv(XML_CONFIG = "/usr/local/Cellar/libxml2/2.9.7/bin/xml2-config")
      #+end_src
      なお，上記を入力するのはRのコンソールである．通常のterminalにexportで入力しても効かないので注意すること！（これでどれだけ時間を無駄にしたことか．．．(ToT)）

*** Cairoなどのインストール時に，#include &lt;X11/Xlib.h&gt; でハマる．
    - 'X11/Xlib.h' file not found, #include &lt;X11/Xlib.h&gt; のようなエラーが出てコンパイルできないことがある（例えば，"Cairo" packageなど）．要するにXlib.hの在り処が分からんということである．mdfind（Mac版のlocate）で探してみると，以下のような結果が得られる．
      #+begin_src sh
        $ mdfind -name Xlib.h | grep X11
        /opt/X11/include/cairo/cairo-xlib.h
        /opt/X11/include/X11/Xlib.h
        /System/Library/Frameworks/Tk.framework/Versions/8.4/Headers/X11/Xlib.h
        /System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h
        /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11/Xlib.h
      #+end_src
      そこで，目的のXlib.hは，/opt/X11/include/X11/Xlib.hと分かるので，include directoryにこれを含めるように指示すれば良い．これも，前項と同じく，Rのコンソールに入力すること！（これでどれだけ．．．以下同文）
      #+begin_src sh
       Sys.setenv(C_INCLUDE_PATH = "/opt/X11/include")
      #+end_src
      これで，コンパイルできるようになるはずである．
    - どこにX11/Xlib.hが入っているかは，インストールの仕方により色々であろうから，場所を確認してから上記の操作を行うようにする．
    - なお，ネットのあちこちに，Xquartzをdowngradeすればコンパイルできる，みたいなことが書いてあったが，あれはなんなのだろうか．．．？

*** rsvgのインストール時に，xcb-shm.pcがないと怒られる．
    - こんな感じである．
      #+begin_src sh
        > biocLite("rsvg")
        ...................................
        Package xcb-shm was not found in the pkg-config search path.
        Perhaps you should add the directory containing `xcb-shm.pc'
        to the PKG_CONFIG_PATH environment variable
        Package 'xcb-shm', required by 'cairo', not found
        Found INCLUDE_DIR and/or LIB_DIR!
        Using PKG_CFLAGS=-I/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig/librsvg-2.0.pc
        Using PKG_LIBS=-L/usr/local/Cellar/librsvg/2.40.20/lib/pkgconfig -lrsvg
        ------------------------- ANTICONF ERROR ---------------------------
        Configuration failed because librsvg-2.0 was not found. Try installing:
        ,* deb: librsvg2-dev (Debian, Ubuntu, etc)
        ,* rpm: librsvg2-devel (Fedora, EPEL)
        ,* csw: librsvg_dev, sunx11_devel (Solaris)
        ,* brew: librsvg (OSX)
        If librsvg-2.0 is already installed, check that 'pkg-config' is in your
        PATH and PKG_CONFIG_PATH contains a librsvg-2.0.pc file. If pkg-config
        is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:
        R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'
        --------------------------------------------------------------------
        ERROR: configuration failed for package ‘rsvg’
        ,* removing ‘/usr/local/Cellar/r/3.5.1/lib/R/library/rsvg’

        The downloaded source packages are in
        ‘/private/var/folders/rq/hj_634613dbfzs41djqt52y80000gn/T/RtmpzsGqp0/downloaded_packages’
        Updating HTML index of packages in '.Library'
        Making 'packages.html' ... done
        警告メッセージ:
        install.packages(pkgs = doing, lib = lib, ...) で:
        installation of package ‘rsvg’ had non-zero exit status
      #+end_src

    - 要するに，xcb-shm.pcのあるディレクトリをPKG＿CONFIG＿DIRに追加しろと言ってるので，xcb-shm.pcがどこにあるかをmdfindで探してから，言われるとおり追加する．
      #+begin_src sh
        $ mdfind -name xcb-shm.pc
        /opt/X11/lib/pkgconfig/cairo-xcb-shm.pc
        /opt/X11/lib/pkgconfig/xcb-shm.pc
        /usr/local/Cellar/cairo/1.14.8/lib/pkgconfig/cairo-xcb-shm.pc
        /usr/local/Cellar/cairo/1.14.10/lib/pkgconfig/cairo-xcb-shm.pc
        /usr/local/Cellar/cairo/1.14.12/lib/pkgconfig/cairo-xcb-shm.pc
      #+end_src

    - 上記のように，/opt/X11/lib/pkgconfig/xcb-shm.pcとなっているので，これを追加する．このときも上述のごとく，RのコンソールでSys.setenvを使う．
      #+begin_src sh
        > Sys.setenv(PKG_CONFIG_PATH = "/opt/X11/lib/pkgconfig")
      #+end_src

    - これで，rsvgはうまくコンパイルされる．

    今回はいきなりのRネタになってしまった．

** COMMENT Tufte-LaTeXとtufte-org-modeについて                 :tufte:latex:org:mode:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Tufte
   :EXPORT_DATE: 2018-11-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/GrandPlace2.jpg") (caption . "Grand Place (daytime)"))
   :END:

   以前の記事（[[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]）にも書いたが，Tufte−LaTeXなるものを愛用している．今回はこれについてもう少し詳しく書いてみたい．

*** [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]]
    - [[https://www.edwardtufte.com/tufte/index][Edward R. Tufte]]によって作られたページレイアウトのためのlatex packageである．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．
    - さて，このスタイルが何の役に立つかというと，報告書の作成の際に図を入れたりするときに，latexのfloatを使うと案外思うところに挿入されないことがある．このスタイルだと，図は少し小さくなるが，きちんと横に納まってくれるのがよい．
    - [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]]のサイトには，"the style of Edward R. Tufte and Richard Feynman"と書かれている．ん，と思って調べてみると，やはり，あの物理学者のファインマンのことであった．興味のある方は，The Feynman-Tufte Principleでググってみると面白いかもしれない．
    - 以前の記事（[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]]）に書いたようにtexliveをインストールしてあれば，tufte-latexは一緒にインストールされているので，新たにインストールする必要はない．

*** [[https://github.com/tsdye/tufte-org-mode][tufte-org-mode]]
    - [[https://github.com/tsdye/tufte-org-mode/blob/master/README.md][tufte-org-mode]]は，上述のlatexのtufte classをorg-modeから使えるようにした有り難いパッケージである．このおかげでlatexの記法を意識することなく，org-modeで普通に文章を書いていき，最後に後述する如く，オマジナイを唱えればTufte styleのpdfができあがる．
*** 設定
    - 下記の2つの設定で使えるようになる．init.orgでの設定の順番はどちらが先でも動く．
**** tufte-org-modeのインストールと設定
     - 以下のようにinit.orgに書き込んで設定する．
     - ox-tufte-latex.elは上記の [[https://github.com/tsdye/tufte-org-mode][tufte-org-mode]]からダウンロードしてローカルに置いてインストールしている．パスは各自の環境に合わせて変更していただきたい．
       #+begin_src lisp
         ,#+begin_src emacs-lisp
         (quelpa
          '(ox-tufte-latex :fetcher file :path "/path/to/ox-tufte-latex.el")
          )
         (use-package ox-tufte-latex)
         ,#+end_src
       #+end_src
     - quelpaは，use-packageでうまくインストール出来ないときに重宝する．
     - quelpaについては以下を参照
       + [[https://github.com/quelpa/quelpa][Quelpa]]
       + [[http://emacs.rubikitch.com/quelpa/][quelpa.el : 【本邦初公開】MELPAを改善した新しいパッケージ管理システム]]
       + [[https://qiita.com/tadsan/items/99bd9a5bbdb36def13e2][CaskからQuelpaに移行する]]

**** org-modeでtufte-latexの設定
     - ox-latexの設定などは以前の記事（[[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]）に書いたようにinit.orgに記述しておく．
     - 以下のようにinit.orgに書き込んで設定する．これは以前の記事（[[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]）と重複するが，念のためにここにも書いておく．
       #+begin_src lisp
         ,#+begin_src emacs-lisp
         ;; tufte-handout class for writing classy handouts and papers
         (add-to-list 'org-latex-classes
                      '("tufte-handout"
                        "\\documentclass[twoside,nobib]{tufte-handout}
                                            [NO-DEFAULT-PACKAGES]
                                                                             \\usepackage{zxjatype}
                                                                             \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")))
         ;; tufte-book class
         (add-to-list 'org-latex-classes
                      '("tufte-book"
                        "\\documentclass[twoside,nobib]{tufte-book}
                                           [NO-DEFAULT-PACKAGES]
                                                                            \\usepackage{zxjatype}
                                                                             \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\part{%s}" . "\\part*{%s}")
                        ("\\chapter{%s}" . "\\chapter*{%s}")
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")))
         ,#+end_src
       #+end_src
     - ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．

       #+attr_html: :width 100% :target _self
       [[./static/img/org-C-c-C-e.jpg]]

     - ここで，l oと打つと普通（Tufte styleではない）のpdfがオープンされてしまう．
     - Tufte styleのpdfを得るためには，T pと打って，Export to Tufte LaTeX の中からAs PDF file and openを選択しなければならない．これで，原稿が得られ，skimでオープンされる．

*** tufteの使用の実例
    - それでは実例を示してみる．以下のような書類を作成し，Tufte_test.orgとして保存する．hoge_fuga.jpgなどの画像は全てTufte_test.orgファイルと同じdirectoryにあるものとする．
      - 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略.....(^^;;;
      - :offset -8inによって，図の位置を上にずらしてバランスをとるようにしているのにご注意いただきたい．
      #+begin_src lisp
        ,#+LaTeX_CLASS: tufte-handout
        ,#+LaTeX_CLASS_OPTIONS: [12pt]
        ,#+LATEX_HEADER: \usepackage{geometry}
        ,#+LATEX_HEADER: \geometry{left=0.6in,top=1in,bottom=1in}
        ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
        ,#+STARTUP:  overview
        ,#+STARTUP:  hidestars
        ,#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
        ,#+LINK_UP:
        ,#+LINK_HOME:
        ,#+OPTIONS: author:nil date:nil

        ,#+begin_fullwidth
        \centering
        ,#+LATEX: \huge{\textbf{hoge/fugaによる相補的な治療における高難度症例の治療と成績}}
        \vspace{0.5cm}\\
        ,#+LATEX: \normalsize{taipapa, 織田信長, 豊臣秀吉, 徳川家康}\\
        \vspace{0.5cm}\\
        ,#+LATEX: \normalsize{hogefuga大学大学院 hogefuga研究科 hogefuga分野}
        ,#+end_fullwidth

        ,* *背景と目的*
        hogeとfugaを比較し，治療成績を比較する．
        ,* *結果*
        まず，hogefugaの軽症例の画像を呈示する (*Fig. [[hoge_fuga2]]*)．

        \vspace{0.25cm}

        そのころわたくしは、モリーオ市の博物局に勤めて居りました。

        十八等官でしたから役所のなかでも、ずうっと下の方でしたし俸給もほんのわずかでしたが、受持ちが標本の採集や整理で生れ付き好きなことでしたから、わたくしは毎日ずいぶん愉快にはたらきました。殊にそのころ、モリーオ市では競馬場を植物園に拵え直すというので、その景色のいいまわりにアカシヤを植え込んだ広い地面が、切符売場や信号所の建物のついたまま、わたくしどもの役所の方へまわって来たものですから、わたくしはすぐ宿直という名前で月賦で買った小さな蓄音器と二十枚ばかりのレコードをもって、その番小屋にひとり住むことになりました。わたくしはそこの馬を置く場所に板で小さなしきいをつけて一疋の山羊を飼いました。毎朝その乳をしぼってつめたいパンをひたしてたべ、それから黒い革のかばんへすこしの書類や雑誌を入れ、靴もきれいにみがき、並木のポプラの影法師を大股にわたって市の役所へ出て行くのでした。

        あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモリーオ市、郊外のぎらぎらひかる草の波。

        またそのなかでいっしょになったたくさんのひとたち、ファゼーロとロザーロ、羊飼のミーロや、顔の赤いこどもたち、地主のテーモ、山猫博士のボーガント・デストゥパーゴなど、いまこの暗い巨きな石の建物のなかで考えていると、みんなむかし風のなつかしい青い幻燈のように思われます。では、わたくしはいつかの小さなみだしをつけながら、しずかにあの年のイーハトーヴォの五月から十月までを書きつけましょう。

        \vspace{0.25cm}

        ついで，hogefugaの重症例の画像を呈示する (*Fig. [[hoge_fuga]]*)．

        ,#+NAME: hoge_fuga2
        ,#+caption: hoge-fuga（軽症例である）
        ,#+attr_latex: :float margin :width 2.8in :offset -8in
        ,#+attr_latex: :vertical-alignment t
        [[./hoge_fuga2.jpg]]

        ,#+NAME: hoge_fuga
        ,#+caption: hoge-fuga（重症例である）
        ,#+attr_latex: :float margin :width 2.8in :offset -2in
        ,#+attr_latex: :vertical-alignment t
        [[./hoge_fuga.jpg]]


        ,* *結論*
        hogefugaによる治療は有効である．
      #+end_src

      - ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e T pと打てば，以下のようなpdfがskimで開かれる．

        #+attr_html: :width 100% :target _self
        [[./static/img/Tufte_test_v5.jpg]]

      - 上述のように，:offset の部分で図の位置を調整している．これなしだと，かなり下の方に位置してしまう．

      - なかなか良い感じになっている．(^o^)

      - 今回は，Tufte styleの紹介であった．実は，このスタイルを手術所見を書くのに使用している．

** COMMENT Hugoのacademic themeを使ったBlogのsyntax highlightingについて :Hugo:blog:academic:theme:syntax:highlighting:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Hugo_Blog_academic_syntax_highlighting
   :EXPORT_DATE: 2018-11-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/GrandPlace2.jpg") (caption . "Grand Place (daytime)"))
   :END:

** COMMENT Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（2018年12月19日追記）（2020年1月12日追記） :emacs:orgmode:html:export:css:color:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: html_export
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2018-12-10
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugo v0.60+ とGoldmarkへの対応"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Parthenon"))
   :END:

学会発表や論文作成にあたっては，当然のことながら，その分野の他の研究者の論文を読んでまとめるなどの作業を行う．そこで，論文の要旨などをorg-modeにざっとまとめておくと，pdfにもhtmlにもtextにもexport出来て便利である．pdfは印刷に向いているが，htmlは多くの論文をいっぺんに見るのに向いており，また，compileの時間もpdfより圧倒的に速い．また，色を変えたり，ハイライトしたりするのもhtmlなら容易である．そこで，今回は，org-modeからhtmlへexportする際の有用な小技について書いてみたい．

*** [[https://github.com/fniessen/org-macros][Org Macros]]
    フォントの色を変更する方法はいろいろあるが，ハイライトや背景の色の変更までできるこの [[https://github.com/fniessen/org-macros][Org Macros]]が一番便利である．内容は，org-modeの便利なマクロ集である．リンク先からダウンロードして，適当なところに保存し，解凍しておく．ここでは，/Users/taipapa/hoge/fuga/org-macros.setupに置くことにする．使い方は簡単で上記のwebsiteに書いてあるとおり，各org fileの先頭に以下のように記述してorg-macros.setupの場所を教えてやれば良い．
    #+begin_src lisp
        ,#+INCLUDE: /Users/taipapa/hoge/fuga/org-macros.setup
    #+end_src
    これだけである．
    - +注意事項としては，このブログはox-hugoで書いているが，ox-hugoの場合は文書の先頭に上記を書いても効かない．各ポストのpropertyのあとに書いておけば効く．各ポストごとに設定するようになっているらしい．．．．．（全国15人？ぐらいの人にしか意味のない注意書きである）+
**** 上記に関しては，ox-hugoの作者であるKaushal Modi氏から以下のような指摘を頂いた．（12月19日追記）
     #+begin_panel
     Can you try using #+setupfile instead of #+include? As an example, here is my blog Org source that I export using ox-hugo ( https://gitlab.com/kaushalm... ), and here is the setup file tha t I "include" using the more appropriate #+setupfile ( https://gitlab.com/kaushalm... ).

     As you see, I use a lot of Org macros, and they all work in my "one post per subtree" flow.
     #+end_panel
     ということで，ox-hugoの場合は，以下のように文書の先頭に書いておけば，one-post per subtreeの投稿全てにorg-macroが効くことを確認した．
     #+begin_src lisp
        ,#+setupfile: /Users/taipapa/hoge/fuga/org-macros.setup
     #+end_src
     こんなブログにまで目を通してコメントしてくれるのには驚いた．親切な方である．日本語が読める人なのかとも思ったが，どうやらGoogleの翻訳を利用されているようだ．このページだと，[[https://translate.google.com/translate?depth=1&sl=auto&sp=nmt4&tl=en&u=https://taipapamotohus.com/post/html_export/&xid=17259,1500004,15700019,15700124,15700149,15700186,15700190,15700201,15700237,15700242#comment-4245099680][A Perfect Autumn Day]]に行くと翻訳版を見ることができる．その翻訳レベルにも今更ながら感心した．．．
     - 残念ながら，LaTeXへのexportでは，この方法による色の変更などは（現在のところ）効かない．
     いくつか使い方の例をあげておく
     #+begin_src lisp
        {{{color(red, 赤くなるかな？)}}}
        ,*{{{color(blue, ボールドで赤くなるかな？)}}}*
        {{{highlight(yellow, 黄色にハイライトされるかな？)}}}
        ,*{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}*
        {{{bgcolor(cyan, 背景がシアンになるかな？)}}}
        ,*{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}*
     #+end_src
     これが以下のように表示される．
     + {{{color(red, 赤くなるかな？)}}}
     + *{{{color(red, ボールドで赤くなるかな？)}}}*
     + {{{highlight(yellow, 黄色にハイライトされるかな？)}}}
     + *{{{highlight(yellow, 黄色にハイライトされて文字はボールドになるかな？)}}}*
     + {{{bgcolor(cyan, 背景がシアンになるかな？)}}}
     + *{{{bgcolor(cyan, 背景がシアンになって文字はボールドになるかな？)}}}*

上記以外にも多くのマクロが含まれており，そちらも人によっては有用かもしれない．少しだけ例をあげておく．以下はパネルの例．
     #+begin_src lisp
        {{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}}
     #+end_src
     これが，
     {{{begin_panel}}} Panel example This is a formatted block of text… {{{end_panel}}}
     となる．マニュアルでは以下の使い方を薦めている．
     #+begin_src lisp
        ,#+begin_panel
        ,*Panel example* \\
        This is a formatted block of text...
        ,#+end_panel
     #+end_src
     #+begin_panel
     *Panel example* \\
     This is a formatted block of text...
     #+end_panel
     なお，org-modeのマクロ自体に関しては，org-modeのマニュアルの *12.5 Macro replacement* を参考にしていただきたい．

   {{% alert note %}}
   *2020年1月12日　Hugoを使用している人のための追記*
   {{% /alert %}}

   2019年の年末にMacBook Pro 16 inch (Catalina)に買い替えた時，Hugoもv.０.61にupgradeした．その際に，HugoのMarkdown用のdefault libraryがGoldmarkに変更になっていることに気がついていなかった．そのためにこのページのフォントの色の変更が働かなくなっていた．数日前に気がついたので，修正した．詳細は以下のサイトを参考．

参考サイト1：[[https://gohugo.io/news/0.60.0-relnotes/][Goldmark – CommonMark compliant, GitHub flavored, fast and flexible – is the new default library for Markdown in Hugo.]]

参考サイト2：[[https://discourse.gohugo.io/t/ox-hugo-go-org/21254/7][Just wonder if the migration to Goldmark is going to be smooth ?]]

上記のサイトには，「マークダウンファイルにinline HTMLがたくさんあるのなら，unsafe modeを有効にしないといけないかもね」とあるので，config/default/config.tomlの最後に，

#+begin_src
[markup]
  [markup.goldmark]
    [markup.goldmark.renderer]
      unsafe = true
#+end_src

を追加した．これで，Markdownがうまく働くようになり，再びフォントの色も変更されるようになった．




*** [[https://stackoverflow.com/questions/21340380/exporting-org-mode-to-html-in-place-coloring][Exporting org-mode to HTML: In-place coloring]]
    フォントの色を変える別の方法である．リンク先にある通り，
    #+begin_src html
この文章は， *@@html:<font color = "blue">@@青のボールド@@html:</font>@@*になって欲しい！
    #+end_src
    これが以下のように表示される．\\
    この文章は， *@@html:<font color = "red">@@赤のボールド@@html:</font>@@* になって欲しい！
    - org-modeのマニュアルの *12.9.5 Quoting HTML tags* も参考のこと

      こちらは設定を必要としないが，やはり，最初に説明したマクロの方がいろいろ出来て便利である．

      次回は，htmlをexportする際のCSSについてまとめてみたい．

** COMMENT Org-modeでhtml exportの際のthemeについて :emacs:orgmode:html:export:css:theme:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-html-export-theme
   :EXPORT_DATE: 2018-12-16
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Topkapi_Palace.jpg") (caption . "Topkapi Palace"))
   :END:

   org-modeで文書を書いてhtmlにexportすると，素のままでは，なんの愛想もない．特にいくつかの項目をまとめた要約などを並べていくときは，side columnなどがあって，すぐに行きたいところに飛べるようになっていると嬉しい．ということで，今回はorg-modeをhtmlにexportするときのthemeがテーマである．．．．．

   とにかく，たくさんのthemesが存在する．まずは以下のサイトをチェック，というか以下を読めばこのブログは読まなくても良いような．．．(^^;;;

   1. [[https://qiita.com/sambatriste/items/2dc9f81cbf1e82d7429a][org-modeのHTMLテーマ]]
   2. [[https://qiita.com/sambatriste/items/c8e70368ee5fd092096b][org-modeのHTMLテーマ第2弾]]
   3. [[https://github.com/fniessen/org-html-themes#how-to-export-org-mode-files-into-awesome-html-in-2-minutes][How to export Org mode files into awesome HTML in 2 minutes]]
   4. [[https://github.com/thi-ng/org-spec][org-spec]]

   私のお気に入りは，ReadTheOrg（上記の1, 3にある）とorg-spec（上記の4）である．

*** ReadTheOrg
    これは[[https://docs.readthedocs.io/en/latest/][Read the Docs]]で使われているthemeのcloneである．一番簡単な使い方は，3にあるようにsetup fileをorg fileのpreambleに書いておくことである．
    #+begin_src lisp
      ,#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
    #+end_src
    あるいは，3からOrg-HTML themes projectをダウンロードしてきて解凍しローカルの"setup file"へのパスを書き込めば，ネットの接続に依存せずにexportできるようになる．たとえば，/Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setupに設定ファイルがあるとすると以下のようにすれば良い．
    #+begin_src lisp
      ,#+SETUPFILE: /Hoge/Fuga/org-html-themes-master/setup/theme-readtheorg.setup
    #+end_src
    以下に研究会で発表するスライド原稿を作る下準備として，実際に10個の論文をまとめたorg fileの一部を掲示しておく．左に論文のタイトルが並び，見ている論文の小見出しが自動的に展開される．subheadの色も設定されており，読みやすい．デザインもプロっぽい印象である．書いた内容にかかわらず，なんとなく賢くなったような気分になれる（笑）．
    #+attr_html: :width 100% :target _self
    [[./static/img/ReadTheOrg.jpg]]

*** [[https://github.com/thi-ng/org-spec][org-spec]]
    An Org-mode template for technical specification documents and HTML publishing. とのことで，技術よりのthemeである．特徴としては，Ditaa, Graphviz & PlantUMLなどによりテキストベースで図が書ける．表に対応，自動的にアップデートするフィールド，PDF生成にも対応，コードブロックの基本的なsyntax highlightingなどがある．実際の例として[[https://demo.thi.ng/org-spec/][https://demo.thi.ng/org-spec/]]がある．

    こちらの使い方は少しだけ面倒である．リンク先からorg-specをダウンロードして解凍する．ここで，style.cssが/Hoge/Fuga/org-spec-master/css/style.cssに保存されたとする．ダウンロードして来たファイルに含まれているindex.orgに全て書いてあるので，それを真似てorg fileのpreambleに次のように書いておく．
    #+begin_src lisp
      ,#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
      ,#+HTML_HEAD: <link href="/Hoge/Fuga/org-spec-master/css/style.css" rel="stylesheet" type="text/css" />
      ,#+AUTHOR: taipapa
      ,#+EMAIL: your@mail.address

      ,#+HTML: <div class="outline-2" id="meta">
      | *Author* | {{{author}}} ({{{email}}})    |
      | *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |
      ,#+HTML: </div>

      ,#+TOC: headlines 2
    #+end_src
    以下に前述の論文のまとめをこのcssでexportしたものを掲示しておく．印象がかなり変わると思う．subheadなどは最初から展開されている．ReadTheOrgよりもビジネスライクな感じであるが，よりスマートな気もする．その日の気分によって，この2つを使い分けている．

    [[./static/img/org-spec.png]]

    以上あげた2つ以外にも無数のthemeが存在する．また，自分でthemeを作ってしまう剛の者もいらっしゃるので，あちこちを探してみるのも一興．．．(^o^)

** COMMENT Org-modeで再帰的にsubtreeを絞ったり広げたりする（recursive-narrow） :orgmode:emacs:recursive:narrow:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_recursive-narrow
   :EXPORT_DATE: 2018-12-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/PiazzaNavona.jpg") (caption . "Piazza Navona"))
   :END:
   org-modeで文章を書いているときに，他のsubtreeが邪魔で消したくなることがある．そして必要になれば，また，もとに戻すことができれば便利である．これを実現してくれるパッケージが[[https://github.com/nflath/recursive-narrow][recursive-narrow]]である．
*** インストールと設定
    インストールは例によって，init.orgに以下のように書き込むだけである．
    #+begin_src lisp
     ,#+begin_src emacs-lisp
     (use-package recursive-narrow
       :ensure t)
     ,#+end_src
    #+end_src
    これでインストールと設定は終了である．
*** 使用法
    使い方も実に簡単であり，"C-x n n"で現在カーソルがあるsubtree以下のみが表示されるようになり，"C-x n w"で元の表示に戻る．これではよくわからないので，実際の画像を示す．まず，最初の画像では全体の画面が表示されており，1951行目の「Org-modeで再帰的に」の行にカーソルがある．

    #+attr_html: :width 100% :target _self
    [[./static/img/narrow-1.jpg]]

    ここで，"C-x n n"とやると，次の画面のようになる．つまり，1951行目以降のsubtreeのみが表示される．

    #+attr_html: :width 100% :target _self
    [[./static/img/narrow-2.jpg]]

    次にカーソルを1962行目の「インストールと設定」に移動する（画像ではすでに移動済み）．そして，再度"C-x n n"とやると，以下の画像のようになる．

    #+attr_html: :width 100% :target _self
    [[./static/img/narrow-3.jpg]]

    つまり，「インストールと設定」のsubtreeのみの表示となるわけである．集中したい領域だけが表示されて，効率よく入力できる．

    広い領域の表示が必要となれば，"C-x n w"とやると，1つ前の画像の状態に戻る．そして，もう一度"C-x n w"とやると，最初の状態に戻る．なんということはないのであるが，便利である．


** COMMENT Emacsでpdfを読む (pdf-tools) (2019.07.17追記) :emacs:pdf:pdf_tools:org_mode:
   :PROPERTIES:
   :EXPORT_FILE_NAME: pdf-tools
   :EXPORT_DATE: 2019-07-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Templum_Veneris_et_Romae.jpg") (caption . "Templum Veneris et Romae"))
   :END:

   Emacsでpdf文書を読もうとするとdefaultではDocViewで読むことになるが，解像度がイマイチで動きもややモッサリとしていて使い勝手が悪かったため，サクッと止めて，skimを使っている．ただ，pdf-toolsというのがあって，こちらは割とスグレモノらしいとの噂は聞いていた．そこで，今回はこれを試してみることにした．

   {{{toc(2)}}}

*** PDF Tools
    - 参考１：[[https://github.com/politza/pdf-tools][pdf-tools]]　ご本家
    - 参考２：[[http://blog.livedoor.jp/hiroaki8270/archives/22871970.html][emacsをPDF Viewerにしよう]]
    - 参考３：[[https://ubutun.blogspot.com/2014/05/emacstexpdf.html][emacs内でTeX文書の作成からpdf閲覧まで行う]]
    - 参考４：[[https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools_on_macos/][pdf-tools on macos]]
    - 参考５：[[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][VIEW AND ANNOTATE PDFS IN EMACS WITH PDF-TOOLS]]
    - 参考６：[[http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/][MORE PDF-TOOLS TWEAKS]]
    - 参考７：[[http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/][EVEN MORE PDF-TOOLS TWEAKS]]
    - 参考８：[[https://github.com/politza/pdf-tools/issues/189][pdf-tools pretty much unusable with linum-mode enabled]]
    - 参考９：[[https://www.youtube.com/watch?v=LFO2UbzbZhA][Using Emacs 44 - An Org mode and PDF-tools workflow]]

    ご本家のイントロに書いてあるが，DocViewのようにghostscriptで予めrenderしておくのではなく，on demandでページを作成し，メモリーに貯めておく仕組みになっている．このrenderingは，popplerという名前の特別なライブラリーによって行われるが，これはepdfinfoと呼ばれるserver programの中で走っている．こいつの仕事はEmacsからの要求を連続して読んで適切な結果，すなわち，PDFのページのPNG imageを作成することである．

    　　「実際のところ，PDFファイルを表示するのはPDF toolsの仕事の一部に過ぎない．popplerは文書に関する全ての情報を提供でき，かつ，それを修飾もできるので，遥かにたくさんのことができる」とイントロの最後で大見得を切って，何ができるかを示す[[https://www.dailymotion.com/video/x2bc1is?forcedQuality%3Dhd720][動画]]を紹介している．

**** インストール
     OSXは公式にはサポートされていないが，コンパイルできたと報告されている，と書いてあり，実際，以下のように出来た．まず，homebrewでpopplerをインストールする．もし，まだ，automakeを入れていなければそれもhomebrewでインストールする．
     #+begin_src sh
       $ brew install poppler automake
     #+end_src
     ついで，pkg-configをexportでいじるようなことが書いてあるが，特にそれはせずともよかった．ただし，pdf-toolsのインストールの際にコンパイルエラーが出た．どういうわけか， *pdf-tools          20180428.1527* ではだめだったが，幸い， *pdf-tools          20181221.1913* が出たので，参考4：[[https://www.reddit.com/r/emacs/comments/6x9gtb/pdftools_on_macos/][pdf-tools on macos]]を頼りに，これにアップデートしたところ，あとは問題なくインストールできた．

**** 追記（2019年7月17日）
     その後何度かpdf-toolをコンパイルすることがあったが，「libffiがどこにあるか分からん」というようなエラーメッセージが出て，「pkg-configでなんとかせい」と怒られるようになった．つまり，ご本家に書いてある通りになったわけである．そこで，libffiのpkgconfigを探して，それをPKG_CONFIG_PATHに含めるようにした．
     #+begin_src sh
       $ mdfind -name pkgconfig | grep libffi
       /usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
       $ export PKG_CONFIG_PATH=/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig
       $ /Applications/Emacs.app/Contents/MacOS/Emacs --debug-init
     #+end_src
     これで下記のように設定していると，以下のようにpdf-toolが無事にコンパイルされる．
     #+begin_src lisp
       /Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/build/server/autobuild -i /Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/
       ---------------------------
       Installing packages
       ---------------------------
       Skipping package installation (already installed)

       ---------------------------
       Configuring and compiling
       ---------------------------
       ./configure -q --bindir=/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018/ && make -s

       Is case-sensitive searching enabled ?     yes
       Is modifying text annotations enabled ?   yes
       Is modifying markup annotations enabled ? yes


       ---------------------------
       Installing
       ---------------------------
       make -s install
       /usr/local/bin/gmkdir -p '/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018'
       /usr/local/bin/ginstall -c epdfinfo '/Users/taipapa/.emacs.d/elpa/pdf-tools-20190413.2018'
       make[1]: Nothing to be done for `install-data-am'.

       ===========================
       Build succeeded. :O)
       ===========================
     #+end_src

**** 設定
     例によって，use-packagを用いて以下のように，init.orgに書けばよい．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package pdf-tools
         :ensure t
         :config
         ;; initialise
         (pdf-tools-install)
         ;; PDF Tools does not work well together with linum-mode
         (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1)))
         ;; open pdfs scaled to fit page
         ;; (setq-default pdf-view-display-size 'fit-page)
         ;; automatically annotate highlights
         (setq pdf-annot-activate-created-annotations t)
         ;; use normal isearch
         (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
         ;; more fine-grained zooming
         (setq pdf-view-resize-factor 1.1)
         )
       ,#+end_src
     #+end_src
     以下に内容を説明する．
     - pdf-tools-installにより最初のときにepdfinfoがコンパイルされる．
     - 行番号を表示するとうまく動かない．私はnlinum-modeを使っているのでpdf-view-modeの際には止めておく．
     - ハイライトした部分には自動的に注釈を加える．
     - swiperはうまく動かないので，C-sを普通のisearchに戻す
     - ＋とーで拡大，縮小だが，これを10%ずつにする．

**** 使用法
     上記のインストールと設定を行えば，C-x C-fでも，drag & dropでも，Emacsのpdf toolsのpdf-view-modeでpdfが開くようになる．ここまでくれば，あとは色々なことができる．
***** highlight
      マウスで文章をなぞって選択（下の画像の白黒反転した部分）したあとに，C-c C-a h もしくは，画像で示したように，PDF Tools \rightarrow Add markup annotation \rightarrow highlightを選択すれば，

      #+attr_html: :width 100% :target _self
      [[./static/img/pdf-tools-2.jpg]]

      選択した部分がハイライトされ，下に新たなバッファが開いてそこに注釈が書けるようになる（下の画像参照）．書き終わったら，C-c C-cで注釈バッファが閉じる．なお，上に元からある黄色にハイライトされた部分は以前に選択してハイライトした部分である．

      #+attr_html: :width 100% :target _self
      [[./static/img/pdf-tools-3.jpg]]

***** Display Annotations
      複数箇所をハイライトして注釈をつけたあとに，全ての注釈を一度にリストにしてみることができる．C-c C-a l もしくは，PDF Tools \rightarrow Display Annotationsを選択すれば，下の画像のように，下に２つの新たなバッファが開く．真ん中のバッファに注釈のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動してブルーの枠で囲んで表示され，下のバッファに注釈の内容が表示される．qを押せば，2つのバッファは閉じる．

      #+attr_html: :width 100% :target _self
      [[./static/img/pdf-tools-4.jpg]]

***** Isearch document (C-s)
      pdf-toolsはswiperとはconflictするために，C-sは本来のisearch-forwardに戻して設定しておく必要がある（前述の設定の通り）．これで，C-sとやると，minibufferに打ち込んだ語が反転して表示され，C-sとやるごとに先へ移動していく．下の画像では，"MK2"という単語を打った時の状態を示している．

      #+attr_html: :width 100% :target _self
      [[./static/img/pdf-tools-C-s.jpg]]

***** Occur document
      PDF Tools \rightarrow Occur documentを選択すれば，minibufferに List lines matching PCRE: と表示される．そこに例えばMK2と打てば，下の画像のように，下に新たなバッファが開き，MK2のあるページとそこにある文章のリストが表示される．arrow keyでリスト内を移動し，スペースキーを押すと上のバッファでその注釈のところに移動する．qを押せば，下のバッファは閉じる．

      #+attr_html: :width 100% :target _self
      [[./static/img/pdf-tools-occur.jpg]]

*** org-pdfview
    org-modeからpdf文書へのリンクを開くのをサポートするパッケージ．
    - 参考１：[[https://github.com/markus1189/org-pdfview][org-pdfview]]
    - 参考２：[[https://emacs.stackexchange.com/questions/19686/how-to-use-pdf-tools-pdf-view-mode-in-emacs][How to use pdf-tools (pdf-view-mode) in emacs?]]
    - 参考３：[[https://emacs.stackexchange.com/questions/31895/configure-org-pdfview-and-pdf-tools-to-open-at-page][Configure org-pdfview and pdf-tools to open at page]]
**** インストールと設定
     例によって，use-packagを用いて以下のように，init.orgに書くだけ．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package org-pdfview
         :ensure t)
       ,#+end_src
     #+end_src

     例えば，Emacsのpdf-toolsを用いて，hogehoge.pdfを開いて読んでいるとする．そこで，C-c lとすると， *Stored: /Data/Hoge/Fuga/hogefuga.pdf* と今読んでいるpdfへのリンクが保存される．そして，それを保存しておきたいorg文書の適当な場所で，C-c C-lとすれば，そのリンクが貼り付けられる．以前の記事（[[../org-html-export-theme][Org-modeでhtml exportの際のthemeについて]]）で書いたような文献のまとめを作成しているときに，元文献とリンクさせておく際などに便利である．貼り付けたリンクをクリックすれば，元文献がEmacsのpdf-toolsによって開かれるようになる（画面が分割され，下に新たなバッファが開いてそこにpdfが表示される）．割と便利である．

*** PDF Toolsと他のアプリ（skim, Previewなど）との比較
    - 注釈の一覧表示，C−s， occurなどの機能は便利である．
    - skim, Previewなどでは，長方形ツールによりお好みの領域を選択してコピーすることができるし，このコピーした領域のみをpdfとして保存できるが，pdf-toolsではできない．
    - skim, Preview, Adobe Acrobat Readerのように，全画面でプレゼンテーションするモードはない．
    - Adobe Acrobat Readerのように，動画を動かすことは出来ない．
    - 上記２つの理由から，auctexを使用する際のpdf viewerとしてEmacsを使用していない．
    - 最近のpdfは，本文中に示された文献もしくはその番号をクリックすると，最後の文献リストの中の該当の論文のところに飛ぶようになっているものも多くなっているが，pdf-toolsはそれには対応していないようである．より正確にはリンク先が分からないようである．これは自力では解決できない．．．
    - Outline構造にも対応しており，検出するのだが，リンク先が分からないようである．これも自力では解決できない．．．

    以上のことより，学会発表用のスライドなどを作成している際は，skimなどの方がpdf viewerとして便利であるが，文献のまとめなどpdfを読み込む際には，pdf-toolsの方が向いているのではないかと考えている．


** COMMENT Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする :emacs:org_mode:autoexport:html:autorefresh:browser:
   :PROPERTIES:
   :EXPORT_FILE_NAME: auto_html_export
   :EXPORT_DATE: 2019-01-06
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/PlaceRoyaleBruxelles.jpg") (caption . "Place Royale Bruxelles"))
   :END:

   org-modeで文書を書いていてhtmlにexportする際は，C-e h oとするわけだが，段々とこれが面倒になってくることがある．そこで，ネットを探ってみると，やはり，なんでも載ってるredditにhtml exportを自動化する関数の記事があった．

   {{{toc(2)}}}

*** toggle-org-html-export-on-save
    - 情報元：[[https://www.reddit.com/r/emacs/comments/4golh1/how_to_auto_export_html_when_saving_in_orgmode/?sort=old][How to auto export html when saving in org-mode?]]
    例によって，下記のようにinit.orgに書き込めばよい．
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (defun toggle-org-html-export-on-save ()
        (interactive)
        (if (memq 'org-html-export-to-html after-save-hook)
            (progn
              (remove-hook 'after-save-hook 'org-html-export-to-html t)
              (message "Disabled org html export on save for current buffer..."))
          (add-hook 'after-save-hook 'org-html-export-to-html nil t)
          (message "Enabled org html export on save for current buffer...")))
      ,#+end_src
    #+end_src

    これで，toggle-org-html-export-on-saveで，htmlを自動で出力するかどうかを切り替え可能となる．しかし，これだけでは，org文書を保存するたびにブラウザーを手動でreloadしないといけなくなり，面倒である．自動でreloadしてくれるコマンドがあれば便利である．探してみると，これもネットに転がっていた．

*** directoryの内容が変更されると，自動でhtmlを再読込する．
    - 情報元：[[http://brettterpstra.com/2011/03/07/watch-for-file-changes-and-refresh-your-browser-automatically/][Watch for file changes and refresh your browser automatically]]
    - 上記サイトに有るrubyのスクリプトが使えそうなので，頂いた．
    - rubyのインストールについては，以下のようなサイトを参考
      - [[https://qiita.com/shinkuFencer/items/3679cfd966f6a61ccd1b][MacにHomeBrew,rbenv,bundlerをインストールする]]
      - [[https://qiita.com/prgseek/items/ff037cc6134ff9303c67][Ruby入門 01.導入（Macに最新版のRubyを入れる）]]
      - [[https://qiita.com/TAByasu/items/47c6cfbeeafad39eda07][Ruby初学者のRuby On Rails 環境構築【Mac】]]
    - しかし，上記サイトのスクリプトをそのまま使用するとと，reloadの際にページの先頭まで戻ってしまい不便！
    - 結局，上記サイトのFirefox用のスクリプトを参考に少し書き換えた下記のSafari用のスクリプトを使用すると，reloadの際に先頭まで戻らないので，こちらを使用することとした．
    #+begin_src sh
      #!/usr/bin/env ruby
      # watch.rb by Brett Terpstra, 2011 <http://brettterpstra.com>
      # with credit to Carlo Zottmann <https://github.com/carlo/haml-sass-file-watcher>

      trap("SIGINT") { exit }

      if ARGV.length < 2
         puts "Usage: #{$0} watch_folder keyword"
         puts "Example: #{$0} . mywebproject"
         exit
         end

         dev_extension = 'dev'
         filetypes = ['css','html','htm','php','rb','erb','less','js']
         watch_folder = ARGV[0]
         keyword = ARGV[1]
         puts "Watching #{watch_folder} and subfolders for changes in project files..."

         while true do
               files = []
               filetypes.each {|type|
      files += Dir.glob( File.join( watch_folder, "**", "*.#{type}" ) )
                              }
               new_hash = files.collect {|f| [ f, File.stat(f).mtime.to_i ] }
               hash ||= new_hash
               diff_hash = new_hash - hash

               unless diff_hash.empty?
               hash = new_hash

               diff_hash.each do |df|
                   puts "Detected change in #{df[0]}, refreshing"
               %x{osascript<<ENDGAME
                      tell app "Safari" to activate
                      tell app "System Events"
                           keystroke "r" using command down
                      end tell
      ENDGAME
                 }
               end
               end

               sleep 1
               end
    #+end_src
    - このスクリプトにwatch_safari.rbという名前をつけてパスが通っている/usr/local/binに保存し，chomod a+x watch_safari.rbとして実行権限を付けた．
    - *Usage: /usr/local/bin/watch_safari.rb watch_folder keyword*
    - パスを通しておけば，watch_safari.rb watch_folder keyword で大丈夫

*** 使用方法
    - /Data/Hoge/Fuga/hogefuga.orgを書いているとすると以下のようにそのディレクトリをみはらせておく．
    #+begin_src sh
      $ cd /Data/Hoge
      $ watch_safari.rb Hoge hogefuga.html
    #+end_src
    - org-modeでhogefuga.orgを書きはじめるときに，M-x toggle-org-html-export-on-save として保存するたびに自動的に新たなhtmlがexportされるようにする．
    - 最初だけは，C-e h oでhtmlをexportして，safariでhogefuga.htmlを開いておく．
    - 以降は，hogefuga.org文書を保存するたびに，現在見ている場所に戻った状態で最新のhtmlに更新されるようになる．便利である．

    以上はOSX上のSafariを使用している場合であるが，他のブラウザーでも少し変更するだけで同じことができるはずである．

** COMMENT Emacsの長い行を折り返して見やすくするが実際の行は変えない．adaptive-wrap --- Correct indentation for wrapped lines :emacs:org_mode:adaptive:wrap:indentation:
   :PROPERTIES:
   :EXPORT_FILE_NAME: adaptive-wrap
   :EXPORT_DATE: 2019-01-27
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Femme.jpg") (caption . "Femme piquée par un serpent"))
   :END:

   Emacsで長い行を書いていると，デフォルトの状態ではどんどん横に伸びていく．後で読み返そうと思うと横にスクロールしないといけなくて，非常に不便である．M-qでauro-fillをやればよいと言われそうだが，そうすると改行されてしまい，これまた不便である．そこで，なんとかならないかと探してみると，ちゃんとそういうモノがあったので，まとめておく．

   {{{toc(2)}}}

*** adaptive-wrap
    - 参照1：[[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]]　ご本家
    - 参照2：[[https://emacs.stackexchange.com/questions/14589/correct-indentation-for-wrapped-lines][Correct indentation for wrapped lines]]
    - 参照3：[[http://alainmathematics.blogspot.com/2013/07/emacs.html][Emacsの折り返しの挙動]]
    - 参照4：[[https://www.reddit.com/r/emacs/comments/1kw7ip/emacs_settings_loading_issue/][.emacs settings loading issue]]　

    長い行をワープロのようにword-wrapしてくれるパッケージである．Emacsのバッファ上では折り返されているように見えるが，実際は長い横1行のままである．

**** インストールと設定
     例によって，use-packagを用いて以下のように，init.orgに書けばよい．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package adaptive-wrap
         :ensure t
         :config
         (setq-default adaptive-wrap-extra-indent 1)
         (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
         (global-visual-line-mode +1)
         (add-hook 'org-mode-hook 'visual-line-mode)  ;; For org macros
         )
       ,#+end_src
     #+end_src

     なお，最後の行を入れておかないと，org-mode fileに

     #+begin_src lisp
       ,#+setupfile: /Sources/org-mode-folder/org-macros-master/org-macros.setup
     #+end_src

     を追加してマクロのパッケージを使用する場合（[[../html_export][Emacsのorg-modeで論文を書く（その5：htmlへのexportの際のフォントの色の変更，ハイライトなど）（12月19日追記）]]を参照のこと）に，adaptive-wrapが効かなくなる．

**** 実際の使用例
     adaptive-wrapをインストールしていない場合が上図，インストールして設定すれば下図のように見える．あくまで，Emacsの画面上でword-wrapしているように見えるだけで，実際のファイルではなが～い横１行のままの状態が維持されている．

     #+attr_html: :width 100% :target _self
     [[./static/img/Before_adaptive.jpg]]

     #+attr_html: :width 100% :target _self
     [[./static/img/After_adaptive.jpg]]

     これも一度使い始めると，無くてはならないモノとなるパッケージである．
** COMMENT How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table) :R:competing:risk:survival:curve:prodlim:censored:number:at:risk:
   :PROPERTIES:
   :EXPORT_FILE_NAME: prodlim
   :EXPORT_DATE: 2019-03-20
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Honolulu.jpg") (caption . "Honolulu"))
   :END:

   Rを用いて生存分析を行う際に， *Kaplan-Meier curve* に打ち切りのマークを入れたり，number at risk (at risk table)を併記する方法はすぐに見つかるが（[[http://rstudio-pubs-static.s3.amazonaws.com/5588_72eb65bfbe0a4cb7b655d2eee0751584.html][Drawing survival curves in R]], [[https://github.com/michaelway/ggkm][ggkm]], [[https://cran.r-project.org/web/packages/survminer/vignettes/Informative_Survival_Plots.html][Survival plots have never been so informative]]），competing riskのplotの場合はあまり情報がない．prodlimを使えば簡単なので，まとめておく．

   なお， *competing risk* については以下を参照．
   - [[https://www.nature.com/articles/1705727][Competing risk analysis using R: an easy guide for clinicians]]
   - [[https://www.nature.com/articles/bmt2009359][Regression modeling of competing risk using R: an in depth guide for clinicians]]
   - [[http://rstudio-pubs-static.s3.amazonaws.com/6600_e6703101eb7441ccb792000f4193b3b9.html][Competing risk analysisのデモ]]
   - [[https://rpubs.com/alecri/258589][A not so short review on survival analysis in R]]

   {{{toc(2)}}}

*** Prepare dataset "Melanoma" from "riskRegression" package
    #+BEGIN_SRC R :session *R* :exports both :results output
     library(riskRegression)
     data(Melanoma)
     head(Melanoma)
     summary(Melanoma)
    #+END_SRC


*** Competing risk analysis with cuminc of "cmprsk" package
    - cuminc is used to investigate whether a statistically significant difference is present between the groups (see "Tests:" below).
    #+BEGIN_SRC R :session *R* :exports both :results output
     library(cmprsk)
     Results_cmprsk <- with(Melanoma, cuminc(time, event, group = sex, cencode = "censored"))
     Results_cmprsk
    #+end_src

*** Competing risk analysis with prodlim
**** Days
     #+BEGIN_SRC R :session *R* :exports both :results output
      CompRskAnalysis <- prodlim(Hist(time, status, cens.code=0) ~ sex, data = Melanoma)
      summary(CompRskAnalysis)
     #+end_src
**** Years
     #+BEGIN_SRC R :session *R* :exports both :results output
      CompRskAnalysis2 <- prodlim(Hist(time/365.25, event, cens.code="censored") ~ sex, data = Melanoma)
      summary(CompRskAnalysis2)
     #+end_src

*** Plot survival curve of competing risk analysis with prodlim (default)
    #+BEGIN_SRC R :session *R* :results output graphics :file DefaultPlot.png :exports both
     # Default plot
     plot(CompRskAnalysis2)
    #+end_src

    # #+attr_html: :width 75% :target _self
    # [[/img/DefaultPlot.png]]

*** Plot survival curve of competing risk analysis with prodlim (modified)
    - adjust legend
    - add tick-mark at right censoring times
    - rotate labels of y-axis
    - add statistical significance from results of cuminc described above
    - etc

    #+BEGIN_SRC R :session *R* :results output graphics :file ModifiedPlot.png :exports both
     # Plot with modification
     plot(CompRskAnalysis2,
          cause = "death.malignant.melanoma",
          xlim=c(0, 15),
          legend.x="topleft", # position of legend
          legend.cex=1.5, # font size of legend
          marktime = TRUE, # the curves are tick-marked at right censoring times by invoking the function markTime.
          legend.title="",
          atrisk.title="",
          axis2.at=seq(0,1,0.2),
          background.horizontal=seq(0,1,0.2),
          axis2.las=2,                            # rotate labels of y-axis
          percent = FALSE,
          confint = FALSE,
          atrisk.col="black",
          xlab="Time to primary outcome (years)"
          )
     text(6.5,0.85,adj=0,paste("Gray's test: p-value=", round(Results_cmprsk$Tests[1,2],3)), cex = 1.2)
    #+end_src

    # #+attr_html: :width 75% :target _self
    # [[/img/ModifiedPlot.png]]

    今回は，学会発表用のグラフ作成に必要であった．忘れないうちにまとめておく．以前は，at risk tableを別途作成してグラフに合体させるという荒業を行っていたが，これで非常に楽になった．
** COMMENT How to automatically embed R plot into html exported by org-mode with org-babel :org_babel:emacs:export:R:plot:graph:org_mode:
   :PROPERTIES:
   :EXPORT_FILE_NAME: ExportRplot
   :EXPORT_DATE: 2019-03-25
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Wikiki-2.jpg") (caption . "Wikiki"))
   :END:

   本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成しているが，前回の記事（[[../prodlim][How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)]]）を書いている際に，Rでplotしたgraphを記事の中に自動ではめ込むよう設定するのに苦労したので，これも忘れないうちにまとめておく．まず，今回はorg-babelの設定について書き，次回にHugoでの設定をまとめる．

   {{{toc(2)}}}

*** Org-babel setup
    org-babelとは，う～～～ん，なにもの？　ものすごく端折って言うと，Code blockを評価して結果を表示するorg-modeの拡張，といったところだろうか．．．実例を見たほうが早いと思う．今回，org-babelによる R code の評価について書こうとして，ふと，ブログを見直してみると，なんとorg-babelの設定をまとめた記事を投稿してない .....(^^;;;

    ということで，org-babelの設定を改めて記しておく．例によって，init.orgに以下のように書き込んでおけばよい．

    *Ref:* [[http://doc.norang.ca/org-mode.html#OrgBabel][Org-babel Setup]]　ここからコピペ  (^^;;;
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (org-babel-do-load-languages
       (quote org-babel-load-languages)
       (quote ((emacs-lisp . t)
               (dot . t)
               (ditaa . t)
               (R . t)
               (python . t)
               (ruby . t)
               (gnuplot . t)
               (clojure . t)
               (shell . t)
               (ledger . t)
               (org . t)
               (plantuml . t)
               (latex . t))))
      ,#+end_src
    #+end_src

*** How to use org-babel
    以下のサイトを参考にした．

    *Ref 1:* Official manual [[https://orgmode.org/manual/Working-with-Source-Code.html#Working-with-Source-Code][14 Working with Source Code]]

    *Ref 2:* [[http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html][org-modeのコードブロック(Babel)の使い方]]   \\
    このサイトが分かりやすい．特に， *ヘッダー引数* と *言語毎の書き方* の *R* の項は必読．

*** Org-babel evaluation of R code block

    [[http://blogs.neuwirth.priv.at/software/2012/03/28/r-and-emacs-with-org-mode/][R and Emacs with org mode]]   \\
    org-babelによるR codeの評価とhtmlへのgraph plotの自動埋め込みは，このサイトが分かりやすい．ここに有る”Using org mode with R”というサンプルを参考に，以下のようなorgファイルを/Data/hogehoge/hogefugaに作成する．

    #+begin_src lisp
      ,#+TITLE: R-test
      ,#+AUTHOR: taipapa

      ,* Test

        ,#+begin_src R :session *R* :results output graphics :file test1.png :exports both
        boxplot(islands)
        ,#+end_src

        ,#+begin_src R :session *R* :results output graphics :file test2.png :exports both
        library("ggplot2")
        ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
        geom_point()
        ,#+END_SRC
    #+end_src

    C-c C-e h oとしてhtmlにexportすると，以下のように簡単にグラフがプロットされたhtmlが作成される．いちいちできたグラフ画像を挿入する必要はなく，自動で挿入される．便利である．

    #+attr_html: :width 100% :target _self
    [[./static/img/R-test-html.png]]

    　　注意点としては，C-c C-e hoとしたときに， *R starting project directory？* と尋ねられるはずで，defaultの値として　/Data/hogehoge/hogefuga/ が既に表示されているはずである．これをそのままリターンすれば同じdirectoryにグラフが作成されて良きにはからってくれる．この際に異なるdirectoryを選んだりするとうまくいかないので注意．

    また，C-c C-e loとすると，自動でR plotの挿入されたpdfが作成されオープンする．

    これで準備が整った．次回はHugoで作成したブログにR plotを自動で差し込む方法をまとめる予定である．



** COMMENT How to automatically embed R plot in blog created by Hugo via ox-hugo :R:plot:embed:Hugo:ox:hugo:blog:emacs:org_mode:
   :PROPERTIES:
   :EXPORT_FILE_NAME: EmbedRplotInBlog
   :EXPORT_DATE: 2019-03-25
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Hotel_de_Ville_de_Bruxelles.jpg") (caption . "Hôtel de Ville de Bruxelles"))
   :END:

   （承前）前回（[[../ExportRplot][How to automatically embed R plot into html exported by org-mode with org-babel]]）はorg-babelを設定して，Rで描いたグラフを自動でhtmlやpdfに挿入するところまでまとめた．繰り返しになるが，本サイトは，ox-hugoで書いてHugo用のMarkdownをexportすることにより作成している．前々回の記事（[[../prodlim][How to plot survival curve of competing risk analysis with censoring mark and number at risk (at risk table)]]）を書いている際に，Rでplotしたgraphをブログ記事の中に自動ではめ込むよう設定するのに苦労した．前回でorg-babelの設定は終わっているので，今回は，Hugoやox-hugoの設定に関してまとめ，ブログ記事へのR plotの自動挿入ができるようにする．

   {{{toc(2)}}}

*** References
    - [[https://gohugo.io][HUGO]]  \\
      Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. Hugoのsetupについてはネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;
    - [[https://ox-hugo.scripter.co][ox-hugo]]  \\
      ox-hugo is an Org exporter backend that exports Org to Hugo-compatible Markdown (Blackfriday) and also generates the front-matter (in TOML or YAML format).

      要するに，Markdownを直接書くのではなく，org-modeで書いてしまおうというもので，私のようなorg-mode maniacにピッタリのパッケージである．ox-hugoのsetupについてもネットに山のように情報があるので，そちらを参照（手抜き）(^^;;;

*** Configuration of Hugo section
    *Ref:* [[https://sfus.net/blog/2018/12/org-mode-with-ox-hugo/][Org-mode で記事を書いて Hugo 向け markdown を ox-hugo で自動生成する話]]

    そもそも，まず，Hugoのディレクトリ・ファイルの構成を把握する必要があった．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.org に書き込んでおり，directory/file構成は以下の通りである．上記参考サイトと同じく，/hogehoge/hogeblog/hogefugablog/，つまり，Hugo の content/ と同じ階層に hogefugablog.org ファイルを置いている．なお，themeは [[https://themes.gohugo.io/academic/][*academic*]] を使用している．また，ox-hugoのdirectoryは今回の作業により新たに作成されたものであり，当初はなかった．
    #+begin_src shell export both
      $ tree -L 2
      .
      ├── config.toml
      ├── content
      │   ├── home
      │   ├── post
      │   └── privacy.md
      ├── data
      │   └── 6F
      ├── hogefugablog.org
      ├── layouts
      │   ├── js
      │   ├── partials
      │   └── search
      ├── static
      │   ├── css
      │   ├── files
      │   ├── img
      │   └── ox-hugo
      └── themes
          └── academic
    #+end_src

*** Setup of HUGO_SECTION & HUGO_BASE_DIR in ox-hugo
    *Ref:* [[https://ox-hugo.scripter.co/doc/usage/#before-you-export][Before you export]]

    本サイトでは，HUGO_SECTIONは特に設定しておらず，C-h v org-hugo-default-section-directoryの値は default valueであるpostsになっている．

    また，hogefugablog.orgの文頭に以下のように記述して，HUGO_BASE_DIRを設定している．
    #+begin_src lisp
      ,#+HUGO_BASE_DIR: ./
    #+end_src

    ここまでで，ox-hugoからのexportの準備が整った．

*** References to files outside the static directory
    *Ref:* [[https://ox-hugo.scripter.co/doc/image-links/#references-to-files-outside-the-static-directory][References to files outside the static directory]]

    Hugoのstatic directory以外の場所にあるファイルへのreferenceを作成し，かつ，そのファイルが *org-hugo-external-file-extensions-allowed-for-copying* のリストに挙げられている拡張子を有している場合は，そのファイルはox-hugoによりstatic directoryにコピーされる．ちなみに，C-h v org-hugo-external-file-extensions-allowed-for-copyingとすると，以下のような値を得る．

    #+begin_src lisp
      org-hugo-external-file-extensions-allowed-for-copying is a variable defined in ‘ox-hugo.el’.
      Its value is
      ("jpg" "jpeg" "tiff" "png" "svg" "gif" "pdf" "odt" "doc" "ppt" "xls" "docx" "pptx" "xlsx")
    #+end_src

    [[https://ox-hugo.scripter.co/doc/image-links/#source-path-does-not-contain-static][Source path does not contain =/static/=]]    \\
    このサイトの *Table 2: Where files get copied to if their path does not contain static/* が本サイトに当てはまる．これが分かるまでに時間を要した．本サイトは，/hogehoge/hogeblog/hogefugablog/hogefugablog.orgに書き込んでいる．この環境で，postの中にorg-babelを使ってRのcode blockを評価すると，Rにより作成されるplot（foo.png）は，
    #+begin_src lisp
         /hogehoge/hogeblog/hogefugablog/foo.png
    #+end_src
    に作成される．そして，このファイルは，最終的に，
    #+begin_src lisp
         /hogehoge/hogeblog/hogefugablog/static/ox-hugo/foo.png
    #+end_src
    にコピーされ，ブログ記事に挿入されるということになる．なお，ox-hugo directoryはこの時に自動的に作成される．

    つまり，前回の記事（[[../ExportRplot][How to automatically embed R plot into html exported by org-mode with org-babel]]）のように，R plotのcode blockを含むorg ファイルを作成し，それをexportして，R plotが自動で組み込まれるようなら，そのorg-babelのcode blockをそのままox-hugoで書いたブログ記事のorg ファイルにコピペすれば，あとはox-hugoが良きにはからってくれるはずである．

    実は，できたグラフの画像を自分でいろいろな場所にコピーしては失敗していた．Hugoのroot directory，つまり，/hogehoge/hogeblog/hogefugablog/でRを動かして，できたグラフ画像に対して何もせずに放置しておけば，ox-hugoが全て面倒を見てくれるということに気がつかず，余計なことをしていたわけである．

    まとめとして，前回記事のcode blockをこの記事に挿入して試してみる．

    #+begin_src lisp
        ,#+begin_src R :session *R* :results output graphics :file test1.png :exports both
        boxplot(islands)
        ,#+end_src
    #+end_src

    #+begin_src R :session *R* :results output graphics :file test1.png :exports results
      boxplot(islands)
    #+end_src

    #+begin_src lisp
        ,#+begin_src R :session *R* :results output graphics :file test2.png :exports both
        library("ggplot2")
        ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
        geom_point()
        ,#+END_SRC
    #+end_src

    #+begin_src R :session *R* :results output graphics :file test2.png :exports results
      library("ggplot2")
      ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
          geom_point()
    #+END_SRC

    ちゃんとグラフが自動的に挿入されている．

    org-babelとRの組み合わせは強力で，ox-hugoも便利と改めて痛感．

** COMMENT How to add different segment, annotation and color to each facet in ggplot :R:ggplot2:facet:segment:annotation:colour:patchwork:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Different-segment-to-each-facet-in-ggplot
   :EXPORT_DATE: 2019-04-06
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/CasaRomana.jpg") (caption . "Casa Romana dell'Ara Coeli"))
   :END:

   今回もRネタである．論文の図を作成していて，ggplot2のfacetを使用して作成した図の中のfacet毎に異なる有意差を示す群を線分で結んで，その上にasteriskを色を変えてつけようとしたところ，結構苦労したので忘れないうちにまとめておく．annotate()というのもあるが，これだとすべてのfacetに同じ内容が入ってしまう．今回の目的であるfacetによって異なる内容の注釈を入れるためには，geom_segmentやgeom_textを使う．

   {{{toc(2)}}}

*** References
    - [[http://mukkujohn.hatenablog.com/entry/2016/09/29/212901][ggplot2を使って、注釈を入れる-2]]
    - [[https://buzzrbeeline.blog/2018/11/06/adding-different-annotation-to-each-facet-in-ggplot/][Adding different annotation to each facet in ggplot]]
    - [[https://stackoverflow.com/questions/24578352/add-a-segment-only-to-one-facet-using-ggplot2][Add a segment only to one facet using ggplot2]]

*** Data Preparation
    まず，架空のデータを作成する．Drug1とDrug2を投与して１日後と７日後の物質Xの血中濃度変化を対照，つまり投与前と比較するという実験において，Drug1では差がなく，Drug2では差があるという結果にする．

    #+begin_src R :session *R* :results output code  :exports both
      set.seed(100)
      data.df1 <- data.frame(Control = rnorm(20, mean = 5, sd = 1),
                             Day1 = rnorm(20, mean = 5, sd = 1.5),
                             Day7 = rnorm(20, mean = 5, sd = 2))
      library(reshape)
      data_melt.df1 <- melt(data.df1)

      data.df2 <- data.frame(Control = rnorm(20, mean = 5, sd = 1.8),
                             Day1 = rnorm(20, mean = 10, sd = 5),
                             Day7 = rnorm(20, mean = 20, sd = 7))
      data_melt.df2 <- melt(data.df2)

      data_melt.df <- cbind.data.frame(data_melt.df1, data_melt.df2$value)
      colnames(data_melt.df) <- c("Day","Drug1","Drug2") # chage column name of dataframe
      head(data_melt.df)
    #+end_src

    これで解析用のデータが出来上がった．一応，差を確認してみる．

*** COMMENT Boxplot with beeswarm
    まず，Drug1とDrug2の物質Xの濃度変化についてboxplotを描く．ついでにbeeswarmを用いて個々のデータも重ねてプロットしておく．

    #+begin_src R :session *R* :results output graphics :file Drug1.png :exports both
      library(beeswarm)
      # Drug1
      boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = "", main = "Drug1", xaxt="n", cex.axis=1.5, ylab="Relative value", cex.lab = 1.5, pch=16, cex = 1.5)
      axis(1,at=c(1,2,3),formatC(c("Control", "Day1", "Day7")), cex.axis=1.5)
      beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c("black", "green","blue"))
    #+end_src
    どうみても，コントロールとDrug1の間には差がない．そのように作ったので当たり前である．

    #+begin_src R :session *R* :results output graphics :file Drug2.png :exports both
      # Drug2
      boxplot(data_melt.df$Drug2 ~ data_melt.df$Day, xlab = "", main = "Drug2", xaxt="n", cex.axis=1.5, ylab="Relative value", cex.lab = 1.5, pch=16, cex = 1.5)
      axis(1,at=c(1,2,3),formatC(c("Control", "Day1", "Day7")), cex.axis=1.5)
      beeswarm(data_melt.df$Drug2 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c("black", "green","blue"))
    #+end_src
    ひと目見て，コントロールとDrug2の間に差があるようにみえる．これまた，そのように作ったので当たり前である．

*** Tukey multiple comparison
    Tukeyの多重比較試験を行う．２つの方法で確認しておく．
**** TukeyHSD
     #+begin_src R :session *R* :results output code :exports both
        TukeyHSD(aov(data_melt.df$Drug1~data_melt.df$Day))
     #+end_src

     #+begin_src R :session *R* :results output code :exports both
        TukeyHSD(aov(data_melt.df$Drug2~data_melt.df$Day))
     #+end_src

**** [[http://aoki2.si.gunma-u.ac.jp/R/tukey.html][テューキーの方法による多重比較]]

     #+begin_src R :session *R* :results output code :exports both
        source("http://aoki2.si.gunma-u.ac.jp/R/src/tukey.R", encoding="euc-jp")
        tukey(data_melt.df$Drug1, data_melt.df$Day)
     #+end_src

     #+begin_src R :session *R* :results output code :exports both
        tukey(data_melt.df$Drug2, data_melt.df$Day)
     #+end_src

     以上で，Drug1では物質Xの濃度はコントロールと差がないこと，Drug2ではコントロール，Day1，Day7の間に有意差が認められることが確認された．そのようにデータを作ったので当たり前である．．．(^^;;;;;

*** Boxplot by ggplot2
    ようやくここから上記のデータを使って，ggplot2でboxplotを描いてみる．まずはmeltを用いてwide formatからlong formatへのデータの整形を行う．

    #+begin_src R :session *R* :results output code :exports both
      DataM <- melt(data_melt.df, id = "Day")
      head(DataM)
    #+end_src

**** Calculate mean and SE
     平均とSEも求めておく．

     #+begin_src R :session *R* :results output code :exports both
      library(plyr)
      DataM_summary <- ddply(DataM, .(variable, Day), summarise, N = length(value), mean = mean(value), sd = sd(value), se = sd(value)/sqrt(length(value)))
      DataM_summary
     #+end_src
     ついで，ggplot2のggplotでboxplotを描く．個々のデータをgeom_jitter，あるいは，geom_pointを用いて重ねてプロットしておく．どちらの方法でも下記のように同じ図になる．

**** geom_jitter

     #+begin_src R :session *R* :results output graphics :file Boxplot1.png :exports both
      library(ggplot2)
      TestBoxPlot <- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) +
          geom_boxplot(alpha = 0.40) +
          facet_wrap(~variable, ncol = 3, scales="fixed") +
          coord_cartesian(ylim = c(0,38)) +
          theme_bw() +
          theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
          theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
          xlab("") +
          ylab("Relative value to control") +
          theme(legend.position = "none") +   # delete legend
          geom_jitter(shape=16, size=2, position=position_jitter(0.1))  # plot individual point with jittering

      TestBoxPlot
     #+end_src

**** geom_point

     #+begin_src R :session *R* :results output graphics :file Boxplot2.png :exports both
      TestBoxPlot2 <- ggplot(DataM, aes(x = Day, y = value, colour = Day, fill = Day)) +
          geom_boxplot(alpha = 0.40) +
          facet_wrap(~variable, ncol = 3, scales="fixed") +
          coord_cartesian(ylim = c(0,38)) +
          theme_bw() +
          theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
          theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
          xlab("") +
          ylab("Relative value to control") +
          theme(legend.position = "none") +   # delete legend
          geom_point(aes(fill = Day), size = 2, shape = 16, position = position_jitterdodge())  # plot individual point with jittering

      TestBoxPlot2
     #+end_src

**** Add mean bar
     *Ref:* [[https://stackoverflow.com/questions/45617136/combine-ggplot-facet-wrap-with-geom-segment-to-draw-mean-line-in-scatterplot][combine ggplot facet_wrap with geom_segment to draw mean line in scatterplot]]   \\
     平均値のバーを書き込む．これはgeom_segmentを使うが，すべてのfacetに書き込むので，単純である．

     #+begin_src R :session *R* :results output graphics :file Boxplot1mean.png :exports both
       TestBoxPlot3 <- TestBoxPlot +
           geom_segment(data = DataM_summary, aes(x=as.numeric(as.factor(Day)) - 0.5,
                                                  xend=as.numeric(as.factor(Day)) + 0.5,
                                                  yend=mean,
                                                  y=mean,
                                                  colour=Day,
                                                  alpha=0.7),
                        size = 1.5, linetype = 1)

       TestBoxPlot3
     #+end_src

*** Add segment and asterisk to Drug2 facet of boxplot

**** Dataframe for annotation
     ここからが本番である．上記で作成したグラフを見ながら，どこからどこに線を引けばよいのか，どこにasteriskを置けばよいのか大体の見当をつけたうえで，注釈用のデータフレームを別途作成する．これは手作業でやらざるを得ない．できたグラフを見て微調整をしていく．

     #+begin_src R :session *R* :results output code :exports both
       anno <- data.frame(
           x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9),
           y=c(10.5, 37, 37, 10.5, 26, 26, 23.5, 34, 34),
           xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9),
           yend=c(37, 37, 32.5, 26, 26, 23.5, 34, 34, 32.5),
           variable="Drug2",
           xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA),
           ystar = c(27, 38, 35, NA, NA, NA, NA, NA, NA),
           lab = c("**", "***", "***", NA, NA, NA, NA, NA, NA),
           ast.color = c("red", "blue", "green", NA, NA, NA, NA, NA, NA))

       anno
     #+end_src

     x, y, xend, yendは各線分の始点と終点で，xstar, ystarは注釈，今回はasteriskの位置を示す．labはasteriskそのものを指示し，colorはasteriskの色を指定している．

**** Add segment with geom_segment and asterisk with geom_text (black)
     geom_segmentで線を引いて，geom_textでasteriskをつける．まずは黒色でやってみる． *inherit.aes=FALSE* をgeom_text()とgeom_segment()の内部に追加してggplot()内のfill=Dayを無視させる．

     #+begin_src R :session *R* :results output graphics :file Boxplot1mean_anno.png :exports both
       TestBoxPlot3 +
           geom_text(data = anno, aes(x = xstar, y = ystar, label = lab, colour = NULL), size = 7, family = "Times New Roman", inherit.aes = FALSE) +
           geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
     #+end_src

**** Add segment with geom_segment and asterisk with geom_text (color)
     asteriskに色をつける．データフレーム annoに書き込んだ色データを明示的に指示して利用する．

     #+begin_src R :session *R* :results output graphics :file Boxplot1mean_anno_color.png :exports both
      TestBoxPlot3 +
          geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = "Times New Roman", inherit.aes = FALSE) +
          geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
     #+end_src

     問題はここである．どうしても， *colour = anno$ast.color* とデータフレームと変数を明示的に指示しないと色がおかしくなるか，エラーになってしまう．もっとうまくggplotにデータを読ませる方法をどなたかご教示いただければ幸甚である．

*** Barplot by ggplot2
    次にbarplotを描いて同じことをやってみる．エラーバーは慣例通りSEにする．

**** Barplot
     #+begin_src R :session *R* :results output graphics :file Barplot1.png :exports both
       TestBarPlot <- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) +
           geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) +
           geom_bar(position=position_dodge(), stat="identity", alpha=1/2, width=0.5) +
           facet_wrap(~variable, scales = "fixed", ncol=3) +
           coord_cartesian(ylim = c(0,30)) +
           theme_bw() +
           theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
           theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
           xlab("") +
           ylab("Relative value to control") +
           theme(legend.position = "none")   # delete legend

       TestBarPlot
     #+end_src

*** Add segment and asterisk to Drug2 facet of barplot
**** Dataframe for annotation
     #+begin_src R :session *R* :results output code :exports both
       anno2 <- data.frame(
           x=c(0.9, 0.9, 3.1, 1.1, 1.1, 1.9, 2.1, 2.1, 2.9),
           y=c(6.5, 29, 29, 6.5, 17, 17, 12.5, 25, 25),
           xend=c(0.9, 3.1, 3.1, 1.1, 1.9, 1.9, 2.1, 2.9, 2.9),
           yend=c(29, 29, 22.5, 17, 17, 12.5, 25, 25, 22.5),
           variable="Drug2",
           xstar = c(1.5, 2, 2.5, NA, NA, NA, NA, NA, NA),
           ystar = c(17.5, 29.5, 25.5, NA, NA, NA, NA, NA, NA),
           lab = c("**", "***", "***", NA, NA, NA, NA, NA, NA),
           ast.color = c("red", "blue", "green", NA, NA, NA, NA, NA, NA))

       anno2
     #+end_src
**** Add segment with geom_segment and asterisk with geom_text (color)
     #+begin_src R :session *R* :results output graphics :file Barplot1_anno_color.png :exports both
       TestBarPlot +
           geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = "Times New Roman", inherit.aes = FALSE) +
           geom_segment(data = anno2, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)
     #+end_src

     barplotでも全く同様のグラフを作成することができた．

     なお，通常のグラフをpdfで出力して，それをOmniGraffleなどのお絵かきソフトに持っていき，手作業で線やasteriskを描いて，再びpdfで出力する，という荒業も使えないことはない．しかし，ggplotの中で完結できるので，余分で面倒な手作業が不要になった．まぁ，上記の作業も面倒ではあるが，再現性があり，他の人にも渡せるというところが重要であると思う．

*** Combine boxplot and barplot into the same graphic
    *Ref1:* [[https://github.com/thomasp85/patchwork][patchwork]]   \\
    *Ref2:* [[https://qiita.com/nozma/items/4512623bea296ccb74ba][patchworkを使って複数のggplotを組み合わせる]]

    patchworkを使えば，上記の２種のグラフを簡単に一つの図にできる．比較しやすいようにbarplotのy軸のスケールをboxplotと同じに修正しておく．

    #+begin_src R :session *R* :results output graphics :file Combined.png :width 640 :exports both
      # Boxplot
      P1 <- TestBoxPlot3 +
          geom_text(data = anno, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = "Times New Roman", inherit.aes = FALSE) +
          geom_segment(data = anno, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)

      # Barplot
      TestBarPlot2 <- ggplot(DataM_summary, aes(x = Day, y = mean, colour = Day, fill=Day)) +
          geom_errorbar(aes(ymin = mean, ymax = mean + se), width = 0.2) +
          geom_bar(position=position_dodge(), stat="identity", alpha=1/2, width=0.5) +
          facet_wrap(~variable, scales = "fixed", ncol=3) +
          coord_cartesian(ylim = c(0,38)) +
          theme_bw() +
          theme(axis.text.x  = element_text(size=14), axis.text.y = element_text(size=14), strip.text.x = element_text(size =16)) +
          theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=16), plot.title=element_text(size=0)) +
          xlab("") +
          ylab("Relative value to control") +
          theme(legend.position = "none")   # delete legend
      P2 <- TestBarPlot2 +
          geom_text(data = anno2, aes(x = xstar, y = ystar, label = lab), colour = anno$ast.color, size = 7, family = "Times New Roman", inherit.aes = FALSE) +
          geom_segment(data = anno2, aes(x = x,  y = y, xend=xend, yend=yend), inherit.aes = FALSE)

      library(patchwork)
      P1 + P2
    #+end_src

    このpatchworkは足し算だけで２つの図の合体ができてしまうすぐれもの．ちゃんと位置合わせなども自動的にしてくれる．素晴らしい．

    しかし，こうして並べて比べてみると，barplotが如何に情報量の少ないグラフであるかが一目瞭然である．

** COMMENT peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法） :emacs:dired:peep_dired:org_mode:image:link:
   :PROPERTIES:
   :EXPORT_FILE_NAME: peep
   :EXPORT_DATE: 2019-04-19
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Ikaruga.jpg") (caption . "Ikaruga-cho"))
   :END:

   最近Rネタばかり書いていたが，今回は久しぶりのEmacsネタである．org-modeで文書を書いているときに画像を貼り付けたいことがある．そのためには画像ファイルの名前とパスが必要となる．要するに毎回画像ファイルのパスを調べて/hoge/fuga/hogefuga/hugo.jpgというようなことをタイプしなければならず面倒である．そこで，peep-diredの出番である．peep-diredとは，diredでファイルにカーソルを持っていくと中身が見える，すなわち，画像ファイルなら画像が見え，テキストファイルならテキストが読めるというminor modeである．これが画像リンクの貼り付けに便利なのでまとめておく．

   {{{toc(2)}}}

*** References
    - [[https://github.com/asok/peep-dired][peep-dired]]
    - [[http://pragmaticemacs.com/emacs/quickly-preview-images-and-other-files-with-peep-dired/][QUICKLY PREVIEW IMAGES AND OTHER FILES WITH PEEP-DIRED]]

*** peep-diredのインストールと設定
    例によって，use-packagを用いて以下のように，init.orgに書けばよい．
    #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package peep-dired
         :ensure t
         :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
         :bind (:map dired-mode-map
                     ("P" . peep-dired)))
       ,#+end_src
    #+end_src
    設定は上記参照サイトのパクリで，diredで"P"を打つとpeep-dired modeとなってdiredのリストの画像ファイルが見られるようになり，もう一度"P"と打つとpeep-dired modeは終了する．　

*** peep-diredの使い方
    File viewerとしてだけなら，どうということはないのだが，org-modeと組み合わせて使うと便利さが増す．たとえば，下図のように画像をおいているdirectoryをdiredで開いて"P"を打ってpeep-dired modeに入り，画像を確かめながら文書に挿入する画像を決める．上段のdiredのバッファにおいてIMG_1996.jpgにカーソルがあり，下段のバッファにその画像が表示されている．画像が決まったらその画像ファイルにカーソルが合っていることを確認した上で，C-c lを打つ．これで，画像へのリンクがフルパスも含めてコピーされる．

    #+attr_html: :width 100% :target _self
    [[file:static/img/peep-dired_ex1.jpeg][file:/Data/MyBlog/Taipapablog/static/img/peep-dired_ex1.jpeg]]

    ついで，org-mode文書内の画像を挿入したいところにカーソルを持って行き，そこで，C-c C-lとすると，下部に新たなorg-insert-linkのウィンドウが開いて下図のように先程コピーしたリンクが一番上にフルパスでハイライトされて表示される．ここでリターンすればフルパスのリンクがorg-mode文書内に挿入される．

    #+attr_html: :width 100% :target _self
    [[file:static/img/peep-dired_ex3.jpg][file:/Data/MyBlog/Taipapablog/static/img/peep-dired_ex3.jpg]]

    文章で説明すると複雑だが，実際にやってみると実に簡単で有用である．このやり方に気がつくまでは，いちいちフルパスを手入力したり，コピペしたりしていたが，その必要がなくなり非常に楽になった．

*** bjm/ivy-dired-recent-dirs -  最近開けたdirectoryを一覧表示する方法（おまけ）
    diredでdirectoryを開けるときにその名前を入力する必要があるが，これが結構面倒である．特に深いところにあるファイルはフルパスを書くのが大変である．どうせ，同じファイルに何回も行くことが多いので，「最近訪れたdirectoryの履歴」みたいなのが一覧表示されると嬉しい．まさに，こんなのぞみにピッタリのものが，bjm/ivy-dired-recent-dirsである．これについては，以前に書いたのでそちらを参考にしていただきたい．というか，以前に書いた事自体を忘れていたので，自分への戒めとして記録しておく．．．(^^;;;

    *Ref:* [[https://taipapamotohus.com/post/swiper_migemo/#最近開いたディレクトリを開く][最近開いたディレクトリを開く]]

** COMMENT Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew :Mojave:upgrade:emacs:26_2:homebrew:
   :PROPERTIES:
   :EXPORT_FILE_NAME: mojave
   :EXPORT_DATE: 2019-04-29
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Vancouver.jpg") (caption . "Vancouver"))
   :END:

   世はゴールデンウィークまっただ中である．完全な10連休ではないが，それなりに長い休みとなるので，この機会に，ようやく Sierraから *Mojave* にupgradeすることにした．ついでにEmacsも26.1から 26.2にupgradeした．今回は，このupgradeの際に遭遇したトラブルについてまとめる．

   {{{toc(2)}}}

*** Upgrade to Mojave from Sierra
    *Ref:* [[https://support.apple.com/ja-jp/HT201475][macOS Mojave にアップグレードする方法]]

    結論から言うと，拍子抜けするぐらい簡単であった．AppStoreで適当にクリックするとすぐにMojaveがダウンロードされて，インストーラーが起動した．これをクリックしてインストールを始めると，此処から先は完全自動状態で，ひたすら待った．というか，違うことをしていた．何回も再起動していたようだが，実際には1時間ぐらいで終了したような気がする．手間いらずであった．R, Rstudio, ImageJ, Emacs, LaTeXが動いて画像編集，動画編集ができれば，とりあえず文句はないので，まずそのあたりをチェックしてみると，R, Rstudio, ImageJ, 画像編集，動画編集は問題なく動いた．EmacsとLaTeXについては以下に述べる．

*** Upgrade to Xcode 10.2.1
    早速brewでemacsをupgradeしようとしたのだが，xcodeが古いと叱られたので，まず，xcodeをApp Storeからupgradeした．そして *brew install* すると以下のようなエラーが出る．

    #+begin_src sh
      $ brew install hogehoge
      .........
      xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
    #+end_src

    これは，「[[https://gotohayato.com/content/487][macOS を Mojave にあげた後に Homebrew を使うとエラーが出る問題]]」にあるようにcommand line developer toolsを再インストールすれば直る．同サイトに詳細が記載されている．

    #+begin_src sh
      xcode-select --install
    #+end_src

    さぁ，これでようやくと思って，再度 *brew install* すると，またもエラーである.....(ToT)

    #+begin_src sh
      $ brew install hogehoge
      ..........
      Error: parent directory is world writable but not sticky
      Please report this bug:
      https://docs.brew.sh/Troubleshooting
    #+end_src

    調べてみるとpermissionの問題で，tmp directoryの状態を調べれば良いことがわかった．

    *Ref 1:* [[https://qiita.com/analsky/items/20755a3ba10119e9a4b6][brew で `Error: parent directory is world writable but not sticky`]] \\
    *Ref 2:* [[https://stackoverflow.com/questions/42893700/error-parent-directory-is-world-writable-but-not-sticky][Error: parent directory is world writable but not sticky]] \\
    上記サイトの記載に従って，ls -ld /tmpを行うと以下のようになる．
    #+begin_src sh
      $ ls -ld /tmp
      lrwxr-xr-x@ 1 root  wheel  11  4 27 18:45 /tmp@ -> private/tmp
    #+end_src
    これは，tmp directoryはprivate/tmpを使用しているということであり，以下のようにしてpermissionを付与する．
    #+begin_src sh
      $ sudo chmod +t /private/tmp
    #+end_src
    私の場合はこれでbrewが働くようになった．これらの操作は，今後のmajor upgradeの際にはまた必要になりそうなので，ここにまとめておく．

*** Upgrade to Emacs 26.2 from 26.1
    ようやくEmacsのupgradeである．mojaveにupgradeした直後にemacs26.1を起動してみるとキーが効かなかったような気がするが，26.2にupgradeするので，気にせず先に進んだ.....(^^;;;　以前の記事（[[../emacs_install][Emacsのインストール]]）に書いたようにhomebrewでemacs-macを入れればよいのだが，念の為に単なるupgradeは避けて，Emacs 26.1をuninstallし，~/.emac.dも退避させてから，インストールし直すことにした．[[https://github.com/railwaycat/homebrew-emacsmacport][Emacs Mac Port]]の最終更新はわずか2週間前でありいろいろな問題が解決されていると期待してのupgradeである．

    #+begin_src sh
      $ cd
      $ mv .emacs.d .emac.d.old  # change name of old .emacs.d
      $ brew tap railwaycat/emacsmacport
      $ brew uninstall emacs-mac  # uninstall old emacs-mac
      $ brew install emacs-mac --with-modern-icon --with-imagemagick  # install new emacs-mac
      $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
    #+end_src

    これで，\\
    */usr/local/Cellar/emacs-mac/emacs-26.1-z-mac-7.1 (4,009 files, 114.6MB)* \\
    から \\
    */usr/local/Cellar/emacs-mac/emacs-26.2-z-mac-7.6 (4,010 files, 114.8MB)*  \\
    へのupgradeが終了した．

    あとは，以前に書いた以下の記事に従ってセットアップした．\\
    [[../prelude_install][Emacsの設定（その1）Preludeの導入（2018年10月9日修正）]] \\
    [[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]  \\
    [[../japanese_setup][Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など]]

*** LaTeX
    これについては，以前の記事「[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]]」で書いたとおり *MacTeX 2018* のままである．正確に言うと，mojaveにupgradeする直前に以下のようにして最新版にアップデートしておいた．

    #+begin_src sh
      $ sudo tlmgr update --self --all
    #+end_src
    400個ぐらいのパッケージのアップデートに30-40分を要した．

    *ヒラギノフォントの埋め込み* についても上述の記事に書いたように，既に，[[https://github.com/munepi/bibunsho7-patch/releases][bibunsho7-patch]]を適応済みなので，問題ないと考えた．

    mojaveにupgradeしてから，latexmkによるcompileやorg-modeからのlatex exportなどを試してみたが，pdfの生成に特に問題なく，また，pdfへのヒラギノフォントの埋め込みも問題なくできていた．

**** pdfにフォントが埋め込まれているかどうかを確認する方法
     - *Ref:*[[https://qiita.com/Aqua_ix/items/d277fb7e4667d6616c1e][ PDFのフォント埋め込み]]
     - 以下のようにhomebrewでpopplerをインストールすれば，その中の *pdffonts* というコマンドを使って確認することができる．このpopplerは以前の記事（[[../pdf-tools][Emacsでpdfを読む (pdf-tools)]]）で既にインストールしているが，もう一度書いておく．
       #+begin_src sh
         $ brew install poppler
       #+end_src
     - たとえば，latexで生成したhogehoge.pdfのフォントの埋め込みを調べるためには，pdffontsを以下のように使う． *emb* の項目で埋め込みの有無がわかる．

       #+begin_src sh
           $ pdffonts hogehoge.pdf
           name                                 type              encoding         emb sub
           ------------------------------------ ----------------- ---------------- --- ---
           KQKHHV+LMSans10-Bold                 Type 1C           Custom           yes yes
           JQHYHW+LMRoman17-Regular             Type 1C           Custom           yes yes
           FENZQQ+HiraMinProN-W3-Identity-H     CID Type 0C       Identity-H       yes yes
           ZHPQAJ+LMRoman12-Regular             Type 1C           Custom           yes yes
           BMLTDB+HiraKakuProN-W6-Identity-H    CID Type 0C       Identity-H       yes yes
           NOWECW+LMRoman12-Regular             Type 1C           Custom           yes yes
           SIHLPZ+LMRoman8-Regular              Type 1C           Custom           yes yes
       #+end_src
     - 確かに，すべてのフォントは *emb = yes* になっており，埋め込まれているのが確認できた．

*** 感想
    ネットでは，いろいろ問題ありとの情報が多く様子見をしていたのだが，待ってる間に色々と解決した部分も多いのか，ほとんど大きなトラブルもなくアップグレードできた．なお， *Time Machine* によるバックアップも問題なくできている．「案ずるより産むが易し」であった．

** COMMENT How to add horizontal scrollbar for codeblock in academic theme of hugo :hugo:blog:codeblock:horizontal:scrollbar:academic:theme:
   :PROPERTIES:
   :EXPORT_FILE_NAME: horizontal_scrollbar
   :EXPORT_DATE: 2019-05-02
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Roma.jpg") (caption . "Roma Termini"))
   :END:
   いやー，めでたい．ついに，TexLive 2019がreleaseされた．それにしても，TeXってこんなに人気があったのだ．世の中がみんなお祝いしてる，凄いぞ，TeX．．．．と思ったら，全然違った．．．これでまた年齢計算が複雑になる．システム担当者は大変である．まぁ，西暦を使用すればいいだけの話ではあるが．．．．．というわけで，今回はTeXの話，ではなくて，ブログのCodeBlockの長い行がwrapされるのは２行と間違うことがあるので，scrollbarをつけましょうという話である．

   #+toc: headlines 2

*** Wrap or scroll?
    以前の記事でも触れたように（[[../embedrplotinblog][How to automatically embed R plot in blog created by Hugo via ox-hugo]]），このサイトは，ox-hugoというorg-modeのパッケージで書いて，Hugoという静的サイトジェネレーター（themeはacademic）で作っているのだが，code blockの長い行がwrapされて，つまり，折り畳まれて表示されるようになっていた．Rのcodeで示してみると，こんな感じである．

    #+attr_html: :width 100% :target _self
    [[/Data/MyBlog/Taipapablog/static/img/wrap.jpg]]

    これは３行のcodeであるが，はっきり言って見にくい．．．．．　

    行番号を入れるという方法もあるが，それよりもscrollbarをつけて横にスライドさせる方が分かりやすい．つまり，こうである．

    #+BEGIN_SRC R
boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = "", main = "Drug1", xaxt="n", cex.axis=1.5, ylab="Relative value", cex.lab = 1.5, pch=16, cex = 1.5)
axis(1,at=c(1,2,3),formatC(c("Control", "Day1", "Day7")), cex.axis=1.5)
beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c("black", "green","blue"))
    #+END_SRC

    これなら，確実に１行を把握できる．

    ここ（[[http://seankross.com/notes/css-for-code/][Fix How Your Blog’s Code is Displayed on Mobile]]）を見るともっと分かりやすく書いてある．

*** How to add horizontal scrollbar
**** Ref
     -  [[http://seankross.com/notes/css-for-code/][Fix How Your Blog’s Code is Displayed on Mobile]]
     -  [[https://github.com/gcushen/hugo-academic/issues/467][Prevent wrapping in code blocks #467]]
     -  [[https://github.com/ShanEllis/ShanEllis.github.io/pull/1/commits/35c0f3064d3ec2d7b6e35790448994bdb1233f79][added horizontal scrolling for code #1]]

     上記のサイトを参考に以下のようにscrollbarをセットアップすることにした．

**** academic theme version
     まず，Hugoのthemeであるacademic のversionを以下のように調べてみると，
     #+begin_src bash :exports both :results output
      less themes/academic/data/academic.toml
     #+end_src

     ふ，古い．latest versionは，4.2である．2018年8月に導入してから8ヶ月ほどで2.4から4.2までreleaseされており，開発スピードが並ではない．それは喜ぶべきことなのだが，問題は，私が全くそれについて行けてないことである．（ToT)

     最新版ではdirectory構造もかなり変わっている．horizontal scrollbarをつけるのを機会に全部をupgradeしようとしてみたが，なかなかうまくいかない．[[https://sourcethemes.com/academic/docs/customization/#customize-style-css][Customize style (CSS)]] に書いてあるとおりにしようとしても，古いversionでは相当するdirectoryそのものが存在しない．

**** cssの変更
     というわけで，academic themeのupgradeはサクッと諦めて姑息策を取ることにした． [[https://github.com/gcushen/hugo-academic/issues/467][Prevent wrapping in code blocks #467]] を参考にして，\\
     */Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css*
     を \\
     */Data/hogeblog/fugablog/static/css/academic_scrollbar.css*  \\
     として保存した．変更箇所は以下の通り
     #+begin_src sh
       --- /Data/hogeblog/fugablog/themes/academic/layouts/partials/css/academic.css    2018-08-16 00:55:10.000000000 +0900
       +++ /Data/hogeblog/fugablog/static/css/academic_scrollbar.css    2019-05-02 00:05:10.000000000 +0900
       @@ -178,9 +178,16 @@
       border-color: rgb(248, 248, 248);
        }

       +/* pre code { */
       +/*   white-space: pre; /\* Override Bootstrap to preserve line breaks in code. *\/ */
       +/*   overflow-x: auto; */
       +/* } */
       +
       +/* See http://seankross.com/notes/css-for-code/  */
        pre code {
       -  white-space: pre; /* Override Bootstrap to preserve line breaks in code. */
       -  overflow-x: auto;
       +    overflow: auto;
       +    word-wrap: normal;
       +    white-space: pre;
        }

        hr {
     #+end_src

     これで，ox-hugoでの

     #+attr_html: :width 100% :target _self
     [[/Data/MyBlog/Taipapablog/static/img/wrap2.jpg]]

     は，以下のように表示されるようになる．
     #+begin_src R
       boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = "", main = "Drug1", xaxt="n", cex.axis=1.5, ylab="Relative value", cex.lab = 1.5, pch=16, cex = 1.5)
       axis(1,at=c(1,2,3),formatC(c("Control", "Day1", "Day7")), cex.axis=1.5)
       beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c("black", "green","blue"))
     #+end_src

     -nをつけて行番号をつけると

     #+attr_html: :width 100% :target _self
     [[/Data/MyBlog/Taipapablog/static/img/wrap3.jpg]]

     こうなる．

     #+begin_src R -n
       boxplot(data_melt.df$Drug1 ~ data_melt.df$Day, xlab = "", main = "Drug1", xaxt="n", cex.axis=1.5, ylab="Relative value", cex.lab = 1.5, pch=16, cex = 1.5)
       axis(1,at=c(1,2,3),formatC(c("Control", "Day1", "Day7")), cex.axis=1.5)
       beeswarm(data_melt.df$Drug1 ~ data_melt.df$Day, pch = 16, ad = TRUE, cex=1.5, col=c("black", "green","blue"))
     #+end_src

     \\
     なんとか，これで，code blockにhorizontal scrollbarをつけることができた．次に時間ができたときにacademic themeをupgradeして追いつこう．．．いつになることやら．．．(^^;;;;;;

** COMMENT Deadgrep                                  :deadgrep:ripgrep:search:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: deadgrep
   :EXPORT_DATE: 2019-06-01
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Orvieto.jpg") (caption . "Orvieto"))
   :END:
   次世代grepで最速と言われる[[https://github.com/BurntSushi/ripgrep][ripgrep]]をバックエンドとするEmacs用検索ツールであるdeadgrepをインストールしてみた．

   #+toc: headlines 2

*** Ref
    - [[https://github.com/Wilfred/deadgrep][deadgrep: use ripgrep from Emacs]] ご本家
    - [[https://solist.work/blog/posts/deadgrep/][複雑になった時使うツール]] とても勉強になるサイト，こちらを読めば本サイトは読まなくても良いような．．．

*** Install
    まず，バックエンドのripgrepをインストールする．brewを使えば簡単である．
    #+begin_src sh
      $ brew install ripgrep
    #+end_src
    ついで，以下のようにinit.orgに書き込んでMRLPAからdeadgrep.elをインストールする．f5にキーバインドしておく．
    #+begin_src lisp
        ,#+begin_src emacs-lisp
        (use-package deadgrep
          :ensure t
          :config
          (global-set-key (kbd "<f5>") #'deadgrep)
          )
        ,#+end_src
    #+end_src

*** How to use
    使用方法の詳細はご本家に書いてあるが，f5を叩いて，検索キーワードを入れるだけである．下の画像は，このブログのあるdirectoryで，「検索」をキーワードとしてdeadgrepを走らせたところである．defaultでdirectory内を再帰的に検索する．キーワードは青くハイライトされており，左端の数字はその文書での行番号である． *o* を叩くと下のバッファに該当箇所にカーソルがある状態でその文書が開く． *C-c C-k* で検索を止めることができる．また，swiperとの併用も可能である．

    #+attr_html: :width 100% :target _self
    [[./static/img/deadgrep.jpg]]

    一番上のSearch termの行のchangeにカーソルを持っていってReturnすると，Minibufferで検索語を変更できる．その下にあるSearch type, Case, Context, Directory, Filesも同様に条件を変更できる．とくに，Directoryは適切なものを選ばないと巨大なデータを検索することになってしまうので注意が必要である．

    個人的には，swiperでほぼ事足りているのだが，大きなプロジェクト内の複数のファイルを一気に検索する必要がある人には非常に有益なツールだと思う．
**** 2019年6月2日追記
     上記のように自分にはあまり役に立たないようなことを書いたが，早速，deadgrepが役に立ったので追記しておく．hyperestraierで全文検索をしようとして，H@estfxpdftohtml というコマンドを使おうとしたのだが，うまくいかず，その原因を探るために，/usr/local/で，H@estfxpdftohtmlをSearch termとして，deadgrepを下の画像のように走らせてみたところ，下側のバッファにあるように，一発で原因が判明してしまった．要するに，xpdfが必要ということであった．なるほど，こういう風に使うのかと納得した．

     #+attr_html: :width 100% :target _self
     [[./static/img/deadgrep2.jpg]]

     なお，全文検索については，いずれ別の機会にまとめてみたい．


** COMMENT Gleanings (display-line-numbers, whitespace-mode, accessibility of iTerm2, etc) :line_number:whitespace:thunderbird:emacs:iTerm2:accessibility:
   :PROPERTIES:
   :EXPORT_FILE_NAME: gleanings
   :EXPORT_DATE: 2019-06-02
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Galata.jpg") (caption . "Galata Kulesi"))
   :END:
   前回久しぶりに記事を投稿したが，しばらく更新していない間に，いくつか細かな環境修正が必要であったので，落ち穂拾いとしてまとめておく．

   #+toc: headlines 2

*** display-line-numbers
    emacs 26から入った行番号を表示させる機能．
    - Ref 1: [[http://garaemon.hatenadiary.jp/entry/2018/07/08/181003][emacs 26で入ったdisplay-line-numbersを利用する]]
    - Ref 2: [[https://www.emacswiki.org/emacs/LineNumbers][LineNumbers]]
    - Ref 3: [[https://blog.piyo.tech/posts/2019-01-24-emacs-display-line-numbers/][Emacs26のdisplay-line-numbers-modeがlinum-modeよりちょっと速くて快適になりそう]]
    - Ref 4: [[https://qiita.com/mamo3gr/items/1c6862cba09d5876e52c][Emacsの行番号表示にモヤモヤした話]]
    設定は，いつものように，init.orgに下記のとおりに書き込めばよい．
    #+begin_src lisp
        ,#+begin_src emacs-lisp
        (global-display-line-numbers-mode)
        ,#+end_src
    #+end_src
    これでもう行番号を表示していても重くならない．表示領域を確保するための設定も不要である．実際の表示状況は下の画像のとおりである．nlinum-modeの設定は削除した．

    #+attr_html: :width 100% :target _self
    [[./static/img/display-line-number.jpg]]

    行番号に必要な表示領域は自動的に確保される．3桁，4桁の番号になるに連れて表示領域が広くなるのが上の画像からわかるであろう．また，adaptive-wrapによって折り畳まれている行は行番号が空白になって1行であることがわかるようになっている（383行目）．

*** Whitespace-mode
    かなり前から，Emacsの長い行の途中でフォントの色が赤くなってしまうようになった．つまり，下の画像のようになってしまう．短い行でもフォントが赤くなってるな．．．

    #+attr_html: :width 100% :target _self
    [[./static/img/swiper-2a.jpg]]

    何が原因かよくわからなかったのだが，redditの[[https://www.reddit.com/r/emacs/comments/butal1/how_do_i_stop_emacs_from_coloring_text_beyond_80/][How do I stop Emacs from coloring text beyond 80 columns differently]]を読んで，もしかしたら，whitespace-modeのせいかもしれないと思ってやってみたらドンピシャであった．M-x customizeとして，Whitespace Styleをサーチして，(Face) Lines, only overlong partのチェックを外せばよい．下の画像の矢印で示した部分である．

    #+attr_html: :width 100% :target _self
    [[./static/img/whitespace.jpg]]

    下に，設定変更後の上の画像と同じところを示すが，行の途中でフォントの色が変わらなくなっている．これで目がおかしくなりそうな画面からようやく離れることができた．😀

    #+attr_html: :width 100% :target _self
    [[./static/img/swiper-3.jpg]]

*** iTerm2の権限の変更（mojaveで必要）
    以前の記事（[[../auto_html_export][Emacsのorg-modeを保存すると自動的にhtmlにexportされブラウザーが更新されるようにする]]）の中で，directoryの内容が変更されると，自動でhtmlを再読込するwatch_safari.rbというスクリプトを紹介した．しかし，mojaveにupgradeしたあとは
    #+begin_src sh
      85:141: execution error: System Eventsでエラーが起きました: osascriptにはキー操作の送信は許可されません。 (1002)
    #+end_src

    というエラーを吐いて，自動更新しなくなってしまった．調べてみると，mojaveでユーザーのデータや個人情報を保護するための機能が強化された結果であった．
    - Ref 1: [[https://minatokobe.com/wp/os-x/macos-mojave/post-51360.html][macOS Mojaveでのアプリケーションの権限、アクセシビリティとフルディスクアクセスの違いは何か？]]
    - Ref 2: [[https://www.softantenna.com/wp/tips/macos-mojave-iterm2-full-disk-access/][macOS MojaveでiTerm2を利用する場合にフルディスクアクセスを許可する方法]]
    - Ref 3: [[https://rcmdnk.com/blog/2019/04/29/computer-mac/][MacのターミナルやiTermでOperation not permittedが出る場合の対処法]]
    - Ref 4: [[https://gitlab.com/gnachman/iterm2/wikis/Whyfulldiskaccess][Why Full Disk Access is Useful for iTerm2]]

    AccessibilityとFull Disk Accessのいずれか，あるいは，両方を変更すればよい．試してみた結果，iTerm2にFull Disk Accessを許可しても自動更新しないが，Accessiblityで「アプリケーションにコンピュータの制御を許可」すれば自動更新することがわかった．「システム環境設定」>「セキュリティ＆プライバシー」の「プライバシー」タブに行き，下の画像にあるように，iTerm2にcheckを入れればよい．

    #+attr_html: :width 80% :target _self
    [[./static/img/Privacy.jpg]]

    crontabが働き，~/Library/Safari folderへのアクセスができるように，iTerm2にFull Disk Accessも与えておいた．方法は，上記とほぼ同じで，「プライバシー」タブに行き，フルディスクアクセスを選択し，iTerm2にcheckを入れればよい．

*** iTerm2のColor Schemeが効かない
    いつのまにかiTerm2のcolor schemeを変えても反映されなくなってしまった．ネットを探ると，同じようなことで悩んでいる人が結構いるようで，すぐに解決法が見つかった．
    - Ref: [[https://gitlab.com/gnachman/iterm2/issues/4844][Profile colors won't change]]

    上記のサイトによれば，terminal windowがprofileと連絡を失ってしまったことが原因とのことで，iTerm2の Session > Edit Sessionで下の画像のようにdialogue boxがpop upするので，そこで，好きなcolor scheme (下の画像ではJapanesque) を選択し，右下のUse Selected Profileをクリックすればよい．

    #+attr_html: :width 80% :target _self
    [[./static/img/iTerm2.jpg]]

    これでリンクが再確立される．


** COMMENT How to add annotation (ex. KEGG orthology) box to a plot in ggplot2 :R:ggplot2:annotation:box:vertical:line:plot:
   :PROPERTIES:
   :EXPORT_FILE_NAME: annotation
   :EXPORT_DATE: 2019-06-30
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Vaticano.jpg") (caption . "Città del Vaticano"))
   :END:

   またまたRネタである．グラフに注釈をつけたくなることがあるが，なかなか見映えのする注釈をつけるのは難しい．最近，それなりの方法を見つけたので，まとめておく．例として，代謝経路の変化を縦型の折れ線グラフで描きKEGG orthologyによって分類したグラフを作成してみる．うーむ，自分で書いていてなんだが，マニアックなネタである．．．(^^;;;

   ま，備忘録として書いておこう．

   {{{toc(2)}}}

*** References
    Kyoto Encyclopedia of Genes and Genomes (KEGG) に関しては以下のサイトを参照
    - [[https://www.genome.jp/kegg/docs/plea.html][KEGG]]
    - [[https://www.kegg.jp/kegg-bin/get_htext?br08902.keg][KEGG BRITE Hierarchy Files]]
    - [[https://www.genome.jp/kegg-bin/show_pathway?map01100][KEGG Metabolic pathways]]
    - [[https://www.genome.jp/kegg/ko.html][KO (KEGG ORTHOLOGY) Database]]

*** Data Preparation
    例によって，まず，架空のデータを作成する．Drugを投与して1，5，12，24時間後の代謝物の血中濃度変化を対照，つまり偽薬を投与した群と比較するという実験の結果を適当に作成する．代謝経路はKEGGのデータベースから適当に名前を充てがっておく．

    #+begin_src R :session *R* :results output code  :exports both
      set.seed(100)
      data.df1 <- data.frame(
        Pathwayname = c("Cysteine and methionine metabolism","Histidine metabolism","Glucosinolate biosynthesis","Novobiocin biosynthesis","Phenylpropanoid biosynthesis","Pentose phosphate pathway","Cell cycle - yeast","Mineral absorption","Protein digestion and absorption","Type II diabetes mellitus","Insulin secretion","Carbon fixation in photosynthetic organisms","Photosynthesis","Peptidoglycan biosynthesis","Synthesis and degradation of ketone bodies","Cyanoamino acid metabolism","D-Glutamine and D-glutamate metabolism","Taurine and hypotaurine metabolism","GABAergic synapse","Retrograde endocannabinoid signaling","Synaptic vesicle cycle","Pyrimidine metabolism","HIF-1 signaling pathway","Morphine addiction","Nicotine addiction","Aminoacyl-tRNA biosynthesis"),
        C = rnorm(26, mean = 0, sd = 0.1),   # C: control
        OneH = rnorm(26, mean = 2, sd = 2),
        FiveH = rnorm(26, mean = 2, sd = 5),
        TwH = rnorm(26, mean = 4, sd = 10),
        TFH = rnorm(26, mean = 5, sd = 20))

      data.df1
      levels(data.df1$Pathwayname)
    #+end_src

    Pathwaynameのlevelsを変更する．KEGG orthologyに合わせた配置にするためである．

    #+begin_src R :session *R* :results output code  :exports both
      data.df1$Pathwayname <- factor(data.df1$Pathwayname,
                                     levels = c("Aminoacyl-tRNA biosynthesis", "Nicotine addiction", "Morphine addiction", "HIF-1 signaling pathway", "Pyrimidine metabolism", "Synaptic vesicle cycle", "Retrograde endocannabinoid signaling", "GABAergic synapse", "Taurine and hypotaurine metabolism", "D-Glutamine and D-glutamate metabolism", "Cyanoamino acid metabolism", "Synthesis and degradation of ketone bodies", "Peptidoglycan biosynthesis", "Photosynthesis", "Carbon fixation in photosynthetic organisms", "Insulin secretion", "Type II diabetes mellitus", "Protein digestion and absorption", "Mineral absorption", "Cell cycle - yeast", "Pentose phosphate pathway", "Phenylpropanoid biosynthesis", "Novobiocin biosynthesis", "Glucosinolate biosynthesis", "Histidine metabolism", "Cysteine and methionine metabolism"),
                                     labels = c("Aminoacyl-tRNA biosynthesis", "Nicotine addiction", "Morphine addiction", "HIF-1 signaling pathway", "Pyrimidine metabolism", "Synaptic vesicle cycle", "Retrograde endocannabinoid signaling", "GABAergic synapse", "Taurine and hypotaurine metabolism", "D-Glutamine and D-glutamate metabolism", "Cyanoamino acid metabolism", "Synthesis and degradation of ketone bodies", "Peptidoglycan biosynthesis", "Photosynthesis", "Carbon fixation in photosynthetic organisms", "Insulin secretion", "Type II diabetes mellitus", "Protein digestion and absorption", "Mineral absorption", "Cell cycle - yeast", "Pentose phosphate pathway", "Phenylpropanoid biosynthesis", "Novobiocin biosynthesis", "Glucosinolate biosynthesis", "Histidine metabolism", "Cysteine and methionine metabolism"))
      levels(data.df1$Pathwayname)
    #+end_src

    データの整形を行う．reshapeのmeltでlong formatのデータにする．

    #+begin_src R :session *R* :results output code  :exports both
      library(reshape)
      data_melt.df1 <- melt(data.df1)
      head(data_melt.df1)
    #+end_src


    これで解析用のデータが出来上がった．

*** Plot vertical line graph
    いきなり，Pathwaynameをy軸に設定すると全てのポイントが連結されたグラフになってしまうので，まず，Pathwaynameをｘ軸に設定して折れ線グラフを描く．


    #+begin_src R :session *R* :results output graphics :res 180 :width 600  :file horizontal_lineplot.png :exports both
      library(ggplot2)
      LinePlot_H <- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) +
        theme_bw()
      LinePlot_H + geom_line(aes(colour = variable))
    #+end_src

*** Flip the plot so that horizontal becomes vertical with coord_flip
    勿論，これではダメなので，coord_flipでｘ軸とｙ軸をひっくり返す．また，色もかえる．さらに，x軸とy軸のタイトルを除き，凡例を中に入れて，そのタイトルを除く．

    #+begin_src R :session *R* :results output graphics :res 180 :width 1200 :height 800 :file vertical_lineplot.png :exports both
      LinePlot_V <- ggplot(data_melt.df1, aes(x = Pathwayname, y = value, group = variable)) +
        theme_bw()
      P1 <- LinePlot_V +
        geom_line(aes(colour = variable)) +
        scale_color_manual(values = c("black", "green", "orange", "blue", "red")) +
        xlab("") +
        ylab("") +
        coord_flip()

      P1 + theme(legend.position = c(0.9, 0.7)) + theme(legend.title = element_blank())
    #+end_src

*** Add annotation box by geom_rect
    とりあえずは，それなりの縦向き折れ線グラフが出来上がった．このグラフに注釈ボックスをつけてみる．試行錯誤の結果，ggplot2の場合，geom_rectを使用すれば良いことがわかった．

**** References
     - [[https://stackoverflow.com/questions/24536651/what-is-a-good-way-to-fit-text-inside-a-plotting-area-with-ggplot2-using-a-pre-d][What is a good way to fit text inside a plotting area with ggplot2 using a pre-defined width for the text?]]
     - [[http://sape.inf.usi.ch/quick-reference/ggplot2/geom_rect][ggplot2 Quick Reference: geom_rect]]
     - [[https://stackoverflow.com/questions/26741703/adding-multiple-shadows-rectangles-to-ggplot2-graph][Adding multiple shadows/rectangles to ggplot2 graph]]

     まず，注釈ボックスとするrectangle用のデータを用意する．

     #+begin_src R :session *R* :results output code  :exports code
      rect1 <- data.frame (xmin=24.55, xmax=26.75, ymin=40, ymax=90, text = data_melt.df1[1,1])
      rect2 <- data.frame (xmin=21.55, xmax=24.45, ymin=40, ymax=90, text = data_melt.df1[2,1])
      rect3 <- data.frame (xmin=20.55, xmax=21.45, ymin=40, ymax=90, text = data_melt.df1[3,1])
      rect4 <- data.frame (xmin=19.55, xmax=20.45, ymin=40, ymax=90, text = data_melt.df1[4,1])
      rect5 <- data.frame (xmin=17.55, xmax=19.45, ymin=40, ymax=90, text = data_melt.df1[5,1])
      rect6 <- data.frame (xmin=16.55, xmax=17.45, ymin=40, ymax=90, text = data_melt.df1[6,1])
      rect7 <- data.frame (xmin=15.55, xmax=16.45, ymin=40, ymax=90, text = data_melt.df1[7,1])
      rect8 <- data.frame (xmin=13.55, xmax=15.45, ymin=40, ymax=90, text = data_melt.df1[8,1])
      rect9 <- data.frame (xmin=12.55, xmax=13.45, ymin=40, ymax=90, text = data_melt.df1[9,1])
      rect10 <- data.frame (xmin=11.55, xmax=12.45, ymin=40, ymax=90, text = data_melt.df1[10,1])
      rect11 <- data.frame (xmin=8.55, xmax=11.45, ymin=40, ymax=90, text = data_melt.df1[11,1])
      rect12 <- data.frame (xmin=5.55, xmax=8.45, ymin=40, ymax=90, text = data_melt.df1[12,1])
      rect13 <- data.frame (xmin=4.55, xmax=5.45, ymin=40, ymax=90, text = data_melt.df1[13,1])
      rect14 <- data.frame (xmin=3.55, xmax=4.45, ymin=40, ymax=90, text = data_melt.df1[14,1])
      rect15 <- data.frame (xmin=1.55, xmax=3.45, ymin=40, ymax=90, text = data_melt.df1[15,1])
      rect16 <- data.frame (xmin=0, xmax=1.45, ymin=40, ymax=90, text = data_melt.df1[16,1])
     #+end_src

**** Remove right margin with expand=c(0,0)
     ボックスの右端を90にしたので，グラフがはみ出さないように，scale_y_continuousを用いて，expand=c(0,0)で余白を省き，limitsで軸の範囲を指定する．凡例の位置も変え，背景を透明にして，フォントサイズも小さくする．

     #+begin_src R :session *R* :results output graphics :res 180 :width 1200 :height 800 :file vertical_lineplot2.png :exports both
       P2 <- P1 + theme(legend.position = c(0.0825, 0.43)) +
         theme(legend.title = element_blank(),
               legend.text =  element_text(size = 6),
               legend.background = element_blank())       # legendの背景を透明にする
       P2

       P3 <- P2 +
         geom_rect(data=rect1, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect2, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect4, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect5, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect6, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect7, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect8, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect9, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect10, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect11, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect12, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect13, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE) +
         geom_rect(data=rect16, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey90", alpha=1, color="black", lwd = 0.25, inherit.aes = FALSE)

       P3 + scale_y_continuous(expand=c(0,0), limits = c(-30, 90))
     #+end_src

**** customize tick marks with limits and breaks of scale_y_continuous
     [[http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels][ggplot2 axis ticks : A guide to customize tick marks and labels]]

     ticksを指定する．範囲も指定する．scale_y_continuousのlimitsとbreaksは別々に書くとお互いを上書きするので，同じ () の中で書くようにすると両方ともが効くようになる．\\
     [[https://stackoverflow.com/questions/38313204/r-ggplot2-scale-y-continuous-combining-breaks-limits/38313454#38313454][R ggplot2 scale_y_continuous : Combining breaks & limits]]

     #+begin_src R :session *R* :results output graphics :res 180 :width 1200 :height 800 :file vertical_lineplot3.png :exports both
      P4 <- P3 +
        scale_y_continuous(expand=c(0,0), limits = c(-30, 90), breaks=c(-20, 0, 20, 40))
      P4
     #+end_src

     これで空白の注釈用ボックスができた．

**** Add KEGG orthology (KO)
     [[http://sape.inf.usi.ch/quick-reference/ggplot2/geom_rect][ggplot2 Quick Reference: geom_rect]]

     上記サイトを参考にして，空白のボックスに該当するKOを記入する．

     #+begin_src R :session *R* :results output graphics :res 180 :width 1200 :height 800 :file vertical_lineplot4.png :exports both
      P4 +
        geom_text(data = rect1, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Amino acid metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect2, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Biosynthesis of \n other secondary metabolites"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect3, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Carbohydrate metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect4, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Cell growth and death"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect5, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Digestive system"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect6, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Endocrine and metabolic disease"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect7, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Endocrine system"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect8, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Energy metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect9, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Glycan biosynthesis and metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect10, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Lipid metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect11, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Metabolism of other amino acids"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect12, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Nervous system"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect13, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Nucleotide metabolism"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect14, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Signal transduction"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect15, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Substance dependence"), inherit.aes = FALSE, size = 2.4) +
        geom_text(data = rect16, aes(x=xmin+(xmax-xmin)/2, y=ymin+(ymax-ymin)/2, label= "Translation"), inherit.aes = FALSE, size = 2.4)
     #+end_src

     ようやく完成である．この方法は他のタイプのグラフにも使えると思う．もっと簡単な方法があれば良いのだが．．．

** COMMENT Symbol Overlay (Highlight symbols at cursor point with keymap-enabled overlays in Emacs) :emacs:highlight:symbol:replace:
   :PROPERTIES:
   :EXPORT_FILE_NAME: symbol-overlay
   :EXPORT_DATE: 2019-07-10
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/HagiaSophia.jpg") (caption . "Hagia Sophia"))
   :END:

   今回は（も？），redditで拾ってきたネタ（[[https://www.reddit.com/r/emacs/comments/c95cm5/how_to_highlight_occurences_at_cursor_point_in/][How to highlight occurences at cursor point in Emacs]]）．カーソルの位置にあるシンボル（単語と思えば良い）をバッファ内ですべてハイライトしてくれるEmacsのパッケージを訊いているのだが，いくつか答えがあって，一番便利そうだったのが，今回紹介する *symbol-overlay* である．

   {{{toc(2)}}}

*** References
    - [[https://github.com/wolray/symbol-overlay][symbol-overlay]] （ご本家）
    - [[https://manuel-uberti.github.io/emacs/2019/02/14/avy/][Jump around]]
    - [[https://qiita.com/blue0513/items/c0dc35a880170997c3f5][Emacsの補完と検索を超強化する]]

*** Install
    例によって，以下のようにinit.orgに書き込んでMELPAからsymbol-overlayをインストールする．
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (use-package symbol-overlay             ; Highlight symbols
        :ensure t
        :config
        (global-set-key (kbd "M-i") 'symbol-overlay-put)
        (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
        (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
        )
      ,#+end_src
    #+end_src

*** How to use
    使用法はご本家に書いてあるが，まず，”M-i”を叩けば，カーソルが位置しているシンボル（単語と思えば良い）が色付きでハイライトされる．同時に，同一バッファ内での全ての同じ単語も同様にハイライトされる．カーソルを動かしてもハイライトされた状態はそのままである．続けて，別の単語にカーソルを持って行って，"M-i"とすれば，その単語が別の色でハイライトされる．勿論，バッファ内の同一の単語も全て同じ色でハイライトされる．しかも，最初にハイライトした単語は，カーソルが離れた後もハイライトされた状態を維持している．文章で書くとわかりにくいが，要するに下図のような状態になる．

    #+attr_html: :width 80% :target _self
    [[./static/img/symbol-overlay.jpg]]

    さらに，各単語間は "n" で先に進み， "p" で逆戻りできる．別の色のハイライトの単語にカーソルを移動させれば，今度はその単語間で同様に移動できる．そのほかご本家サイトによれば，以下のようなキーバインドになっている．

    #+begin_src lisp
     "n" -> symbol-overlay-jump-next
     "p" -> symbol-overlay-jump-prev
     "w" -> symbol-overlay-save-symbol
     "t" -> symbol-overlay-toggle-in-scope
     "e" -> symbol-overlay-echo-mark
     "d" -> symbol-overlay-jump-to-definition
     "s" -> symbol-overlay-isearch-literally
     "q" -> symbol-overlay-query-replace
     "r" -> symbol-overlay-rename
    #+end_src

    なかでも特筆すべきは "r" のsymbol-overlay-renameで，ハイライトされた単語を一気に書き換えることができる．例えば下図のように "global-set-key" が赤くハイライトされている時，どれかの"global-set-key"にカーソルを置いて "r" を叩けば，minibufferにRenameが表示され，これを消去して新しい名前を書くと赤くハイライトされている単語は一気に新しい名前に変わる．この機能は場合によっては非常に便利である．

    #+attr_html: :width 80% :target _self
    [[./static/img/Rename.jpg]]

    こういうパッケージを教えてくれるので，redditは有難い．

** COMMENT mojaveのライブ変換で快適日本語入力（カーソルの色も日英で変わるように設定） :macos:mojave:japanese:input:emacs:cursor:color:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Live
   :EXPORT_DATE: 2019-07-11
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/SanFrancisco.jpg") (caption . "San Francisco"))
   :END:

   最初にmacosにライブ変換が登場した時に使用してみて，これは駄目だとすぐにGoogle inputmethodに戻してしまった．今年の5月にmojaveにupgradeしたのち，ある日，ふと思い立って，ライブ変換を試してみたところ，ほとんどストレスを感じることなくスラスラと入力ができた．ほとんど変換のためにスペースキーを叩く必要がないことに驚いた．予測の精度が登場時よりはるかに改良されているのであろう．エンドユーザーにはありがたいことである．早速乗り換えてしまった．

   {{{toc(2)}}}

*** How to set up
    - まず画面トップの右端の方の日本語入力のライブ変換にチェックを入れてオンにする．
    - ついで，Emacsのカーソルの色の設定をする．これは以前の記事（[[../japanese_setup][Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など]]）の設定をほんの少し変えるだけのことである．comment outしていた部分を外して，google inputmethodの方をcomment outする．具体的には，init.orgに以下のように書き込めば良い．

    #+begin_src lisp
     ,#+BEGIN_SRC emacs-lisp
     (when (fboundp 'mac-input-source)
       (defun my-mac-selected-keyboard-input-source-chage-function ()
         (let ((mac-input-source (mac-input-source)))
           (set-cursor-color
            (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
                ;; (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                "#91C3FF" "#FF9300"))))
       (add-hook 'mac-selected-keyboard-input-source-change-hook
                 'my-mac-selected-keyboard-input-source-chage-function))
     ,#+END_SRC
    #+end_src

    これでEmacsでライブ変換を使用している際に，日本語入力の時は赤色のカーソル，英語入力の時は青色のカーソルになる．

*** Shortcut
    - 参考：[[https://qiita.com/YumaInaura/items/8c74cdf32ad2f5ed57fa][#Mac のライブ変換で入力をひらがなのままで確定させる ( Control + J )]]
    - 「Control」＋「J」  →   ひらがなに変換
    - 「Control」＋「K」  →   カタカナに変換
    - 「Control」＋「L」  →   全角英字に変換
    - 「Control」＋「;（セミコロン）」  →   半角英字に変換

    私のところでは何故か参考サイトと異なり，セミコロンで半角カタカナではなく半角英字に変換される．半角カタカナなんか使わないからいいけど．．．

    J, K, L, ; はキーボード上の位置が一直線であり，かつ，左から順番になっているので，指に優しい．

    mojaveのライブ変換，とにかく一度使ってみることをお勧めする．

** COMMENT Full text search of PDF archives with hyperestraier on maos (mojave) — Hyper Estraierでpdfの全文検索を行う :macos:mojave:full_text_search:hyperestraier:pdf:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: FullTextSearch
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-07-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "（2019年9月17日修正あり）"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Attica, Greece"))
   :END:
   論文というものはすぐにたまる．読みもしないのにどんどんたまる．21世紀に入った頃は論文のプリントアウトの山ができて定期的に捨てたりしていたのだが，それも今は昔，現在はpdfの時代であり，かなり前からpdfで読んで，注釈など書き込んだりするようになった．しかし，どんどんたまるのは昔以上である．何しろ取るスペースはディスクの容量だけで，物理空間を占拠するわけではないから，いくらでも気兼ねなくため込める．ため込んだ論文数が数千を越えるあたりで，ふと思うわけである．「これを全て読むのは不可能としても，全文検索ができたら便利だろうなぁ．．．」

   という訳で，今回は，hyperestraierを使ってため込んだpdfの全文検索をできるようにしようという話である．<!--more--> hyperestraierをインストールし，Apacheをセットアップして，pdf文書のインデックスを作成し，これをブラウザで検索できるようにするという流れでまとめていく．

   *セットアップは結構面倒だが，非常に便利で，オススメである！*

   なお，以下の手順は，MacBook Pro (15-inch, Late 2016) Mojave 10.14.6，および，iMac 2012 Mojave 10.14.6 の両方で確認済みである．

   {{{toc(2)}}}

*** References
    - [[https://skalldan.wordpress.com/2011/06/28/hyper-estraier-で仏典探索/][Hyper Estraier で仏典探索]]     Amrtaさんのものすごく役に立つサイト
    - [[https://skalldan.wordpress.com/2011/07/01/hyper-estraier-で-pdf-文書管理/][Hyper Estraier で PDF 管理]]    これまた，Amrtaさんの物凄く役に立つサイト．以上の2つを読めば，このサイトを見る必要はないような．．．(^^;;;

    sudoしてrootになるのはイヤ，普通のユーザーとしてapacheを使ってブラウザで全文検索をしたいという人は，この先を読むと参考になるかもしれない．

*** Hyper Estraier
   今回用いるのは[[https://fallabs.com/hyperestraier/index.ja.html][Hyper Estraier]]という全文検索システムである．これがどんなものかはリンク先の文書を読んでもらうとして，早速インストールである．

*** Install
    homebrewを使用すれば一発である．qdbmなどの依存関係も全部面倒を見てくれるので楽である．
    #+begin_src sh
      $ brew install hyperestraier
    #+end_src
    インストールされたものを見るとこうなっている．
    #+begin_src sh
      $ brew info hyperestraier

      hyperestraier: stable 1.4.13 (bottled)
      Full-text search system for communities
      https://fallabs.com/hyperestraier/
      /usr/local/Cellar/hyperestraier/1.4.13 (278 files, 3.1MB) *
      Built from source on 2016-12-24 at 22:34:54 with: --with-mecab
      From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hyperestraier.rb
      ==> Dependencies
      Required: qdbm
      ==> Analytics
      install: 3 (30 days), 16 (90 days), 64 (365 days)
      install_on_request: 3 (30 days), 16 (90 days), 64 (365 days)
      build_error: 0 (30 days)
    #+end_src

    pdfのindexを作成する際に，hyperestraierに含まれているestfxpdftohtmlというフィルタでPDFのファイルをHTML形式に変換する．しかし，このフィルタは/usr/local/bin/などには入ってくれないので，brewによりインストールされた場所を探して，pathの通るところにsymbolic linkを張っておく．

    #+begin_src sh
      $ mdfind -name filter | grep hyperestraier
      /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter

      $ ls -al /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter
      total 48
      drwxr-xr-x   8 kohkichi  admin   256 Feb 16  2017 ./
      drwxr-xr-x  19 kohkichi  admin   608 Dec 24  2016 ../
      -rwxr-xr-x   1 kohkichi  admin  1118 Dec 24  2016 estfxasis*
      -rwxr-xr-x   1 kohkichi  admin  1063 Dec 24  2016 estfxmantotxt*
      -rwxr-xr-x   1 kohkichi  admin  1263 Dec 24  2016 estfxmsotohtml*
      -rwxr-xr-x   1 kohkichi  admin  1016 Dec 24  2016 estfxpdftohtml*
      -rwxr-xr-x   1 kohkichi  admin  1007 Dec 24  2016 estfxxdwtotxt*
      -rwxr-xr-x   1 kohkichi  admin  1057 Dec 24  2016 estwnetxpnd*

      $ ln -s /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/filter/* /usr/local/bin/
    #+end_src

*** pdftotext
    上述のestfxpdftohtmlであるが，内部でpdftotextを使用している．そして，厄介なことに，このpdftotextはxpdfとpopplerの両方に含まれている．しかも，xpdfに含まれているpdftotextには *-htmlmeta* optionがないのである．つまり， *xpdfに含まれているpdftotextを使用するとpdf文書のindexができない* ということになる．実際にそれぞれのversionを見てみると，
    #+begin_src sh
      <<xpdf>>
      $ pdftotext -h
      pdftotext version 4.01.01
      Copyright 1996-2019 Glyph & Cog, LLC
      ..........

      <<poppler>>
      $ pdftotext -h
      pdftotext version 0.77.0
      Copyright 2005-2019 The Poppler Developers - http://poppler.freedesktop.org
      Copyright 1996-2011 Glyph & Cog, LLC
      ..........
    #+end_src
    このように，全く異なったものになっているが，どうやら，xpdfのものの方が古いらしい．もし，xpdfをすでに入れている場合は，popplerをインストールしようとすると，
    #+begin_src sh
      $ brew install poppler

      Error: Cannot install poppler because conflicting formulae are installed.
      xpdf: because poppler, pdftohtml, pdf2image, and xpdf install conflicting executables

      Please `brew unlink xpdf` before continuing.
    #+end_src
    と怒られるので，言われる通りに brew unlink xpdf してから，再度，brew install popplerを行えば良い．これで，popplerの方のpdftotextが使われるようになって，ちゃんとindexができるようになる．私は2台あるMacの片方でだけ何故かindexが作成できないので，原因を調べているうちにこのことに気がついたが，ネットで他に触れている記事が見当たらないので，ここにまとめておく．

    また，このようにしてxpdfとpopplerをインストールしていると，[[../pdf-tools/#追記-2019年7月17日][ Emacsでpdfを読む (pdf-tools) (2019.07.17追記)]]に書いたように，pdf-toolをコンパイルする際に「libffiがどこにあるか分からん」というようなエラーメッセージが出ることがある．その際の対処法は，[[../pdf-tools/#追記-2019年7月17日][ Emacsでpdfを読む (pdf-tools) (2019.07.17追記)]]に書いたとおりである．

*** ユーザー用のウェブディレクトリの作成
    まず，Apacheを用いてブラウザで検索できるように（これについては後述），自分のhome directoryにSitesというdirectoryを作成する．
    #+begin_src sh
      $ cd ~
      $ mkdir Sites
      $ cd Sites
      $ pwd
      /Users/taipapa/Sites
    #+end_src
    Apacheの設定のところで述べるが，このSitesというディレクトリにウェブサイトを構築できるように設定し，WWW ブラウザで全文検索できるようにする．

*** 全文検索用のディレクトリの作成
    Sites ディレクトリの中に全文検索用のディレクトリを作成する．ここではpdfファイルの全文検索を行うので，pdfという名前にした．さらに，pdf ディレクトリの中に全文検索の対象となるpdfを集約するためのPDFsというディレクトリを作成する．
    #+begin_src sh
      $ cd ~/Sites
      $ mkdir pdf
      $ cd pdf
      $ mkdir PDFs
    #+end_src

**** PDFsディレクトリへのpdfの集約
     さて，pdfは，大抵の場合，いくつかのディレクトリに分けて置いてあるであろう．それを全て1箇所に集約して全文検索ができるようにするために，シンボリックリンクを使用する．具体的には，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc とすると，以下のようにする．
     #+begin_src sh
       $ cd /Users/taipapa/Sites/pdf/PDFs
       $ ln -s /Data/hogehoge .
       $ ln -s /Data/fugafuga .
       $ ln -s /Data/misc .
     #+end_src

*** 全文検索用のindexの作成
    hyperestraierのestcmdを用いて，空のindexを作成する．名前はマニュアルの真似をしてcasketとする（わかれば何でも良いと思う）．これはpdfの配下でPDFsと同じレベルに置く
    #+begin_src sh
      $ pwd
      /Users/taipapa/Sites/pdf
      $ estcmd create casket
      $ ls -la
      total 24
      drwxr-xr-x   5 taipapa  staff   160 Jul 29 20:34 .
      drwxr-xr-x   8 taipapa  staff   256 Aug  4 22:19 ..
      -rw-r--r--@  1 taipapa  staff  8196 Aug  5 22:12 .DS_Store
      drwxr-xr-x  10 taipapa  staff   320 Jul 29 20:21 PDFs
      drwxr-xr-x  11 taipapa  staff   352 Jul 29 21:14 casket
    #+end_src

    これでようやく，indexを作成する準備が整った．後は以下のように叩けば良い．optionについてはマニュアルを参照．
    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd gather -pc UTF-8 -cl -fx ".pdf" "H@estfxpdftohtml" -il ja -lf -1 -sd -cm -um casket PDFs
    #+end_src
    document数が11734個，語数が1351563のindex作成に要した時間は約40分強であった．これは，MacBook Pro (15-inch, Late 2016)でもiMac 2012 でも，ほとんど変わらなかった．

    optionとしては，optimizeがインデックスを最適化して、不要な領域を削除，purgeはインデックス内にあってファイルシステム上にない文書の情報を削除する．
    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd optimize /Library/WebServer/Documents/pdf/casket
      $ estcmd purge -cl /Library/WebServer/Documents/pdf/casket
    #+end_src

      {{% alert note %}}
      *2019年9月17日修正：*  上記の後二者はdirectoryを間違えている．下記が正しい．
      {{% /alert %}}

    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd optimize /Users/taipapa/Sites/pdf/casket
      $ estcmd purge -cl /Users/taipapa/Sites/pdf/casket
    #+end_src


*** indexの更新
    前述の3つのコマンドを打てば良い．
    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd gather -pc UTF-8 -cl -fx ".pdf" "H@estfxpdftohtml" -il ja -lf -1 -sd -cm -um casket PDFs
      $ estcmd optimize /Library/WebServer/Documents/pdf/casket
      $ estcmd purge -cl /Library/WebServer/Documents/pdf/casket
    #+end_src

      {{% alert note %}}
      *2019年9月17日修正：*  上記の後二者はdirectoryを間違えている．下記が正しい．
      {{% /alert %}}

    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd gather -pc UTF-8 -cl -fx ".pdf" "H@estfxpdftohtml" -il ja -lf -1 -sd -cm -um casket PDFs
      $ estcmd optimize /Users/taipapa/Sites/pdf/casket
      $ estcmd purge -cl /Users/taipapa/Sites/pdf/casket
    #+end_src
   最初にゼロからindexを作成する際は，上記のようにかなり時間がかかるが，一旦作ってしまえば，更新はごく短時間で終了する．更新の自動化については，Amrtaさんの [[https://skalldan.wordpress.com/2011/07/01/hyper-estraier-で-pdf-文書管理/#sec-3][インデックス更新の自動化]] を参考にされたい．

*** 検索のテスト
    試しにterminalで検索してみる．
    #+begin_src sh
      $ cd /Users/taipapa/Sites/pdf
      $ estcmd search -vh casket HSP27
      --------[02D18ACF711B9586]--------
      VERSION  1.0
      NODE     local
      HIT      288
      HINT#1   hsp27   288
      TIME     0.001226
      DOCNUM   11734
      WORDNUM  1354563
      VIEW     HUMAN
      ..........
    #+end_src
    うん，ちゃんと動いている．それに速い！
*** Apache set up
   terminalで検索ではあまりに寂しいので，ブラウザで検索できるようにするために，Web serverを立ち上げる．MacにはデフォルトでApacheがインストールされているというありがたい状態になっているので，これを使う．なお，Apacheについては，[[https://www.kagoya.jp/howto/rentalserver/apache/][Apacheとは？Webサーバーの仕組みと人気サーバーソフトを徹底解説]]などを参考にされたい．

   Apacheの設定については，以下を参考にした．

   - 参考1：[[https://qiita.com/shuntaro_tamura/items/bdabcb77926dc92617b1][Macでローカルサーバを立ち上げる方法]]
   - 参考2：[[https://qiita.com/kid_drill/items/5c85917068490177b6ab][MacでApacheを立ち上げてみる]]
   - 参考3：[[https://qiita.com/YuukiWatanabe/items/f89fe047ace61d2d2b45][Macでローカルサーバー構築あれこれ]]
   - 参考4：[[https://httpd.apache.org/docs/2.4/ja/howto/cgi.html][Apache Tutorial: CGI による動的コンテンツ]]  （結局，きちんと理解する為には，これをはじめとするApacheのチュートリアルを読むのが一番であった）

   これらのサイトを読んだ方が早いのだが，自分のために設定などをまとめておく．

   まず，念のためにApacheが既にインストールされているかどうかを確かめてみる．
   #+begin_src sh
     $ httpd -v
     Server version: Apache/2.4.34 (Unix)
     Server built:   Feb 22 2019 20:20:11
   #+end_src
   確かにインストールされている．

*** CGI を許可するように Apache を設定する
    - 参照：[[https://httpd.apache.org/docs/2.4/ja/howto/cgi.html][Apache Tutorial: CGI による動的コンテンツ]]
    - *Apacheの設定ファイルの場所は、/etc/apache2/httpd.conf*
    - CGI (Common Gateway Interface) は，ウェブサーバが コンテンツ生成をする外部プログラムと協調して動作するための方法を 定義している．
    - CGI プログラムを正しく動作させるには、CGI を許可するように Apache の設定を行う必要がある．
    - Apache が共有モジュール機能付きでビルドされている場合、モジュールがロードされていることを確認する．具体的には，/etc/apache2/httpd.conf をviを使って以下のように書き換えれば良い（root権限が必要なので sudo している）．
      #+BEGIN_SRC shell
        sudo vi /etc/apache2/httpd.conf
        ....
        165 #LoadModule cgi_module libexec/apache2/mod_cgi.so
        ----->
        LoadModule cgi_module libexec/apache2/mod_cgi.so
      #+END_SRC
      165行目の行頭の＃を外してアンコメントし，有効化しておく．\\
      これをやらないと，cgiが働かず，そのファイル自体がダウンロードされてしまう．
    - 設定ファイルの更新内容を反映させるためにはApacheの再起動が必要
*** Apacheの起動，再起動
           - Apacheの起動
             #+begin_src sh
               $ sudo apachectl start
             #+end_src
             - Apacheの停止
             #+begin_src sh
               $ sudo apachectl stop
             #+end_src
             - Apacheの再起動
             #+begin_src sh
               $ sudo apachectl restart
             #+end_src

           これでApacheを起動したので，hyperestraierに含まれている検索用CGI scriptを利用する．

*** CGIが動くかどうかのテスト
    [[https://httpd.apache.org/docs/2.4/ja/howto/cgi.html][Apache Tutorial: CGI による動的コンテンツ]] には，「ScriptAlias ディレクティブを使用して、 CGI プログラム用の特別な別ディレクトリを Apache に設定します。 Apache は、このディレクトリ中の全てのファイルを CGI プログラムであると仮定します。 そして、この特別なリソースがクライアントから要求されると、 そのプログラムの実行を試みます。」と記載されている．一方, mojaveのデフォルトの /etc/apache2/httpd.confでは，ScriptAliasではなく，以下のようにScriptAliasMatchを用いている．
    #+begin_src sh
        373  ScriptAliasMatch ^/cgi-bin/((?!(?i:webobjects)).*$) "/Library/WebServer/CGI-Executables/$1"
    #+end_src
    この正規表現の記述により，cgi-bin/というパスが/Library/WebServer/CGI-Executables/に対応するようになっている（詳細は，[[http://httpd.apache.org/docs/2.4/mod/mod_alias.html#scriptalias][ScriptAlias ディレクティブ]]  のScriptAliasMatch ディレクティブを参照）

    ということで，/Library/WebServer/CGI-Executables/にcgi scriptを置けば，CGI programとして動くはずである．macでは最初からperlがインストールされているので，以下のようなperl script（"Hello"と表示するだけ）を作成して試してみる．
    #+begin_src perl
        #!/usr/bin/perl
        print "Content-type: text/html \n\n";
        print "Hello";
    #+end_src
    これを，test.cgiとして保存し，
    #+begin_src sh
        $ chomod 755 test.cgi
    #+end_src
    して，実行権限を付与した上で，/Library/WebServer/CGI-Executables/に置く．この状態で，ブラウザのurl windowに localhost/cgi-bin/test.cgi と打ち込むと，"Hello" と表示される．

    さて，次の段階に進む前にDocumentRootについて，ちょっと説明が必要（後日の自分のため）．

*** DocumentRoot
    - 参考：[[https://www.adminweb.jp/apache/docroot/index1.html][ドキュメントルート(DocumentRoot)]]
    /etc/apache2/httpd.confを，lessを使って読んでみると以下のように書かれている．
    #+begin_src sh
      $ less -N /etc/apache2/httpd.conf
      ..........
      240 #
      241 # DocumentRoot: The directory out of which you will serve your
      242 # documents. By default, all requests are taken from this directory, but
      243 # symbolic links and aliases may be used to point to other locations.
      244 #
      245 DocumentRoot "/Library/WebServer/Documents"
      246 <Directory "/Library/WebServer/Documents">
      ..........
    #+end_src

    要するにDocumentRootというのは文書やコンテンツの置き場所として使われるディレクトリである．Macの場合は， *DocumentRoot "/Library/WebServer/Documents"* と指定されており，WWW serverとして公開する内容は，/Library/WebServer/Documents 以下に配置していくことになる．他の場所を参照するためにシンボリックリンクやエーリアスを使用しても良いと書かれている．

    先ほど起動したApacheへブラウザからアクセスすると（ブラウザのurl が表示されているところにlocalhostと打てば良い）以下のような画面が表示される．

    #+attr_html: :width 80% :target _self
    [[./static/img/Apache.jpg]]

    これは，/Library/WebServer/Documents/index.html.en が表示されているのである．
    #+begin_src sh
     $ less /Library/WebServer/Documents/index.html.en
     <html><body><h1>It works!</h1></body></html>
     /Library/WebServer/Documents/index.html.en (END)
    #+end_src

    つまり，この  /Library/WebServer/Documents ディレクトリの配下が， http://localhost のroot直下となる．pdfを含むディレクトリ，あるいはそのシンボリックリンクを/Library/WebServer/Documents ディレクトリの配下に置けば全文検索を行うcgi scriptの対象とできるわけである．

    しかし，そうなると，前述の/Library/WebServer/CGI-Executables/に於いても同じであるが，全ての作業をrootとして行わなければならなくなり，何をするにもsudoしないといけないのが面倒であるし，security上でも問題であろう．そこで，UserDir ディレクティブを使って 各ユーザがホームディレクトリにSites directoryを作成し，ウェブサイトを構築できるように設定する．要するに，先ほど作成した/Users/taipapa/Sites/pdf/以下のディレクトリで全文検索ができるように設定するということである．

*** ユーザ毎のウェブディレクトリ
    - 参照1：[[http://motw.mods.jp/Mac/local_server.html][apacheを使ってローカルサーバーを構築する方法]]
    - 参照2：[[http://neos21.hatenablog.com/entry/2019/01/27/080000][MacOS 同梱の Apache が参照するドキュメントルートを変更する]]
    - 参照3：[[https://qiita.com/colorrabbit/items/3ab4c2d863a55ca72d35][MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法]]
    - 参照4：[[https://httpd.apache.org/docs/2.4/ja/howto/public_html.html][ユーザ毎のウェブディレクトリ]]

    やはりApacheのチュートリアル（[[https://httpd.apache.org/docs/2.4/ja/howto/public_html.html][ユーザ毎のウェブディレクトリ]]）を読むのが一番分かりやすかった．以下はこのサイトからの引用
    - 「複数のユーザのいるシステムでは、UserDir ディレクティブを使って 各ユーザがホームディレクトリにウェブサイトを構築できるように設定することが 可能です。URL http://example.com/~username/ を訪れた人は "username" というユーザの UserDir ディレクティブで指定された サブディレクトリからコンテンツを得ることになります。」
    - 「デフォルトではこれらのディレクトリへのアクセスは許可されていません。 UserDir を使って有効にできます。 有効にするには、デフォルトの設定ファイルで付随する httpd-userdir.conf ファイルが必要」という翻訳になっている．意味はなんとなくわかるが，後半部分は「デフォルトの設定ファイルであるhttpd-userdir.conf ファイルの中の次の行をアンコメントすることによりアクセスが可能となる．また，必要に応じてhttpd-userdir.confも適切に変更する」と訳すべきと思う．

**** httpd-userdir.confの有効化
     手順としては，まず，/etc/apache2/httpd.confの511行目の行頭の#を外し，コメントアウトを外してhttpd-userdir.confを有効にする．

     #+begin_src sh
     $ sudo vi /etc/apache2/httpd.conf
     ..........
     510 # User home directories
     511 #Include /private/etc/apache2/extra/httpd-userdir.conf
     ----->
     511 Include /private/etc/apache2/extra/httpd-userdir.conf
     ..........
     #+end_src

**** httpd-userdir.confの編集（ユーザー毎の設定ファイルを読み込む様にする）
     ついで，有効にした /etc/apache2/extra/httpd-userdir.confを見て，編集する．

     #+BEGIN_SRC shell
     $ sudo vi /etc/apache2/extra/httpd-userdir.conf

     1 # Settings for user home directories
     2 #
     3 # Required module: mod_authz_core, mod_authz_host, mod_userdir
     4
     5 #
     6 # UserDir: The name of the directory that is appended onto a user's home
     7 # directory if a ~user request is received.  Note that you must also set
     8 # the default access control for these directories, as in the example below.
     9 #
     10 UserDir Sites
     11
     12 #
     13 # Control access to UserDir directories.  The following is an example
     14 # for a site where these directories are restricted to read-only.
     15 #
     16 # Include /private/etc/apache2/users/*.conf
     17 <IfModule bonjour_module>
     18        RegisterUserSite customized-users
     19 </IfModule>
     #+END_SRC

     10行目の"UserDir Sites"は デフォルトでアンコメントされており，そのままで良い．これにより，~usernameでSites directoryにアクセスできるようになる．編集する部分は，16行目の " # Include /private/etc/apache2/users/*.conf" であり，行頭の＃を外してアンコメントし，有効化しておく．これによりユーザーごとの設定ファイルを読み込む様になる（[[https://qiita.com/colorrabbit/items/3ab4c2d863a55ca72d35][MacOS X の Yosemite (10.10) で Sites ディレクトリを使って localhost をアカウント別に利用する方法]]）．

     また，3行目にあるように，ユーザーのホームディレクトリのセットアップのために， *mod_authz_core, mod_authz_host, mod_userdirを全て有効* にしておく必要がある．以下のように， */etc/apache2/httpd.conf* を編集する．

     #+begin_src sh
     sudo vi /etc/apache2/httpd.conf
     ......
     77 LoadModule authz_host_module libexec/apache2/mod_authz_host.so
     78 LoadModule authz_groupfile_module libexec/apache2/mod_authz_groupfile.so
     79 LoadModule authz_user_module libexec/apache2/mod_authz_user.so
     80 #LoadModule authz_dbm_module libexec/apache2/mod_authz_dbm.so
     81 #LoadModule authz_owner_module libexec/apache2/mod_authz_owner.so
     82 #LoadModule authz_dbd_module libexec/apache2/mod_authz_dbd.so
     83 LoadModule authz_core_module libexec/apache2/mod_authz_core.so
     ......
     173 #LoadModule speling_module libexec/apache2/mod_speling.so
     174 #LoadModule userdir_module libexec/apache2/mod_userdir.so
     175 LoadModule alias_module libexec/apache2/mod_alias.so
     ...
     #+end_src
     77行目の "LoadModule authz_host_module libexec/apache2/mod_authz_host.so" と83行目の "LoadModule authz_core_module libexec/apache2/mod_authz_core.so"はデフォルトでアンコメントされていたが，174行目の "#LoadModule userdir_module libexec/apache2/mod_userdir.so" はコメントアウトされていたので，#を外して有効化した．これらの設定で， *ユーザーディレクトリが有効* になる．

**** ユーザー毎の設定ファイルを作成
     自分の使っているusernameを知らない人はいないと思うが，万一分からなければ以下のコマンドを使う．
     #+begin_src sh
       $ whoami
       taipapa
     #+end_src
     ついで，/etc/apache2/users にユーザー毎の設定ファイルを作成する．今回はtaipapaの設定ファイルということになる．
     #+begin_src sh
       $ sudo vi /etc/apache2/users/taipapa.conf

       <Directory "/Users/taipapa/Sites/">
       AddHandler cgi-script cgi
       AllowOverride All
       Options Indexes FollowSymLinks Multiviews ExecCGI
       Require all granted
       </Directory>
     #+end_src
     内容を簡単に説明する．
     - Directory ([[https://httpd.apache.org/docs/2.4/ja/mod/core.html#directory][Directory ディレクティブ]]): 指定されたディレクトリとそのサブディレクトリにのみ ディレクティブを適用させるためには、 Directory と /Directory を対として、ディレクティブ群を囲む．以下はディレクティブの説明
     - AddHandler ([[https://httpd.apache.org/docs/2.4/ja/mod/mod_mime.html#addhandler][AddHandler ディレクティブ]] ): ファイル名の拡張子を指定されたハンドラにマップする．"AddHandler cgi-script cgi" により，/Users/taipapa/Sites/の配下にある拡張子 "." で終わるファイルを CGI スクリプトとして扱うようになる．
     - AllowOverride ([[https://httpd.apache.org/docs/2.4/ja/mod/core.html#allowoverride][AllowOverride ディレクティブ]]): このディレクティブが All に設定されている時には、 .htaccess という コンテキスト を持つ 全てのディレクティブが利用できる．
     - Options ([[https://httpd.apache.org/docs/2.4/ja/mod/core.html#options][Options ディレクティブ]]): ディレクトリに対して使用可能な機能を設定する．個々の機能はリンク先を参照．今回重要なのは， *ExecCGI* で，これはmod_cgiによるCGI scriptの実行を許可する．
     - Require (参照：[[https://qiita.com/100/items/ab31e57fcc66ac661d5c][Apache 2.4 設定ファイルの記述例]]): サーバーのディレクトリに接続してくるクライアントについて、許可・拒否する条件を指定するディレクティブ．昔はAllow ディレクティブやDeny ディレクティブを利用していた． *"Require all granted" は、すべてのクライアントからの接続を許可する．* "Require all denied" は、すべてのクライアントからの接続を拒否する．

     これで，Apache関連の設定が終了した．次はいよいよCGI scriptの設定である．


**** COMMENT UserDir を使ってファイルのパスを設定する
     スラッシュで始まらないパスが与えられたときは，ユーザのホームディレクトリ からの相対パスとみなされる．従って，/etc/apache2/extra/httpd-userdir.confの10行目に "UserDir Sites" とあるので， URL http://example.com/~taipapa/file.html は パス /Users/taipapa/Sites/file.html へ 変換される．


     これで，10行目の "UserDir Sites" が有効になる．


*** Hyperestraier付属の全文検索用CGI scriptのset up
   ようやく，ブラウザによる全文検索ができるようにするためにCGI scriptのset upをするところまでたどり着いた．hyperestraierに含まれている検索用CGI scriptは，[[https://fallabs.com/hyperestraier/uguide-ja.html#estseek][estseek.cgi]]である．詳細はリンク先のマニュアルを参照していただきたい．そこにはこうある．「estseek.cgiが動作するには、設定ファイルとテンプレートファイルとトップページファイルとヘルプファイルが必要です。それぞれestseek.conf、estseek.tmpl、estseek.top、estseek.helpというのが標準的な名前です。」これらのscriptおよび関連ファイルは，brewでインストールした場合は，以下のような場所に入る．
   #+begin_src sh
     $ mdfind -name estseek
     /usr/local/Cellar/hyperestraier/1.4.13/libexec/estseek.cgi
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.top
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.tmpl
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.help
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/locale/ja/estseek.conf
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-frame.html
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/increm/estseek-form.html
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.top
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.tmpl
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.help
     /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/estseek.conf

     $ ls /usr/local/Cellar/hyperestraier/1.4.13/libexec/
     estfraud.cgi* estproxy.cgi* estscout.cgi* estseek.cgi*  estsupt.cgi*

     $ ls /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/
     COPYING        estfraud.conf  estscout.conf  estseek.top    locale/
     ChangeLog      estproxy.conf  estseek.conf   estsupt.conf
     THANKS         estraier.idl   estseek.help   filter/
     doc/           estresult.dtd  estseek.tmpl   increm/
   #+end_src
   そこで，これらのscriptをユーザーディレクトリのしかるべき場所にコピーする．今回は，まず，前半部で作成した/Users/taipapa/Sitesにcgi-bin というディレクトリを作成し，CGI scriptの置き場所とした．そして，その配下にestというディレクトリを作って，そこにhyperestraierによる全文検索用のscript などをコピーした．

   #+begin_src sh
     $ cd /Users/taipapa/Sites
     $ mkdir -p cgi-bin/est
     $ tree -L 2
     .
     ├── cgi-bin
     │   ├── est
     │   └── test.cgi
     ├── index.html
     ├── pdf
     │   ├── PDFs
     │   └── casket
     └── test.cgi
     $ cd cgi-bin/est
     $ cp -a /usr/local/Cellar/hyperestraier/1.4.13/libexec/* .
     $ cp -a /usr/local/Cellar/hyperestraier/1.4.13/share/hyperestraier/est* .
     $ ls
     estfraud.cgi*  estproxy.conf  estscout.cgi*  estseek.conf   estseek.top
     estfraud.conf  estraier.idl   estscout.conf  estseek.help   estsupt.cgi*
     estproxy.cgi*  estresult.dtd  estseek.cgi*   estseek.tmpl   estsupt.conf
   #+end_src

   設定ファイルであるestseek.confはdefaultでは以下のようになっている．
   #+begin_src sh
     $ cd /Users/taipapa/Sites/cgi-bin/est
     $ less -N estseek.conf
     ..........
     1 indexname: casket
     2
     3 tmplfile: estseek.tmpl
     4
     5 topfile: estseek.top
     6
     7 helpfile: estseek.help
     8
     9 lockindex: true
     10
     11 pseudoindex:
     12
     13 replace: ^file:///home/mikio/public_html/{{!}}http://localhost/
     14 replace: /index\.html?${{!}}/
     15
     16 showlreal: false
     ..........
   #+end_src

   これを以下のように編集する．

   #+begin_src sh
     1 #indexname: casket
     2 indexname: /Users/taipapa/Sites/pdf/casket
     3
     4 tmplfile: estseek.tmpl
     5
     6 topfile: estseek.top
     7
     8 helpfile: estseek.help
     9
     10 lockindex: true
     11
     12 pseudoindex:
     13
     14 #replace: ^file:///home/mikio/public_html/{{!}}http://localhost/
     15 #replace: /index\.html?${{!}}/
     16
     17 replace: ^file:///Data/{{!}}http://localhost/~taipapa/pdf/PDFs/
     18
   #+end_src

   17行目の *replace:* の部分はかなりの試行錯誤が必要であった．マニュアルでは，「replaceは正規表現によってURIを変換するのに使います。複数回指定できます。先頭にマッチする「^」を駆使すれば接頭辞（ディレクトリ）の変換ができますし、末尾にマッチする「$」を駆使すれば接尾辞（拡張子）の変換ができます。」とあるように，どこにpdf文書を置くかで適切に変更する必要がある．私の場合は，前述のごとく，pdfのあるディレクトリが，/Data/hogehoge, /Data/fugaguga, /Data/misc で，/Users/taipapa/Sites/pdf/PDFs にシンボリックリンクで集約したので，このような設定になった．他のファイルはdefaultのままとした．

   これで，全ての準備は整った．Sites ディレクトリには前半部で説明した通り，pdf archiveへのシンボリックリンクが集約されており，かつ，全文検索用の索引であるcasketも置いてある．全てが正しく設定されていれば，ブラウザのurl windowに *http://localhost/~username/cgi-bin/est/estseek.cgi* （今回は~usernameは~taipapa） と打ち込むと，以下のような全文検索の画面になるはずである．

   #+attr_html: :width 80% :target _self
   [[./static/img/FTsearch_view.jpg]]

   早速検索してみよう．HSP27と入れてみると，結果は以下の通り．検索に用いたキーワードが黄色でハイライトされている．

   #+attr_html: :width 80% :target _self
   [[./static/img/FTsearch_view2.jpg]]

   一番最初の2667.full.pdfを右クリックすると，下のように別タブでpdfが開く．

   #+attr_html: :width 80% :target _self
   [[./static/img/FTsearch_view3.jpg]]

   また，各結果の[detail]の部分を右クリックすると以下のような画面が別タブで開く．

   #+attr_html: :width 80% :target _self
   [[./static/img/FTsearch_view4.jpg]]

   これは，pdfの内容をテキストで出力したものである．一見，見にくくて何の役にたつと思うかもしれないが，検索キーワードが黄色にハイライトされており，この単語の使い方が一目でわかるようになっている．論文を書くときに参考になる．

   この全文検索を使い始めてもう5-6年になるが，一旦セットアップしてしまえば，時々indexを更新する以外は手間いらずで，重宝している．更新の自動化については，前述の通り．

   今回は，このブログを始めて以来の長文になってしまった．後日の自分のためにできるだけ細かいところまで書き留めておいた．半分以上はApacheの設定に関する記述になっている（笑）．


** COMMENT How to update hugo and academic theme (Part 1) :hugo:academic:theme:upgrade:ox_hugo:org_mode:emacs:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-upgrade-hugo-and-academic-theme
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-08-18
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugoとacademic テーマのアップデート"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Ancient greek pottery, Musée du Louvre"))
   :END:

   最近のニュースを見ていて思い出した言葉がある．
   #+begin_quote
   "True patriotism hates injustice in its own land more than anywhere else.” ― Clarence Darrow

   "Patriotism is the last refuge of a scoundrel." ― Samuel Johnson

   "Violence is the last refuge of the incompetent."" ― Salvor Hardin ( Isaac Asimov)
   #+end_quote

   3番目はオマケ

   閑話休題，以前の記事（[[../horizontal_scrollbar][How to add horizontal scrollbar for codeblock in academic theme of hugo]]）で触れたように，このブログは，Hugoという静的サイトジェネレーター（themeはacademic）で作成している． <!--more--> 実際には，ox-hugoというemacsのorg-modeのパッケージを用いて書いて，それをhugoのmarkdownとしてexportしている．同記事内で，academic themeのupgradeが速すぎて全く追随できていないと書いた．記事はゴールデンウィークの5月4日に投稿しており，既に3ヶ月以上が経過している．この夏休みにようやくupdateすることができたので，後日のためにまとめておく．

   本来なら，まずox-hugoを用いたhugoでのブログの作り方をまとめるべきであろうが，ネットを少し探せば，私のような素人よりはるかに詳しい方が懇切丁寧に解説しているサイトが山のように存在する．また，ブログ設定の一から十まで溯る気力もないので，順番が逆になるが，今回はアップグレードからということにした．素人がアップデートに困ってあれこれやったことの詳細なメモということで．．．(^^;;;


   {{{toc(2)}}}

*** References
    1. [[https://gohugo.io][HUGO]]  ご本家
    2. [[https://sourcethemes.com/academic/][Academic]]  academic themeのご本家
    3. [[http://www.mit.edu/~k2smith/post/getting-started/][Getting started with the Academic framework for Hugo]]  academic themeのインストール
    4. [[https://sourcethemes.com/academic/docs/update/][Update]]  academic themeのupdateについて
    5. [[https://ox-hugo.scripter.co][ox-hugo]]  ox-hugoのご本家

*** Hugoのupdate
    hugoを最新版にする．
    #+begin_src sh
      $ brew upgrade hugo
      ..........
      $ hugo version
      Hugo Static Site Generator v0.57.2/extended darwin/amd64 BuildDate: unknown

      $ brew info hugo
      hugo: stable 0.57.2 (bottled), HEAD
      Configurable static site generator
      https://gohugo.io/
      /usr/local/Cellar/hugo/0.57.2 (41 files, 59.2MB) *
      Poured from bottle on 2019-08-19 at 21:45:45
      From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hugo.rb
      ==> Dependencies
      Build: go ✘
      ==> Options
      --HEAD
      Install HEAD version
      ==> Caveats
      Bash completion has been installed to:
      /usr/local/etc/bash_completion.d
      ==> Analytics
      install: 23,734 (30 days), 46,557 (90 days), 196,750 (365 days)
      install_on_request: 22,865 (30 days), 45,011 (90 days), 186,183 (365 days)
      build_error: 0 (30 days)

    #+end_src

*** ox-hugo update
    ox-hugoを最新版にする．
    #+begin_src lisp
      M-x package-utils-upgrade-by-name
      ...........
      ox-hugo
    #+end_src
    C-h C-l ox-hugo-pkg.elすると，
    #+begin_src lisp
      (define-package "ox-hugo" "20190802.1755" "Hugo Markdown Back-End for Org Export Engine"
        '((emacs "24.4")
          (org "9.0"))
        :keywords
        '("org" "markdown" "docs")
        :url "https://ox-hugo.scripter.co")
      ;; Local Variables:
      ;; no-byte-compile: t
      ;; End:
    #+end_src
    最新版であることが確認できる．
*** Academic theme update

    [[https://sourcethemes.com/academic/docs/update/][Update]] のサイトには，以下の3つの場合でのupdateの方法が書かれている．
    1. If you installed Academic Kickstart
    2. If you installed by Git cloning hugo-academic
    3. If you installed from a ZIP

   問題は，自分がどうやってインストールしたかを忘れている（！）ことだった.....(^^;;;  versionも 2.4.0とかなり古い． しかも，恐らくは，数種類の方法を重ねて試した結果が現在の状況と考えられるので，ドキュメントの通りにやってもうまくいくはずがない気がした．

   {{% alert note %}}
    以下のhugo new citeを行ってから，academic をgit cloneする方法はお勧めしない．この方法では，git repositryの中にgit repositoryを埋め込むことになりエラーが出る．1のAcademic Kickstartを使う方法が良い．次回の記事（[[../how-to-update-hugo-and-academic-theme-part2][How to update hugo and academic theme (Part2)]]）を参考にしていただきたい．以下の記述は自戒のために残しておく．
   {{% /alert %}}
   +色々悩んだ末に，2の方法をいちから，やり直すことにした．要するにクリーンインストールを行い，その上に，現在までの内容を流し込むという泥臭いやり方を選択したわけである．+

   +以下，[[http://www.mit.edu/~k2smith/post/getting-started/][Getting started with the Academic framework for Hugo]] に沿って，まず，hugoで新しいサイトを作成し，そこにacademic themeをgitでインストールし，最新版の4.4.0になっていることを確認する．+
   #+begin_src sh
     $ cd /Data/hoge
     $ hugo new site Taipapablog
     $ cd Taipapablog
     $ pwd
     /Data/hoge/Taipapablog
     $ git clone https://github.com/gcushen/hugo-academic.git themes/academic
     $ less themes/academic/data/academic.toml
     # Academic

     version = "4.4.0"
     themes/academic/data/academic.toml (END)
   #+end_src

   +そして，academicのexampleSite folder の中身を全てwebsite root folder（今回はTaipapablog directory）にコピーする．これらは，config fileなどを含んでおり，自分のウェブサイトの鋳型になる．+
   #+begin_src sh
     $ pwd
     /Data/hoge/Taipapablog
     $ ls themes/academic/exampleSite/
     config/  content/ static/
     $ cp -av themes/academic/exampleSite/* .
   #+end_src

   +ここで，Hugo serverをwebsite root folderから立ち上げる．+
   #+begin_src sh
     $ pwd
     /Data/hoge/Taipapablog
     $ hugo server --watch
   #+end_src

   +これで，ブラウザで，url windowにlocalhost:1313と打てば，Academic powered websiteのデモが立ち上がる．ここまでは実に簡単である．+
*** [[https://sourcethemes.com/academic/docs/update/#migrate-content][Migrate Content]]
    ここから以前の記事の内容を流し込んでいくわけであるが，academicの新旧versionの間には断絶があって，単純に流し込んで終わりというわけにはいかない．これも，上書きアップデート（？）のようなやり方を諦めた理由である．この断絶を *"Breaking changes"* と呼んでいる．これを乗り越えてブログの内容を移行するための[[https://github.com/sourcethemes/academic-scripts][academic-scripts]] のリンクが上記ページにある．これは，hugoの新しい機能である[[https://gohugo.io/content-management/page-bundles/][Page Bundles]] への移行を自動化するスクリプトである．簡単に言えば，Page Bundlesとは，[[https://gohugo.io/content-management/page-resources/][Page Resources]] をグループ化する方法であり，詳細は，リンク先を参照されたい．Page Bundlesは，下記のような構造になる．つまり，ファイルの構成が変わってmdファイルひとつだったのが，フォルダ（ディレクトリ）となり，mdファイルの名前はindex.mdとなり，かつ，featured.jpgが自動的にページの冒頭に置かれるようになる．同一記事に使用する画像などは，同じディレクトリ内にまとめることができる．以下は，アップデート前後の /Data/hoge/Taipapablog/content/post の比較である．

    #+begin_src sh
      Old version
      $ tree -L 2
      .
      ├── Different-segment-to-each-facet-in-ggplot.md
      ├── Emacs_Install.md
      ├── EmbedRplotInBlog.md
      ├── ExportRplot.md
      ├── FullTextSearch.md
      ├── Japanese_setup.md
      ..........

      Current version
      $ tree -L 2
      .
      ├── Different-segment-to-each-facet-in-ggplot
      │   ├── featured.jpg
      │   └── index.md
      ├── Emacs_Install
      │   ├── featured.jpg
      │   └── index.md
      ├── EmbedRplotInBlog
      │   ├── featured.jpg
      │   └── index.md
      ├── ExportRplot
      │   ├── featured.jpg
      │   └── index.md
      ├── FullTextSearch
      │   ├── featured.jpg
      │   └── index.md
      ├── Japanese_setup
      │   ├── featured.jpg
      │   └── index.md
      ..........
    #+end_src

    先ほどのスクリプトは，このフォルダ構成への移行を自動化してくれる．これをgitでクローンする．

    #+begin_src sh
      $ cd /Data/hoge
      $ ls
      Taipapablog
      $ git clone https://github.com/sourcethemes/academic-scripts.git
      Cloning into 'academic-scripts'...
      remote: Enumerating objects: 27, done.
      remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27
      Unpacking objects: 100% (27/27), done.
      $ ls
      Taipapablog
      academic-scripts
    #+end_src
    このacademic-scriptsの中身を見ると，
    #+begin_src sh
      $ cd academic-scripts/
      $ ls
      LICENSE.md
      README.md
      refactor-homepage-sections-to-bundles.sh*
      refactor-pages-to-page-bundles.sh*
      refactor_page_bundles_to_pages.sh*
      $ less refactor-pages-to-page-bundles.sh
      #!/bin/sh

      # Helps migrate from v2.4.0 to v3.0.0
      #
      # Refactor a page named `X.md` to `content/<section>/X/index.md` to use the
      # new page bundles and featured image system
      #
      ..........
      $ less refactor-homepage-sections-to-bundles.sh
      #!/usr/bin/env bash

      # Helps migrate from v4.1 to v4.2
      #
      # Refactors homepage sections named `content/home/X.md` to `content/home/X/index.md`,
      # treating homepage sections as headless page bundles in Hugo.
      #
      # - E.g. an About section named `content/home/about.md` is converted to `content/home/about/index.md`
      ..........
    #+end_src

    という具合に，確かに，pageからpage bundlesへの移行を自動でやってくれるようになっている．そこで，これまでのブログをTaipapablog_OLDとして保存し，そのポスト（投稿記事）にこのスクリプトを適用する．その後，これらの記事を全て新しい方のTaipapablogのpostにコピーする．


    #+begin_src sh
      $ cd /Data/hoge
      $ ls
      Taipapablog
      Taipapablog_OLD
      academic-scripts
      $ cd Taipapablog_OLD/
      $ pwd
      /Data/hoge/Taipapablog_OLD
      $ ../academic-scripts/refactor-pages-to-page-bundles.sh
      ./content/posts/annotation.md -> ./content/posts/annotation/index.md
      ./content/post/org-html-export-theme.md -> ./content/post/org-html-export-theme/index.md
      ./content/post/org-mode_paper_2.md -> ./content/post/org-mode_paper_2/index.md
      ..........
      $ cp -a content/post/* ../Taipapablog/content/post/
   #+end_src

   以降の作業は全て，新しい方のTaipapablog directoryで行う．こちらのcontent/home/にも先ほどのスクリプトのホームページセクション用のものを適用しておいた．こちらは不要かもしれない．

    #+begin_src sh
      $ ../academic-scripts/refactor-homepage-sections-to-bundles.sh
      ./content/home/search.md -> ./content/home/search/index.md
      ./content/home/hero_carousel.md -> ./content/home/hero_carousel/index.md
      ./content/home/hero.md -> ./content/home/hero/index.md
    #+end_src

    これにより，/Data/hoge/Taipapablog/content/posts/*.mdや/Data/hoge/Taipapablog/content/home/.mdが，先ほどtreeで示したようなディレクトリ構造になる．

    ここから先は，config/, content/, content/home/, content/post/の中身を弄って，アップデートする前と同じになるように修正していく．私は，blogをhugoのmarkdown自体はほとんど弄ることなく，org-modeのパッケージであるox-hugoで書いているので，そちらを中心に述べる．

**** Front matter
     - content/home/には，demo, experienceなど多くのwidgetが入っているが，ほとんど使用してないので，それぞれのindex.mdのfront matterの最初の方にあるactive = trueを *active = false* にする．
     - 上記のスクリプトを適用した際に，headless = true  # This file represents a page section. が二重になることがあったので，余分な部分は全て削除した．
     - 新規ポストを投稿する際に，page bundlesの形式になるようにするために，propertiesに *EXPORT_HUGO_BUNDLE* を使用する．詳細は次節で述べる．
     - *subtitle* を使用するのが可能となった．もしかして以前から？　以下のように，ox-hugoでpropertiesに追加すれば良い．
       #+begin_src lisp
         :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugoとacademic テーマのアップデート"
       #+end_src

**** [[https://sourcethemes.com/academic/docs/managing-content/#featured-image][Featured image]]
     - 各ポストの冒頭に掲げていた画像は，アップデート前は明示的に場所と名前を指示しないといけなかったが，アップデート後はPage Bundlesとなり，同じフォルダにfeatured.jpgとして置いておけば，自動的にその記事の冒頭に表示されるようになる．各画像の移動が面倒であったが，今後は楽になりそう．．．(^^
     - ox-hugoから，Page Bundlesとしてexportするためには，propertiesに *EXPORT_HUGO_BUNDLE* を使って以下のように書けば，Front Matterとしてexportされる．2個目の項目追加からは，*EXPORT_HUGO_BUNDLE+* とする．
       #+begin_src lisp
         :PROPERTIES:
         :EXPORT_HUGO_BUNDLE: how-to-upgrade-hugo-and-academic-theme
         :EXPORT_FILE_NAME: index
         :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugoとacademic テーマのアップデート"
         :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Ancient greek pottery, Musée du Louvre"))
       #+end_src
     - Featured imageをどのような大きさで表示するかについては，上述のリンク先に説明がある．
       #+begin_src sh
         # Featured image
         # To use, place an image named `featured.jpg/png` in your page's folder.
         # Placement options: 1 = Full column width, 2 = Out-set, 3 = Screen-width
         # Focal point options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
         # Set `preview_only` to `true` to just use the image for thumbnails.
       #+end_src
       とりあえずは，旧記事に合わせて，スクリーン幅となるplacement = 3とした．ox-hugoでのpropertiesで上述のように指定する．captionのつけ方も上記の通り．

**** Recent Postsのサマリが長すぎる！
     Home ページの下方には，Recent Postsがあり，最近の記事のサマリが画像とともに表示される．この表示形式は以下のように5種類が選べる（[[https://sourcethemes.com/academic/docs/page-builder/#view][View]]）．

     #+begin_src sh
       Several widgets have a view option to let you choose the layout of the widget. The following layouts are available:

       1 = List (previously Simple)
       2 = Compact (previously Stream)
       3 = Card (previously Detailed)
       4 = Citation (previously APA and MLA), only available for publications
       Optionally, edit the value of citation_style in params.toml to APA or MLA
       5 = Showcase (large images), only available for projects
     #+end_src

     この中から，以前のversionに一番近い 3，つまり，カード形式を選択した．しかし，画像のcropがイマイチで，しかもサマリがサマリと言えないくらいに長い．updateする前のフォーマットが気に入っていたので，この変化は残念．[[https://sourcethemes.com/academic/docs/managing-content/#create-a-blog-post][Create a blog post]] に記載されているように， *&lt;!--more-->* を記事本文の適当なところに挿入して，サマリの長さを調整することにした．
**** Recent Postsの画像表示のフォーマット変更
***** References
      - [[https://discourse.gohugo.io/t/crop-less-with-focal-point/15387][Crop Less with Focal Point]]
      - [[https://gohugo.io/content-management/image-processing/][Image Processing]]
      - [[https://gohugo.io/templates/partials/][Partial Templates]]
      - [[https://ottan.xyz/hugo-template-partial-define-block-20190101/][Hugoのテンプレート構文「template」「partial」「block」「define」のわかりやすい解説]]

     上述のfeatured imageを記事のheader imageとして表示する際のサイズやクロップのやり方が気に入らないので，変更することにした．cardでacademic themeに全文検索をかけると， *li_card.html* というファイルが見つかり，どうやら，これが，カード形式のテンプレート（[[https://gohugo.io/templates/partials/][Partial Templates]]）と推察され，これを変更すれば良いと気がついた．
     1. /Data/hoge/Taipapablog/layouts/ に *partials* directoryを作成し，/Data/hoge/Taipapablog/themes/academic/layouts/partials/ *li_card.html* をコピーする．

     2. Hugoは以下の優先順位で読み込まれる．（[[https://gohugo.io/templates/partials/#partial-template-lookup-order][Partial Template Lookup Order]]）

         1. layouts/partials/*<PARTIALNAME>.html
         2. themes/<THEME>/layouts/partials/*<PARTIALNAME>.html
      したがって，1にコピーしたli_card.htmlを弄れば，それが優先されることになる．

     3. 以下のように，li_card.htmlの53行目を変更する．
         #+begin_src sh
           .....
           52 {{ with $resource }}
           53 {{ $image := .Fill (printf "918x517 q90 %s" $anchor) }}
           54 <a href="{{ $item.RelPermalink }}">
           .....

           ----->
           .....
           53 {{ $image := .Resize "900x"  }}
           .....
         #+end_src

      これは， [[https://gohugo.io/content-management/image-processing/][Image Processing]] に解説されているように，FillをResizeに変更しただけであるが，ほぼ望み通りの画像表示となった．

**** [[https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts][Alerts]]
     - これは今回見つけた新たな小道具
     - ノート，ヒント，警告などに有用．
     - いくつか方法はあるが，shortcodeを使うのが一番簡単．\
     ｛{% alert note %}}\
       A Markdown aside is useful for displaying notices, hints, or definitions to your readers.\
       ｛{% alert  %}}\
     により，（最初の *"{"* はescapeできないので全角の *"｛"* にしていることに注意）
    {{% alert note %}}
     A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
     {{% /alert %}}
     となる．

      ｛{% alert warning %}}\
       A Markdown aside is useful for displaying notices, hints, or definitions to your readers.\
       ｛{% /alert %}}\
       は，以下のようになる．（最初の *"{"* はescapeできないので全角の *"｛"* にしていることに注意）\
       {{% alert warning %}}
       A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
       {{% /alert %}}
       また，使ってみよう．
**** WARN ..... found no layout file for "CSS" for "home"
     アップデートしていじっているうちに，
       {{% alert warning %}}
     WARN 2019/08/23 00:36:28 found no layout file for "CSS" for "home": You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
       {{% /alert %}}
     のような警告が出るようになった（早速使ってみた）．サイト自体のビルドはできて，実害はないが，気持ちが悪いので，ネットを探ると，academicの作者のGitHub pageに，そのものズバリの [[https://github.com/gcushen/hugo-academic/issues/1060][Featurette widget does not change from example #1060]] があった．
     #+begin_quote
     You have updated to the unreleased version. You'll need to remove the "CSS" output entry from config.Toml
     #+end_quote
     ということなので，以下のように作業した．
     #+begin_src sh
       $ vi /Data/hoge/Taipapablog/config/_default/config.toml
       .....
       45 [outputs]
       46   home = [ "HTML", "RSS", "JSON", "WebAppManifest", "CSS"]
       47   section = [ "HTML", "RSS" ]
       .....
       ----->
       .....
       45 [outputs]
       46 #  home = [ "HTML", "RSS", "JSON", "WebAppManifest", "CSS"]
       47   home = [ "HTML", "RSS", "JSON", "WebAppManifest"]
       48   section = [ "HTML", "RSS" ]
       .....
     #+end_src
     46行目の"CSS"を削除するだけで，警告が出なくなった．(^o^)

   見え方にまだまだ不満はあるが，こんなところだろうか．アップデートしてから，貼り付けた画像の上にマウスを持っていくと，拡大鏡のアイコンになり，クリックすると2段階で拡大されるようになった．他にも変化はあるようだが，全然活用できていない．ぼちぼち触っていって，面白いことがあれば，また，まとめてみよう．．．

*** 追記
    githubにdeployした時に，以下のようなエラーが生じた．
    #+begin_src lisp
      warning: adding embedded git repository: themes/academic
      hint: You've added another git repository inside your current repository.
      hint: Clones of the outer repository will not contain the contents of
      hint: the embedded repository and will not know how to obtain it.
      hint: If you meant to add a submodule, use:
      hint:
      hint: 	git submodule add <url> themes/academic
      hint:
      hint: If you added this path by mistake, you can remove it from the
      hint: index with:
      hint:
      hint: 	git rm --cached themes/academic
      hint:
      hint: See "git help submodule" for more information.
    #+end_src
    エラーは吐くものの，deployはできて，ウェブでサイトも見られるので，疲れたし（笑），しばらくは，このままで行くことにする．themeのインストールは，submoduleで行うべきだったと，今更にして気がついた．次回アップデートする時にやってみよう．．．(^^;;;

   で，結局，気になって，academic themeのインストールをやり直した（笑）．次回の記事（[[../how-to-update-hugo-and-academic-theme-part2][How to update hugo and academic theme (Part2)]]）を参照されたい．


** COMMENT How to update hugo and academic theme (Part2) :hugo:academic:theme:upgrade:ox_hugo:org_mode:emacs:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-update-hugo-and-academic-theme--part2
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-08-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugoとacademic テーマのアップデート　その2"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Paris"))
   :END:

   前回（[[../how-to-upgrade-hugo-and-academic-theme][How to update hugo and academic theme (Part 1)]]）にhutoとacademicのアップデートをまとめたが，やはり，githubにdeployするときのエラーが，どうしても気になる．そこで，今回は，Academic themeのインストールを一からやり直すことにした．   Hugoとox-hugoのインストールやアップデートは前回の記事（[[../how-to-upgrade-hugo-and-academic-theme][How to update hugo and academic theme (Part 1)]]）を参考にしていただきたい．   <!--more-->

   {{{toc(2)}}}

*** References
    - [[https://sourcethemes.com/academic/docs/install/][Install]] Academicご本家の解説
    - [[https://sourcethemes.com/academic/docs/update/][Update]] Academicご本家の解説

*** COMMENT Git submodule
    - [[https://qiita.com/sotarok/items/0d525e568a6088f6f6bb][Git submodule の基礎]]
    - [[https://qiita.com/kinpira/items/3309eb2e5a9a422199e9][Git submoduleの押さえておきたい理解ポイントのまとめ]]
    - [[https://www.sejuku.net/blog/73151][これならわかる！git submoduleでサブモジュールを追加する方法]]
    - [[https://www.d-wood.com/blog/2014/05/22_6257.html][git submodule は癖がすごいとの噂だったが素直につきあっていけそうという話]]
    - [[http://vdeep.net/git-submodule][Gitのサブモジュール機能を使ってプロジェクトを管理してみよう]]

*** Install Academic Kickstart with Git
   やはり，公式ドキュメントに従うのが良いだろうと考え，上記のリンク先のInstallの解説の通りにしてみた．git submoduleを使うので，よく分からんと敬遠していたのだが，やってみると（作業自体は）簡単であった． [[https://qiita.com/sotarok/items/0d525e568a6088f6f6bb][Git submodule の基礎]] によれば，「git submodule は、外部の git リポジトリを、自分の git リポジトリのサブディレクトリとして登録し、特定の commit を参照する仕組み」である．

   +1. まず，Academic Kickstart repository を自分のウェブサイトを作るためにクローンする．+

       {{% alert note %}}
       またも間違っていた．上述の公式ドキュメントにはちゃんと，Fork the Academic Kickstart repository to create a new website と書いてあったのに読み過ごしていた．
       {{% /alert %}}


1. ということで，まず，[[https://github.com/sourcethemes/academic-kickstart#fork-destination-box][academic-kickstart]] に行って，右上の *Fork* ボタンを押して，自分のgithub pageにacademic-kickstartのrepositoryを作成する．

2. ついで，この自分のgithub pageのforkをgit cloneで自分のサイトにクローンする．

     #+begin_src sh
     $ pwd
     /Data/MyBlog
     $ git clone https://github.com/taipapamotohus/academic-kickstart Taipapablog
     Cloning into 'Taipapablog'...
     remote: Enumerating objects: 579, done.
     remote: Total 579 (delta 0), reused 0 (delta 0), pack-reused 579
     Receiving objects: 100% (579/579), 163.92 KiB | 480.00 KiB/s, done.
     Resolving deltas: 100% (179/179), done.
     #+end_src

3. ついで，themeをsubmoduleでinitializeする．
     #+begin_src sh
       $ cd Taipapablog
       $ pwd
       /Data/MyBlog/Taipapablog
       $ git submodule update --init --recursive
       Submodule 'themes/academic' (https://github.com/gcushen/hugo-academic.git) registered for path 'themes/academic'
       Cloning into '/Data/MyBlog/Taipapablog/themes/academic'...
       Submodule path 'themes/academic': checked out '32b6145c06835e33668100105ac1835593cf8d72'
       $ ls
       LICENSE.md          config/             netlify.toml        themes/
       README.md           content/            scripts/            update_academic.sh*
       academic.Rproj      data/               static/             view.sh*
       $ ll
       total 72
       drwxr-xr-x  18 kohkichi  admin   576 Aug 24 16:34 .
       drwxr-xr-x  18 kohkichi  admin   576 Aug 24 16:35 ..
       -rw-r--r--   1 kohkichi  admin   298 Aug 24 16:34 .editorconfig
       drwxr-xr-x  13 kohkichi  admin   416 Aug 24 16:34 .git
       -rw-r--r--   1 kohkichi  admin    15 Aug 24 16:34 .gitignore
       -rw-r--r--   1 kohkichi  admin   106 Aug 24 16:34 .gitmodules
       -rw-r--r--   1 kohkichi  admin  1078 Aug 24 16:34 LICENSE.md
       -rw-r--r--   1 kohkichi  admin  2671 Aug 24 16:34 README.md
       -rw-r--r--   1 kohkichi  admin   258 Aug 24 16:34 academic.Rproj
       drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 config
       drwxr-xr-x   7 kohkichi  admin   224 Aug 24 16:34 content
       drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 data
       -rw-r--r--   1 kohkichi  admin   380 Aug 24 16:34 netlify.toml
       drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 scripts
       drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 static
       drwxr-xr-x   3 kohkichi  admin    96 Aug 24 16:34 themes
       -rwxr-xr-x   1 kohkichi  admin  1628 Aug 24 16:34 update_academic.sh
       -rwxr-xr-x   1 kohkichi  admin    49 Aug 24 16:34 view.sh
     #+end_src

   う〜む，実質2行のコマンドで終わり，これで，あとは，hugo serverと叩いて，ブラウザで，localhost:1313を開けば，デモ用のサイトが立ち上がる．非常に簡単である．自分のGitHub pageを持っていれば，2-3分でできてしまう．

*** Migrate Content
    前回（[[../how-to-upgrade-hugo-and-academic-theme][How to update hugo and academic theme (Part 1)]]）にすでに投稿記事などはスクリプトなどを使ってアップデートしてあるし，設定ファイルもアップデート済みである．そちらのディレクトリから，config, content (home, postなど主要な部分を含む), layouts, static, assetsなどを，今回新たに作成したTaipapablog directoryにコピーすれば良い．コピー後にもう一度Taipapablog directoryの中身を見ると，
    #+begin_src sh
      $ ls
      LICENSE.md                   layouts/
      README.md                    netlify.toml
      Taipapablog-20180816_v2.org  public/
      academic.Rproj               resources/
      assets/                      scripts/
      config/                      static/
      content/                     themes/
      data/                        update_academic.sh*
      deploy.sh*                   view.sh*
    #+end_src
    こんな風になっているはずである．（Taipapablog-20180816_v2.orgは，ox-hugoで書いたこのブログの原稿）

これで，hugo root directoryで，hugo serverを叩くと，元のブログが立ち上がる．

あれ，今回は簡単にできてしまった．既に，前回で，Page Bundlesやfeatured imageに合わせて修正していたから，本当に流し込むだけであった．さて，これで，deployしてもエラーが出なければOKである．

   +う〜ん，deployはできて，前回のエラーも消えたけど，また，別のエラーが出る．．．gitは苦手だ．．．(ToT)+

   #+begin_src sh
     remote: Permission to sourcethemes/academic-kickstart.git denied to taipapamotohus.
     fatal: unable to access 'https://github.com/sourcethemes/academic-kickstart.git/': The requested URL returned error: 403
   #+end_src

   +これって，master repositoryを上書きしようとしてるな．deploy scriptを直さないといけない．．．+

   +ウェブからは見えてるので，とりあえず，後日に見直してみよう．．．(^^;;;+

   #+begin_src sh
     Enumerating objects: 546, done.
     Counting objects: 100% (546/546), done.
     Delta compression using up to 8 threads
     Compressing objects: 100% (503/503), done.
     Writing objects: 100% (530/530), 131.20 MiB | 8.04 MiB/s, done.
     Total 530 (delta 20), reused 0 (delta 0)
     remote: Resolving deltas: 100% (20/20), completed with 5 local objects.
     To https://github.com/taipapamotohus/academic-kickstart
     98a99bf..eb43ba1  master -> master
   #+end_src

   Forkを行ってから，クローンするようにするとdeployの際にエラーは出なくなった．自分のサイトだから書き換えできるので，当たり前である．．．(^^;;;

   前回，今回と間違ったことばかりやってしまったが，後日にまた同じ轍を踏まないように，それも含めて，全て記録するようにした．やっとアップデートが終わった．gitは奥が深い（自分が無知なだけ．．．）

** COMMENT memo
    [[https://sourcethemes.com/academic/updates/v4.4.0/][Version 4.4 (July 2019)]]

    [[https://sourcethemes.com/academic/docs/customization/#customize-style-css][Customize style (CSS)]]

    [[https://sourcethemes.com/academic/docs/customization/#override-a-template][Override a template]]

    [[https://gohugo.io/templates/lookup-order/][Hugo's Lookup Order]]
    - [[https://gohugo.io/templates/lookup-order/#examples-layout-lookup-for-regular-pages][Examples: Layout Lookup for Regular Pages]]

    [[https://github.com/gcushen/hugo-academic/issues/557][Fixed size icon/tile for all project preview images on the homepage #557]]


**** [[https://gohugo.io/hugo-pipes/scss-sass/][SASS / SCSS]]
     Hugo 0.46からSASS/SCSSがサポートされた．


** COMMENT Treemacs and Projectile          :emacs:projectile:treemacs:helm:project:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: Treemacs_Projectile
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-08-25
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "a tree layout file explorer for Emacs and Project Interaction Library for Emacs"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Sforza monument, Nagoya"))
   :END:

   MacのFinderに相当するのは，EmacsではDiredであろう．しかし，なにかのプロジェクトに関わる文書群を管理するということになると，Diredでは力不足である．というか目的が違う．これにぴったりなのが，treemacsであり，そのバックボーンになるのが，Projectileである．これらは，プログラマーでもない自分には必要ないものと思っていたのだが，このblogを書くのに使用しているHugoとそのテーマであるacademicをアップデートする際に，非常に役に立ったので，いまだによく分かっていない自分自身のために書き留めておく．  <!--more-->

   {{{toc(2)}}}

*** Projectile
**** References
     - [[https://github.com/bbatsov/projectile][projectile]]   ご本家
     - [[https://www.projectile.mx/en/latest/][Projectile: The Project Interaction Library for Emacs]]  ご本家の解説
     - [[http://blog.aqutras.com/entry/2016/06/15/210000][よく使っているEmacsの拡張]]
     - [[https://tech.camph.net/projectile-and-helm/][ProjectileとHelm]]
     - [[http://tuhdo.github.io/helm-projectile.html][Exploring large projects with Projectile and Helm Projectile]]

   以下はProjectileご本家の解説からの抜粋
     - 「外部への依存関係を導入することなく，プロジェクトを操作する便利な一連の特徴を提供することを目的とする」そうである．これだけでは何のこっちゃである．
     - 「例えば，プロジェクトの文書を見つける機能はGNUのfindを使用せずに純粋にEmacs Lispによって実装されている」ということで，そういうことかと思う．
     - プロジェクトとは，特定のファイルを含むフォルダーのこと
     - version-controlであるgit, muecurial, bazaarなどのrepoはデフォルトでプロジェクトとみなされる．

**** Installation
     以前の記事（[[../prelude_install][Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）]]）に書いたように，私は，Preludeを導入しているが，これにより，prejectileのインストールと設定は既に終わっている．マニュアルで入れる場合は，以下のようにinit.orgに書き込めば良い．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package projectile
         :ensure t
         :config
         (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
         (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
         (projectile-mode +1))
       ,#+end_src
     #+end_src

**** Usage
     多分，このソフトは解説を読んでいても，有り難みがさっぱり分からない（私がそうであった）．gitを使って開発をしている人とかにはすごく役に立つと思う．では，プログラマーでもない私の様な素人が使ってなんの役に立つのかと思われるであろうが，これが，案外便利なのである．
***** Basic Usage
      個人的に実際に使うのは，以下の4つぐらい．
      - current project内のファイルを検索: C-c p f
      - current project内のディレクトリを検索: C-c p d
      - current project内のディレクトリ内のファイルを検索: C-c p l
      - current project内のファイルの中身をgrepで検索する: C-c p s g

      さらに，[[https://github.com/justbur/emacs-which-key/tree/42a25055163141165aa0269dbca69735e704825c][which-key]] を導入しておくと，C-c pと打って，「次，なんだっけ？」と考えて1秒経つうちに，下図の様にメニューが下のバッファに表示される．私は，以前に書いた様にPreludeを導入しているが（[[../prelude_install][Emacsの設定（その1）Preludeの導入（2018年10月9日修正，2019年6月1日追記）]]），Preludeの導入により，which-key はインストールと設定が終わっている様であり，何もせずとも，下図の様になった．これは，/Data/MyBlog/TaipapablogをDiredで開けて，そこで，C-c p と打ってから1秒が経過した時の様子である．これでkey-bindは，C-c p まで覚えておけば良いことがわかった．

     #+attr_html: :width 80% :target _self
     [[./static/img/Projectile-which-key.jpg]]

      例えば，あるディレクトリ内の文書を比較したりコピペしたりしたいときに，すぐに探し出せるのが便利である．文書名を忘れていても，あるキーワードを含む文書を探すということも簡単にできる（current project内のファイルの中身をgrepで検索する: C-c p s g）．そんなことは，別に，Finderのfindを使うなり，Terminalでgrepなりmdfindすればできるわけだが，何も面倒なコマンドを打たずとも，特定のproject，つまり，特定のディレクトリ内だけで検索ができるというのが肝である．これにより，一瞬で検索は終わるし，すぐにそのファイルに飛べる．後述するtreemacsをインストールせずとも，projectileだけでも，かなり，便利になると思う．例えば，下の画像は，Taipapablogというdirectoryの中にあり，_index.mdを名前に含むファイルを検索しているところである．下のバッファにズラズラと該当するファイルが並んでおり，C-jするとその中身が上のバッファに表示される．リターンすれば，そのファイルが開く．下のバッファでは，arrow keyで上下すれば別のファイルに行けて，そこでC-jすれば，その中身が見られる．Returnするまではこれを繰り返すことができる．

     #+attr_html: :width 80% :target _self
     [[./static/img/Projectile-Find.jpg]]

プログラミングをやっているわけではなく，論文を書くのにEmacsを使用している私のようなレベルの人間にとっても，一つのプロジェクト内のファイルを縦横無尽に検索や閲覧ができるのは，かなり，有用である．以下のtreemacsと組み合わせると，さらに便利になる（ような気がしている　笑）．最近のEmacsは画像でもpdfでも閲覧できるので，応用範囲はかなり広い．



*** Treemacs
    一見，neotreeの様に見えるが，特定のprojectに割り当てられている様な仕組みになっている．分かりにくいが，実際に使ってみれば便利である．treemacs-projectileをインストールすることにより，上述のprojectileと統合した状態で使えて，より便利になる．

**** References
     - [[https://github.com/Alexander-Miller/treemacs][Treemacs - a tree layout file explorer for Emacs]]  ご本家
     - [[https://blog.deltabox.site/post/2019/04/emacs_config_in_march/][Emacsの設定を色々いじった -その１-]]
     - [[https://blog.jft.rocks/emacs/treemacs-icons.html][Using all-the-icons for Treemacs]]

**** Installation
     ご本家の方法を丸写ししておく．以下をinit.orgに書き込めば良い．デフォルト設定なので，これ全部写す必要はなさそうだが．．．

    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (use-package treemacs
        :ensure t
        :defer t
        :init
        (with-eval-after-load 'winum
          (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
        :config
        (progn
          (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
                treemacs-deferred-git-apply-delay      0.5
                treemacs-display-in-side-window        t
                treemacs-eldoc-display                 t
                treemacs-file-event-delay              5000
                treemacs-file-follow-delay             0.2
                treemacs-follow-after-init             t
                treemacs-git-command-pipe              ""
                treemacs-goto-tag-strategy             'refetch-index
                treemacs-indentation                   2
                treemacs-indentation-string            " "
                treemacs-is-never-other-window         nil
                treemacs-max-git-entries               5000
                treemacs-missing-project-action        'ask
                treemacs-no-png-images                 nil
                treemacs-no-delete-other-windows       t
                treemacs-project-follow-cleanup        nil
                treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
                treemacs-recenter-distance             0.1
                treemacs-recenter-after-file-follow    nil
                treemacs-recenter-after-tag-follow     nil
                treemacs-recenter-after-project-jump   'always
                treemacs-recenter-after-project-expand 'on-distance
                treemacs-show-cursor                   nil
                treemacs-show-hidden-files             t
                treemacs-silent-filewatch              nil
                treemacs-silent-refresh                nil
                treemacs-sorting                       'alphabetic-desc
                treemacs-space-between-root-nodes      t
                treemacs-tag-follow-cleanup            t
                treemacs-tag-follow-delay              1.5
                treemacs-width                         35)

          ;; The default width and height of the icons is 22 pixels. If you are
          ;; using a Hi-DPI display, uncomment this to double the icon size.
          ;; (treemacs-resize-icons 44)

          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode t)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null (treemacs--find-python3))))
            (`(t . t)
             (treemacs-git-mode 'deferred))
            (`(t . _)
             (treemacs-git-mode 'simple))))
        :bind
        (:map global-map
              ("M-0"       . treemacs-select-window)
              ("C-x t 1"   . treemacs-delete-other-windows)
              ("C-x t t"   . treemacs)
              ("C-x t B"   . treemacs-bookmark)
              ("C-x t C-t" . treemacs-find-file)
              ("C-x t M-t" . treemacs-find-tag)))

      ;; (use-package treemacs-evil
      ;;   :after treemacs evil
      ;;   :ensure t)

      (use-package treemacs-projectile
        :after treemacs projectile
        :ensure t)

      (use-package treemacs-icons-dired
        :after treemacs dired
        :ensure t
        :config (treemacs-icons-dired-mode))

      (use-package treemacs-magit
        :after treemacs magit
        :ensure t)
      ,#+end_src
    #+end_src

**** Usage
     上記設定により，projectileと統合した状態で使用することになる．従って，git initしたdirectoryや，git cloneしたdirectoryが対象となる．それらに該当しなければ，directory内に.projectileという 空ファイルを作成すれば良い．まず，最初は， *M-0* と叩いて，Treemacsを開き，C-c C-p a (treemacs-add-project-to-workspace) でプロジェクトをtreemacsのworkspaceに追加する．下図は，Taipapablogというdirectoryを開けて，そこから2つのファイルを横に並べて開いたところである．

     左のtreemacsのバッファの行番号114のさらに左のfringeに小さな青いマークがついている．行のハイライトとともに現在アクティブなバッファがどれかを示している．複数のプロジェクトや複数のディレクトリに同じ名前のファイルがあるときなどは，今作業しているファイルが，どこにあるファイルがわからなくなって困ることがある（少なくとも私は）．そのようなときに，このfringe indicatorは有用である．

     #+attr_html: :width 100% :target _self
     [[./static/img/Treemacs-fringe.jpg]]

ところで，上述したようなキーバインドを覚える必要はない．treemacsのバッファにいるときに，？を叩けば，下図のごとく，下にヘルプバッファが開く．楽チンである．ファイルやディレクトリやプロジェクトの追加，削除，名前の変更などはもちろん網羅しており，ファイルの開け方も横に並べたり，縦に並べたりと色々できるようになっている．

     #+attr_html: :width 100% :target _self
     [[./static/img/Treemacs-help.jpg]]

     使い始めたときに問題となったのは，treemacsのコマンドはtreemacsのバッファにいるときでないと効かないことである（projectileのコマンドは何処でも効く）．いちいち，マウスでtreemacsのバッファをクリックしてそちらに移ってからコマンドを打たないといけないようではやってられない．これでは，Macのfinderと同じである．そこで，ご本家のサイトをよく読むと， *Winum & ace-window compatibility* と書いてある．上述したインストールのためのuse-packageの設定のconfigにも， *(define-key winum-keymap (kbd "M-0") #'treemacs-select-window)* と書いてある．つまり，横や縦に並べたバッファ間の移動は， *C-x o* の後に行きたいバッファの番号を打てばよく，treemacsのバッファに戻るには， *M-0* を打てば良い．下図は，先ほどの図の状態で， *C-x o* を打った時の様子である．茶色の小さな数字がそれぞれのバッファに割り当てられた番号である．

なお，winumのインストールについては，[[https://github.com/deb0ch/emacs-winum][emacs-winum]] を参照されたい．

     #+attr_html: :width 100% :target _self
     [[./static/img/Treemacs-winum.jpg]]

     とは言うものの，やはり，マウスを使う方が便利なこともある．Treemacsはmouse interfaceにも完全に対応しており，右クリックでpopup-menuが出るようになっている（下図参照）．よくできている．

     #+attr_html: :width 100% :target _self
     [[./static/img/Treemacs-mouse.jpg]]

    まだ使い始めたばかりであり，projectileとtreemacsについて，まだまだ理解しないといけないことがたくさんあるが，日常的に使用できるところまではなんとかなったかな．．．

** COMMENT How to update hugo and academic theme (Part3) :hugo:academic:theme:upgrade:ox_hugo:org_mode:emacs:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-update-hugo-and-academic-theme--part3
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-09-01
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Hugoとacademic テーマのアップデート　その3"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Beyoğlu, Istanbul"))
   :END:

   先日，ブログのアップデートについて2回に分けてまとめたが（[[../how-to-upgrade-hugo-and-academic-theme][How to update hugo and academic theme (Part1)]], [[../how-to-update-hugo-and-academic-theme-part2][How to update hugo and academic theme (Part2)]]），読み直してみるとhugoとacademic themeの全体的なアップデートのことで終わっていて，具体的な内容のアップデートについてはあまり書いていないことに気がついた．そこで，今回はその辺の細かいところについて，後日の自分のためにも，まとめておくことにした．今回の内容に関しては，ox-hugoのレベル，つまり，org-mode file ではどうすれば良いのか分からず，直接マークダウンファイルを弄らざるを得ない事が多かった．

      {{{toc(2)}}}
*** 自己紹介
    - [[https://sourcethemes.com/academic/docs/get-started/#introduce-yourself][Introduce yourself]] academicのご本家の解説
    - リンク先に書いてあるが，content/authors/admin/_index.mdに自分のプロファイルを書く．不要な部分は#で全てコメントアウトすれば良い．
    - avatorを表示するには，画像の名前をavatorとしてcontent/authors/admin/に保存する．例として元々あった画像と置き換えれば良い．

*** Widget in Academic
    - [[https://sourcethemes.com/academic/docs/page-builder][Getting Started With the Page Builder]] ご本家の解説
    - widgetとは．．．ウィジェットである．(^^;;; ブログを組み立てる部品のようなもの．上記のリンク先に詳細に解説されている．例えば， *About* widjetは読者にブログ主を紹介するためのものである．ただし，実際のプロファイルの内容は前述のようにcontent/authors/admin/_index.mdに記載されている． このブログのように，投稿記事を載せているだけの場合は，ほとんどのwidgetは不要である．
    - 不要なwidgetは，content/home/のディレクトリから削除すれば良い．参考のために残して置きたければ， それぞれのindex.mdのfront matterの最初の方にある active = true を *active = false* とすれば良い．下図は， content/home/featured/index.mdのfeatured widget の場合である．これで featured widget は表示されなくなる．
    #+begin_src sh
      +++
      # A Featured Publications section created with the Featured Content widget.
      # This section displays publications from `content/publication/` which have
      # `featured = true` in their front matter.

      widget = "featured"  # See https://sourcethemes.com/academic/docs/page-builder/
      headless = true  # This file represents a page section.
      active = false  # Activate this widget? true/false
      weight = 80  # Order that this section will appear.
    #+end_src

*** home pageの最初の画像
    ブログの最初のページに掲げる画像だが，アップデート前は， *hero widget* で設定していた．具体的には，content/home/hero.mdのなかで，front matterに

    #+begin_src sh
      +++
      # Hero widget.
      widget = "hero"
      active = true
      .....
      overlay_img = "headers/hogehoge.jpg"  # Image path relative to your `static/img/` folder.
      .....
    #+end_src

    と書いていた．

    academicをアップデート後は，画像の一部しか表示されなくなったために，content/home/hero/index.mdのfront matterに *active = false* と書いて，hero widget自体を無効にした．代わりに，content/home/slider/index.md のfront matterに　
#+begin_src sh
  +++
  # Slider widget.
  widget = "slider"  # See https://sourcethemes.com/academic/docs/page-builder/
  headless = true  # This file represents a page section.
  active = true  # Activate this widget? true/false
  weight = 1  # Order that this section will appear.

  # Slide interval.
  # Use `false` to disable animation or enter a time in ms, e.g. `5000` (5s).
  interval = false

  # Slide height (optional).
  # E.g. `500px` for 500 pixels or `calc(100vh - 70px)` for full screen.
  height = "400px"

  # Slides.
  # Duplicate an `[[item]]` block to add more slides.
    [[item]]
  title = "完璧な秋の日"
  content = "とりあえず備忘録として :rocket:"
  #  align = "center"  # Choose `center`, `left`, or `right`.

    # Overlay a color or image (optional).
    #   Deactivate an option by commenting out the line, prefixing it with `#`.
  #  overlay_color = "#666"  # An HTML color value.
  overlay_img = "hogefuga.jpg"  # Image path relative to your `static/img/` folder.
  #  overlay_filter = 0.5  # Darken the image. Value in range 0-1.
  .....
#+end_src

    と書いて， *slider widget* を使うようにしたところ，ほぼ望み通りの画像表示となった（画像自体はstatic/img/に置いた ）．

*** Day (light) and night (dark) mode
    - [[https://themes.gohugo.io/theme/academic/post/getting-started/][Academic: the website builder for Hugo]] こちらに書いてある機能
    アップデートにより，今流行りのdark modeと通常のlight modeを，読者が右上のsun/moon iconをクリックすることで切り替えられるようになった．設定は，config/_default/params.tomlの中で，以下のように *day_night = true* とすれば良い．
    #+begin_src sh
      .....
      # Enable users to switch between day and night mode?
      day_night = true
      .....
    #+end_src

   \
 今回は本当に殴り書きメモのような内容．それにhugoに関することは全然なくて，academicのことしか書いてない．看板に偽りありだな．．．(^^;;;
** COMMENT Org-rifle                       :emacs:org_mode:org_rifle:search:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: org-rifle
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-10-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "org-mode fileの中をくまなく探してパス付きで表示する"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Samuel Beckett Bridge, Dublin"))
   :END:

   学会続きで，久方ぶりの更新である．org fileの中を検索する際に，[[../swiper_migemo][Swiper, ivy, avy, migemoによるEmacsの検索強化]]で取り上げた *swiper* を，もっぱら使用しているのだが，そうすると，ファイル内のどこにいるのかが分からなくなることがある．検索ファイルのパスなどがorg fileの中で分かる検索ソフトはないものかと探したところ，このorg-rifleが見つかった．

<!--more-->

      {{{toc(2)}}}

*** References
    - [[https://github.com/alphapapa/org-rifle][org-rifle]]  ご本家
    - [[https://dustinlacewell.github.io/emacs.d/#org7646621][helm-org-rifle]]
    - [[http://bnbeckwith.com/bnb-emacs/#orgc5aa916][Org Rifle]]  Rifle through my org-mode entries.

ご本家サイトの最初に，有名な米海兵隊信条（The Creed of a United States Marine）が，以下のように引用されている．

This is my rifle. There are many like it, but this one is mine. My rifle is my best friend. It is my life. I must master it as I must master my life.

 rifleには，「くまなく探す」という意味もあるので，この命名は，それにかけたシャレのようである．非武装平和主義が信条の私にはよく分からん．．．とにかく，詳細に書かれたご本家サイトを読めば，こんなところを読む必要はないような気もするが（笑），後日の自分のためにまとめておく．

*** Installation
    いつものように，init.orgに下記のように書き込む．
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (use-package helm-org-rifle
        :ensure t
        :after (helm org)
        :bind
        ("s-c r r" . helm-org-rifle)
        ("s-c r a" . helm-org-rifle-agenda-files)
        ("s-c r ." . helm-org-rifle-current-buffer)
        ("s-c r d" . helm-org-rifle-directories)
        ("s-c r f" . helm-org-rifle-files)
        ("s-c r D" . helm-org-rifle-org-directory)
        ("s-c o o" . helm-org-rifle-occur)
        ("s-c o a" . helm-org-rifle-occur-agenda-files)
        ("s-c o ." . helm-org-rifle-occur-current-buffer)
        ("s-c o d" . helm-org-rifle-occur-directories)
        ("s-c o d" . helm-org-rifle-occur-directories)
        ("s-c o f" . helm-org-rifle-occur-files)
        ("s-c o D" . helm-org-rifle-occur-org-directory))
      ,#+end_src
    #+end_src
    key-bindingは諸般の事情により，s-cを使うことにした（s はoption keyを意味する）．

    また， *helm-org-rifle-show-path を t にセット* することにより，org file内でのそれぞれのheadingに至るパスが表示される．（実は，デフォルトで t になっている）
*** Usage
    helm-org-rifleは，エントリーベースで結果が表示される．つまり，org fileの中のheadingとその内容が表示されるので，そこに至るパスが分かる，つまり，どこに位置しているかが分かる．これは思っていた以上に便利である．

    例えば，このブログの原稿をemacsで開いているときに，org-mode, export, wordを含む部分を探したいときは，s-c r . としてから，key wordを打てば，まず下図のようになる．下のバッファでハイライトされている部分は，最上位のheadingであるPostの下のsubheadingである「Emacsのorg-modeで論文を書く（その4：．．．」の下位に目的の部分が含まれていることを示す．

     #+attr_html: :width 80% :target _self
     [[./static/img/org-rifle-1.jpg]]

     さらに，ハイライトされている部分で，C-jと打てば，下図のように，上のバッファが該当する領域にジャンプして表示してくれる．

     #+attr_html: :width 80% :target _self
     [[./static/img/org-rifle-2.jpg]]

     もちろん，検索対象が明確に分かっていて"hogehoge.jpg"など名前も分かっているのであれば，swiperの方が便利であろう．しかし，「hogeとfugaとhogaに関連している部分はどこだったかな？」というようなときは，このorg-rifleが重宝する．

     さらにもっと色々な使い方ができるようで，該当項目のrefileも可能である．興味のある方は，tabを打ってでてくるメニューを試していただきたい．

** COMMENT org-sidebar
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: org-sidebar
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-10-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "org-modeのバッファにサイドバーを表示する"
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Christ Church Cathedral, Dublin"))
   :END:
  ついにorg-mode用のサイドバーが登場した．最近，精力的にredditに投稿しているalphapapa氏の作った文字通りorg-sidebarがそれである．最初1年ぐらい前に発表され，暫くは様子見をしていたのだが，今回の最新版では色々と改良されており，紹介することにした．なお，前回紹介した[[../org-rifle][org-rifle]]も同氏の作成したパッケージである．

  <!--more-->

  {{{toc(2)}}}

*** References
    - [[https://github.com/alphapapa/org-sidebar][org-sidebar]]  ご本家
    - [[https://www.reddit.com/r/emacs/comments/dbsxn7/finally_solving_the_lack_of_a_treeview_navigation/][Finally solving the lack of a tree-view navigation window in Org]]  redditへの投稿記事
    - [[https://github.com/alphapapa/ts.el][ts.el]]  a date and time library for Emacs

*** Installation
    いつものように，init.orgに下記のように書き込む．
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (use-package ts
        :ensure t)

      (use-package org-sidebar
        :ensure t
        :quelpa (org-sidebar :fetcher github :repo "alphapapa/org-sidebar")
        :bind
        ("<f1> C-s" . org-sidebar-tree))
      ,#+end_src
    #+end_src
    ただし，まず，ご本家サイトにある通りに後半の部分のみでorg-sidebarをインストールしようとすると，tsがないと文句を言われた．そこで，後半部分はコメントアウトした上で，前半部分を追加し，まず，tsをインストールするようにした．ついで，後半部分のコメントアウトを外して，再度org-sidebarをインストールしたところ，うまくいった．キーバインディングの残りがほとんどなく，とりあえず，sidebarのsに合わせられて，かつ，空いているところということで，org-sidebar-treeをf1 C-sに割り当てた．

*** Usage
    ご本家サイトに詳細な説明とGIF動画が掲載されている．GTD toolとしてorg-modeを全く使っていない私には， *M-x org-sidebar-tree* だけで十分役に立つことが分かった．同コマンドを打つ，あるいは， *f1 C-s* を打つと下図のような画面となる．

     #+attr_html: :width 100% :target _self
     [[./static/img/org-sidebar-1.jpg]]

  左側がtreeのwindowであり，このブログの原稿であるorg-mode fileのlevel2までのheadingが表示されている．5094行目のorg-sidebarにカーソルがあり，このheadingが選択されていることを示す．そして，右側には，このheading (org-sidebar)の内容を示すバッファが表示されている．左側のTree windowの中をカーソルで上下して目的のheadingに行きReturnを叩けば，右側にそのheadingの内容のみが表示され，かつ，カーソルがそちらに移る．他のheadingは表示されず，そこにだけ集中できる．なかなかよくできている．

  ここで注意しないといけないのは，swiperやhelm-org-rifle-current-bufferによる検索を行った際に，どのバッファがactiveかで検索範囲が異なることである．右側のバッファでは，そのheadingの内容しか検索しない．Tree windowで行うと，そのファイルの全体を対象として検索する．ただし，結果に飛ぶところでフレームのlayoutが崩れてしまうことがある．そうなると，みやすくする調整に手間がかかる．一方，helm-org-rifleやprojectileのC-c p s gなどは，普通にどのバッファにいても，そのファイル全体を検索するので，org-sidebarを使用している時には，検索にはこちらを使うべきかもしれない．

**** Combination of org-sidebar and treemacs
     やはり，treeとつくからには，以前に紹介したtreemacs（[[../treemacs_projectile][Treemacs and Projectile]]）との併用を試してみたくなり，やってみたのが，下図である．

     #+attr_html: :width 100% :target _self
     [[./static/img/org-sidebar-2.jpg]]

     このように併用はもちろん可能ではあるが，フレームの配列が乱れてしまい，それを調整するのに手間取ることがある．目的が違うものなので，一緒にしなくても異なるフレームで使えば良いと思う．

** COMMENT How to use mark in Emacs (helm-all-mark-rings)     :emacs:mark:ring:helm:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: mark-and-desktop-saving
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-10-27
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Emacsにおけるマークの使い方"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Brain atlas of Witkowski, Dublin"))
   :END:

   Emacsのカーソルは画面をスクロールして上端または下端に至ると画面の中に表示される状態を維持するように動いてしまい，元の位置には止まらないのが仕様になっている．これは通常のエディターとは違っており，不便と感じて，色々と調べたり試したりしたのだが，要するに思想の違いであると考えるに至った．カーソルの位置は保持できない代わりにマークという方法が提供されている．まぁ，これが結構分かりにくいのだが，使ってみると案外便利である．そこで，マークについてまとめることにした．

  <!--more-->

  {{{toc(2)}}}

*** Mark
**** References
     - [[https://ayatakesi.github.io/emacs/26.1/html/Mark.html][マークとリージョン]]  Emacsのヘルプ （C-h i で自分のヘルプを読むのが一番早いかも）

   Emacsでは，テキストのある位置にマーク（mark）をセットすることができる．マークをセットするとマークとカーソルがあるポイントまでの領域はactiveになり，ハイライト表示される．例えば，下図では，5081行の先頭の「例えば」の例にカーソルを置いた状態で， *C-SPC* と打ってマークを置き，そのままアローキーでカーソルを5086行の文末まで移動させた状態であるが，マークを置いたところから現在のカーソルのある位置までがハイライトされている（activeになっている）．windowの表示範囲を越えるような広い範囲を選択する際に特に便利である．

     #+attr_html: :width 80% :target _self
     [[./static/img/mark-1.jpg]]

  要するに，通常のエディターやワープロにおいて，マウスでクリックして押したままの状態でなぞった時と同じ状態である．この状態で，ハイライトされた領域をコピーしたり削除したりできる．まぁ，これだけだとどうと言うことはないのだが， *マークはmark ringに格納されるので，そこに戻ることができる．* これが便利である．この機能を利用するときはマークをセットしてactiveにしないほうが使いやすい．マークをセットした位置に戻るには *C-u C-SPC* と打つ．

  以上をまとめると以下のようになる．

#+attr_html: :class zebra-striping sane-table
#+attr_css: :text-align center
#+caption: Key bindings for mark in emacs
|-------------+--------------------------------------------------------------------------------------|
| Key binding | Description                                                                          |
|-------------+--------------------------------------------------------------------------------------|
| C-SPC       | マークをセットする．カーソルを移動させるとマークからカーソルの位置までがactiveになる |
| C-SPC C-SPC | マークをactiveにせずにマークをセットしてから、マークリングにpush（格納）する         |
| C-u C-SPC   | マークがあった場所にカーソルを移動し、mark ringから1つ前のマークを復元する           |
|-------------+--------------------------------------------------------------------------------------|

  要するに，あとで戻りたい位置にいるときに *C-SPC C-SPC* でactiveにせずに
マークをつけておき，しばらく作業をしたのち戻りたくなったら， *C-u C-SPC* で戻ると言う使い方ができる．マークはmark ringに格納され，新しいものからリストの上に追加されていく． *C-u C-SPC*  を連打すれば，次々と古いマークの位置に移動できる．なお， *set-mark-command-repeat-pop* を非nilにセットすると、C-u C-SPCの後に続けて、C-u C-SPCではなく、C-SPCでマークリングを巡回できるようになる．これは， *M-x customize* から，Customize Aproposに入り，下図のようにset-mark-command-repeat-popをToggleでonにすれば良い．

     #+attr_html: :width 80% :target _self
     [[./static/img/mark-2.jpg]]

最古のマークまで行くと，また，最新のマークに戻ってくる．それで，mark ringなのであろう．これだけでも十分に便利であり，カーソルの位置を保持できないことを補って余りあるともいえる．さて，mark ringには，localとglobalの2種類があるが，これについては以下の解説を参考にしていただきたい．

   {{% alert note %}}
   *グローバルマークリング（マニュアルから引用）:* 各バッファーに属する普通のマークリングに加えて、Emacsにはグローバルマークリング(global mark ring)が1つあります。以前マークをセットしてからバッファーを切り替えた場合、マークをセットすると、マークはカレントバッファーのマークリングに加えて、グローバルマークリングにも記録されます。その結果、グローバルマークリングには訪れていたバッファーの系列が記録され、各バッファーではマークを設定した箇所が記録されます。グローバルマークリングの長さは、global-mark-ring-maxで制御され、デフォルトは16です。

コマンド *C-x C-SPC*  (pop-global-mark)は、グローバルリングの最新のバッファー位置にジャンプします。これもリングを巡回するので、連続してC-x C-SPCを使うことにより、古いバッファーのマーク位置に移動します。
   {{% /alert %}}

   ここまでくると，「mark ringの内容が見られたらもっと便利だろうなぁ」と期待してしまうのは人情というものである．

*** helm-all-mark-rings
    - 参照1：[[https://tuhdo.github.io/helm-intro.html#orgheadline21][Command: helm-all-mark-rings]]
    - 参照2：[[https://qiita.com/jabberwocky0139/items/a45cc82d9efd0cb6fd8e#コマンド-helm-all-mark-rings][コマンド: helm-all-mark-rings]] 上記記事の翻訳
    さて，そんな期待を叶えてくれるのが，helm-all-mark-ringsである．localとglobalの両方のmark ringsをフレンドリーなインターフェースで可視化して，以前にいたところにいつでも戻れるようにする．私の場合は，最初にpreludeをインストールしている（[[../prelude_install][Emacsの設定（その1）Preludeの導入]]）ので，helmは既にインストールされており，このコマンドはデフォルトでは，C-c h SPCにキーバインドされている．下図は，実際にC-c h SPCと打った時の画像である．下のバッファの中をarrow keyで上下し，見たい行のところでC-jと叩けば，上のバッファがそこへとぶ．そのまま次の行に動いてC-jとすれば，今度はそこに飛ぶ．Returnすれば，そのままそのバッファに行って確定する．

    mark-ringはarrow keyで上下に動けるのだが，そのままglobal-mark-ringには移ってくれない．どうするかというと，minibufferのpattern: とあるところに，行きたいglobal-mark-ringの項目の最初の文字か2文字目ぐらいまでを入れれば，その項目だけが残るので，それを選択すれば良い．いつものhelmの選択方法である．

    #+attr_html: :width 80% :target _self
    [[./static/img/mark-3.jpg]]

   今回は地味だ．．．．
   しかし，役に立つと思う．
** COMMENT How to create conference posters by latex (beamer) :latex:beamer:conference:poster:emacs:Inkscape:tikz:overleaf:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-create-conference-poster-by-latex--beamer
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-11-22
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "latex (beamer)による学会発表用のポスターの作り方"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Sfera con Sfera at Trinity College Dublin"))
   :END:

   学会発表用のスライド作成については，[[../beamer][beamerでスライド原稿用pdfを作成する（その１）]]に始まる一連の記事にまとめたが，ポスター作成については触れていなかったので，今回まとめることにする．

latexを使ってポスターを作成する場合の定番はbeamerを利用したもので，代表例には，beamerposterがある．それ以外にも，latexのポスター作成用のパッケージには，baposter, Gemini, betterposter, tikzposterなどがある．さらに，Inkscapeを使用する方法も報告されている．できるだけこれらの情報を集積してみた．なお，私自身は，標準的なbeamerposterの中に含まれているスタイルファイルを少し改変して用いている．

  <!--more-->

  {{{toc(2)}}}

*** General remarks
    - [[https://guides.lib.wayne.edu/posters/latex][Creating Research Posters]]
    - [[https://tex.stackexchange.com/questions/341/how-to-create-posters-using-latex][How to create posters using LaTeX]]
    - [[https://ja.overleaf.com/gallery/tagged/poster][Gallery — Poster]]
    - [[https://www.latextemplates.com/cat/conference-posters][LaTeX Templates]]

*** beamerposter
    おそらく最もよく使われているパッケージ
**** References
     - [[https://ctan.org/pkg/beamerposter][beamerposter – Extend beamer and a0poster for custom sized posters]]
     - [[https://github.com/deselaers/latex-beamerposter][The LaTeX beamerposter package]]
     - [[http://tug.org/pracjourn/2012-1/shang/shang.pdf][Writing posters with beamerposter package in LATEX]]
     - [[https://pecorarista.com/posts/poster.html][LaTeX (Beamer)で学会発表用のポスターを作る]]
     - [[http://muscle-keisuke.hatenablog.com/entry/2017/12/18/235617][LaTeX(Beamer)でポスターを作る]]
**** Installation
     texlive (MacTeX)をインストールした時点で入っているので，改めてインストールし直す必要はない．
**** Usage
***** スタイルシートの変更
      まずスタイルファイルを使用する必要がある．私は，beamerposter packageの中のthemes directoryに入っている *beamerthemeI6dv.sty* を少し変更して *beamerthemeI6dv_test.sty* として使用している．変更箇所は以下の通りである．これも覚書として残しておく．

     #+begin_src diff
       --- beamerthemeI6dv.sty 2019-11-24 14:32:46.000000000 +0900
       +++ beamerthemeI6dv_test.sty    2019-11-24 20:55:47.000000000 +0900
       @@ -1,4 +1,4 @@
       -\ProvidesPackage{beamerthemeI6dv} % this style was created by David Vilar
       +\ProvidesPackage{beamerthemeI6dv_test} % this style was created by David Vilar

       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       \selectcolormodel{cmyk}
       @@ -30,7 +30,7 @@

       % footline colors and fonts
       \setbeamercolor{footline}{fg=white,bg=i6colorschemeHeadline}
       -\setbeamerfont{footline}{fg=white, size=\normalsize}
       +%\setbeamerfont{footline}{fg=white, size=\normalsize}

       % body colors and fonts
       \setbeamercolor*{normal text}{fg=black,bg=i6colorscheme3}
       @@ -42,7 +42,7 @@

       % example environment
       \setbeamercolor*{example title}{fg=white,bg=i6colorscheme1}
       -\setbeamerfont{example title}{size=\large,series=\bf,bg=i6colorscheme1,fg=white}
       +%\setbeamerfont{example title}{size=\large,series=\bf,bg=i6colorscheme1,fg=white}


       %\setbeamercolor*{example body}{fg=white,bg=i6colorscheme4}
       @@ -88,27 +88,29 @@
       \begin{columns}[T]
       \begin{column}{.02\paperwidth}
       \end{column}
       -      \begin{column}{.07\paperwidth}
       +      \begin{column}{.1\paperwidth}
       \begin{center}
       -          %\includegraphics[width=.6\linewidth]{logos/i6-hks44}
       +          % \includegraphics[width=.6\linewidth]{logos/i6-hks44}
       +          \includegraphics[height=0.7\linewidth]{ISC2017-Logo.pdf}
       \end{center}
       \vskip1ex
       \end{column}
       -      \begin{column}{.675\paperwidth}
       +      \begin{column}{.6\paperwidth}
       \vskip4ex
       \raggedleft
       \usebeamercolor{title in headline}{\color{fg}\textbf{\LARGE{\inserttitle}}\\[1ex]}
       \usebeamercolor{author in headline}{\color{fg}\large{\insertauthor}\\[1ex]}
       \usebeamercolor{institute in headline}{\color{fg}\large{\insertinstitute}\\[1ex]}
       \end{column}
       -      \begin{column}{.25\paperwidth}
       +      \begin{column}{.15\paperwidth}
       \vskip1cm
       \begin{center}
       -          \includegraphics[width=.7\linewidth]{/u/figures/deselaers/logos/rwthaachenuniversity-whitegray}
       +          % \includegraphics[width=.7\linewidth]{/u/figures/deselaers/logos/rwthaachenuniversity-whitegray}
       +          \includegraphics[height=.45\linewidth]{Kobito.jpg}
       \end{center}
       \vskip1.5cm
       \end{column}
       -      \begin{column}{.03\paperwidth}
       +      \begin{column}{.02\paperwidth}
       \end{column}
       \end{columns}
       \end{beamercolorbox}
       @@ -139,7 +141,7 @@
       \end{beamercolorbox}

       \begin{beamercolorbox}[ht=4ex,leftskip=1cm,rightskip=1cm]{footline}%
       -    Lehrstuhl f\"ur Informatik 6 - Computer Science Department - RWTH Aachen University - Aachen, Germany \hfill Mail: \texttt{<surname>@cs.rwth-aachen.de} \hfill WWW: \texttt{http://www-i6.informatik.rwth-aachen.de}
       +   Department of HogeFuga, HogeFuga University Graduate School of Medicine, Japan \hfill Mail: \texttt{taipapa@hoge-u.sc.jp} \hfill WWW: \texttt{http://www-hogefuga/TOP.html}
       \vskip1ex
       \end{beamercolorbox}
     #+end_src
     - 好みによって適当に変更すれば良い．
     - LogoをKobito.jpgに入れ替えているが，これはそれぞれの所属組織のものに変更すれば良い．
     - 左側のLogoは学会のもの（ISC2017-Logo.pdf）に変更している．
     - 一番最後はフッターに所属組織，メールアドレス，ウェブサイトなどを入れるための情報であり，そこも適宜置き換えれば良い．
***** スタイルシートの置き場
      私のように，LaTeXをMacTeXでインストールした場合は，上記の変更したスタイルシートは， *~/Library/texmf/tex/latex/beamer/themes/theme/* に置く．これでLaTeXはこのスタイルシートを見つけてくれる．
***** Poster example
      上記スタイルシートを用いて作成すると下図のようなポスターが出来上がる．これは実際の学会発表に使用したものである．ただし，発表者や所属組織やロゴは変更してある．
      #+attr_html: :width 100% :target _self
    [[./static/img/Poster-test.jpg]]

      このポスターのtex fileは以下のようになっている．元々は．どこかからとってきたtex fileを改変しているのだが，オリジナルをどこから持ってきたかは，もはや記憶の彼方である.....(^^;;;  （どなたかご指摘いただければ幸いである） 素人が色々弄ってなんとか形にしたものだが，これを上書きしていく事で割と簡単にポスターが作成できるようになった．試行錯誤の跡もそのまま残した状態でアップしておく．念のために書いておくが，このファイルをdocument.texとして保存し，[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]] に書いたように， *latexmk -pvc -pdf -view=none document.tex* とすればコンパイルされてpdfが出来上がる．ただし，ファイルの中の画像（pdf）は適当なものと置き換えていただきたい．
      - 9行目： *\usetheme{I6dv_test}* によりスタイルシートを指定している．
      - 45行目： *orientation=landscape* で横長， *orientation=portrait* で縦長になる．実際の大きさは， *width=200,height=100* で合わせる（幅 200cm 高さ 100 cmということである）．scaleの部分でも調整する．

      #+begin_src tex -n
        % -*-coding:utf-8-*-
        \documentclass[final,t]{beamer}
        \mode<presentation>
        {
          % \usetheme{Warsaw}
          % \usetheme{Aachen}
          % \usetheme{Oldi6}
          % \usetheme{I6td}
          \usetheme{I6dv_test}
          % \usetheme{I6pd}
          % \usetheme{I6pd2}
        }
        % additional settings
        \setbeamerfont{itemize}{size=\normalsize}
        \setbeamerfont{itemize/enumerate body}{size=\normalsize}
        \setbeamerfont{itemize/enumerate subbody}{size=\normalsize}

        % additional packages
        % \usepackage{times}

        %% 上記だけではsans serifにならないので，下記を設定　
        %% http://www.tug.dk/FontCatalogue/ibmplexsansregular/
        %% http://www.tug.dk/FontCatalogue/sansseriffonts.html
        % \usepackage[T1]{fontenc}
        % \usepackage[usefilenames,% Important for XeLaTeX
        % DefaultFeatures={Ligatures=Common}]{plex-otf} %
        % \renewcommand*\familydefault{\sfdefault} %% Only if the base font of the document is to be sans serif

        %% http://www.tug.dk/FontCatalogue/ibmplexsanstext/
        \usepackage[T1]{fontenc}
        \usepackage[usefilenames,% Important for XeLaTeX
        RMstyle={Text,Semibold},
        SSstyle={Text,Semibold},
        TTstyle={Text,Semibold},
        DefaultFeatures={Ligatures=Common}]{plex-otf} %
        \renewcommand*\familydefault{\sfdefault} %% Only if the base font of the document is to be sans serif

        \usepackage{amsmath,amsthm, amssymb, latexsym}
        \usepackage{exscale}
        % \boldmath
        \usepackage{booktabs, array}
        % \usepackage{rotating} %sideways environment
        \usepackage[english]{babel}
        \usepackage[latin1]{inputenc}
        \usepackage[orientation=landscape,size=custom,width=200,height=100,scale=1.725]{beamerposter}
        \listfiles
        \graphicspath{{figures/}}

        % \usepackage{latexsym}

        % Display a grid to help align images
        % \beamertemplategridbackground[1cm]

        \title{\huge Perioperative Assessment Of Cerebral Perfusion Territories Through Arterial Spin Labeling Magnetic Resonance Imaging In Carotid Stenosis}
        \author[taipapa et al.]{taipapa, taimama, taison, taidaughter, other person1,
          other person2, other person3, other person 4, other person 5}
        \institute[HogeFuga University]{Department of HogeFuga, HogeFuga Medical Center Japan}
        \date[Feb. 23, 2017]{Feb. 17,  2017}

        % abbreviations
        \usepackage{xspace}
        \makeatletter
        \DeclareRobustCommand\onedot{\futurelet\@let@token\@onedot}
        \def\@onedot{\ifx\@let@token.\else.\null\fi\xspace}
        \def\eg{{e.g}\onedot} \def\Eg{{E.g}\onedot}
        \def\ie{{i.e}\onedot} \def\Ie{{I.e}\onedot}
        \def\cf{{c.f}\onedot} \def\Cf{{C.f}\onedot}
        \def\etc{{etc}\onedot}
        \def\vs{{vs}\onedot}
        \def\wrt{w.r.t\onedot}
        \def\dof{d.o.f\onedot}
        \def\etal{{et al}\onedot}
        \makeatother

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        \begin{document}
        \begin{frame}{}
          \begin{columns}[t]
            \begin{column}{.32\linewidth}

              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              \vspace*{-2.35cm}
              \begin{block}{Introduction}
                % \begin{columns}[t]
                %   \begin{column}{.75\linewidth}
                \begin{itemize}
                  % \item Arterial spin labeling (ASL) is a magnetic resonance
                  %   imaging (MRI) technique that uses the protons of arterial
                  %   blood water molecules as endogenous tracers to evaluate
                  %   CBF noninvasively.
                \item Territorial arterial spin labeling (TASL), a modified
                  ASL technique, allows for the independent labeling of
                  major individual feeding vessels and, consequently,
                  visualization of their perfusion territories.
                \item Perfusion territories can change substantially during
                  the perioperative periods of carotid endarterectomy (CEA)
                  and carotid artery stenting (CAS). Perioperative changes
                  in the perfusion territories of major arteries are
                  important because these changes can influence the
                  perioperative management of hyperperfusion and other
                  conditions.

                \end{itemize}
                \vspace{0.5cm}
                \small{
                  $\bigstar$ \textbf{Financial Disclosures:} This study was
                  supported, in part, by a Grants-in-Aid for Scientific
                  Research (C) KAKENHI Number 15K10302 from the Japan
                  Society for the Promotion of Science.
                }
              \end{block}

              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

              \begin{block}{Objective}
                The objective of this study was to use TASL to assess the
                relationships between perioperative changes in the perfusion
                territories of the ICA and the CBF increase after carotid
                revascularization in patients with carotid stenosis.
              \end{block}

              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              \begin{block}{Subjects and Methods}
                \begin{columns}[t]
                  \begin{column}{.5\linewidth}
                    \centering
                    \includegraphics[width=1\linewidth]{Figures/ISC2017-subjects-left_Kohmura_opt.pdf}\\%[1ex]
                  \end{column}
                  \begin{column}{.5\linewidth}

                    \centering
                    \vspace{-44cm}
                    \includegraphics[width=0.85\linewidth]{Figures/ISC2017-subjects-right_opt.pdf}\\[1ex]

                    \begin{itemize}
                    \item TASL images were fused with T1 weighed
                      images(T1WI) on the software (Osirix) to match with
                      anatomical images. Perfusion volume of each ICA was
                      calculated from perfusion area and thickness of
                      slices.
                    \item Asymmetry Index (AI) was also calculated
                      from perfused volume of ICA on each side.
                      % \item The patients were divided into 2 groups on the
                      %   basis of the preoperative perfusion volume of the
                      %   stenotic ICA, that is, \textbf{normal PV} (n = 13)
                      %   or \textbf{reduced PV} (n = 19) groups.
                      % \item \textbf{Normal PV} was defined as $\geq$ -2SD of the
                      %   healthy volunteer group, that is, 312.4 cm3.
                      % \item \textbf{Reduced PV} was defined as $\textless$
                      %   -2SD.
                    \end{itemize}
                  \end{column}
                \end{columns}
              \end{block}
            \end{column}

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            \begin{column}{.32\linewidth}
              \vspace*{-2.35cm}
              \begin{block}{Results}
                \textbf{General postoperative changes in PV of ICA}\\
                \begin{columns}
                  \begin{column}{.4\linewidth}
                    \vspace*{-17cm}
                    \begin{itemize}
                    \item The preoperative perfusion volume (\textbf{PV}) of the
                      stenotic ICA in the carotid stenosis group was significantly
                      smaller than that in the control group. Revascularization
                      increased the PV of the stenotic ICA and equalized the PV of
                      the ICAs bilaterally.

                    \end{itemize}
                  \end{column}

                  \begin{column}{.6\linewidth}
                    \centering
                    \includegraphics[width=1\linewidth]{Figures/Figure-2-WNS.pdf}\\
                  \end{column}
                \end{columns}
                \vspace*{-0.5cm}
                \begin{itemize}
                \item The patients were divided into 2 groups on the basis of
                  the preoperative PV of the stenotic ICA, that is,
                  \textbf{normal PV} (n = 13) or \textbf{reduced PV} (n = 19)
                  groups.
                \item \textbf{Normal PV} was defined as $\geq$ -2SD of the
                  healthy volunteer group, that is, 312.4 cm3.
                \item \textbf{Reduced PV} was defined as $\textless$ -2SD.
                \end{itemize}

                \vspace{0.5cm}

                \textbf{Differential postoperative changes in PV \& CBF }

                \begin{columns}
                  \begin{column}{.4\linewidth}
                    \vspace*{-18cm}
                    \begin{itemize}
                    \item \textbf{A:} The changes in the PV of the stenotic ICA
                      before and after CEA or CAS in the normal PV group and the
                      reduced PV group. After treatment, the PV increases
                      significantly in the two groups, while the postoperative
                      increase was much larger in the reduced PV group.
                    \end{itemize}
                  \end{column}

                  \begin{column}{.6\linewidth}
                    \includegraphics[width=1\linewidth]{Figures/Figure-3-WNS.pdf}\\
                  \end{column}
                \end{columns}

                \begin{itemize}
                \item \textbf{B:} The changes in ipsilateral CBF before and
                  after CEA or CAS in the normal PV group and the reduced PV
                  group. The postoperative increase in the ipsilateral CBF was
                  larger in the reduced PV group than in the normal PV group.
                \end{itemize}

                \vspace{0.5cm}

                \textbf{Relationships between postoperative changes in PV \& CBF}

                \begin{columns}
                  \begin{column}{.45\linewidth}
                    \vspace*{-24cm}
                    \begin{itemize}
                    \item \textbf{A:} The rate of PV increase is significantly
                      higher in the reduced PV group than in the normal PV
                      group.
                    \item \textbf{B:} The rate of CBF increase is significantly
                      higher in the reduced PV group than in the normal PV
                      group.
                    \item \alert{Red circles} represent 4 patients whose
                      postoperative increase in perfusion volume are less
                      than lower quartile, and whose increase in CBF is more
                      than upper quartile.
                    \end{itemize}
                  \end{column}

                  \begin{column}{.55\linewidth}
                    \vspace*{-1.75cm}
                    \includegraphics[width=0.96\linewidth]{Figures/Figure-4-WNS.pdf}\\[2ex]

                  \end{column}
                \end{columns}

              \end{block}

            \end{column}

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            \begin{column}{.32\linewidth}
              \vspace*{-3cm}
              \begin{block}{}
                \textbf{Differential postoperative ICA flow changes}
                \begin{columns}[t]
                  \begin{column}{.6\linewidth}
                    \begin{itemize}
                    \item The preoperative ICA flow was significantly lower in the
                      reduced PV group than in the normal PV group.
                    \item After treatment, the perfusion volume increases
                      significantly in the two groups, while the postoperative
                      increase was much larger in the reduced PV group.

                    \end{itemize}
                  \end{column}

                  \begin{column}{.4\linewidth}

                    \vspace*{-4cm}
                    \centering
                    \includegraphics[width=0.8\linewidth]{Figures/Figure-5-WNS.pdf}\\[2ex]

                  \end{column}
                \end{columns}

                \textbf{Illustrative cases}
                \begin{itemize}
                \item \underline{Case 6 (normal PV group)}: PV markedly increased 1 day
                  after CEA and was nearly unchanged between 1 and 7 days
                  after CEA. ICA flow markedly increased after arterial
                  reconstruction during CEA. Regional CBF was stable
                  throughout the perioperative period.
                \item \underline{Case 8 (reduced PV group)}: PV 1 day after CEA was not
                  significantly different from that before surgery, and then,
                  it significantly increased between 1 and 7 days after CEA,
                  resulting in equalization of the perfusion volumes of the
                  left and right ICAs. ICA flow markedly increased after
                  arterial reconstruction during CEA. Regional CBF increased
                  significantly at 1 day after CEA (CBF increase $\geq$ 100\%),
                  representing typical hyperperfusion. Regional CBF decreased
                  significantly at 7 days after CEA compared with the first
                  postoperative day and returned to its normal range.
                \end{itemize}

                % \vspace{1cm}
                \centering
                \includegraphics[width=0.8\linewidth]{Figures/UsualCase_legend_v2_opt.pdf}\\

              \end{block}

              \vspace*{-0.95cm}
              \begin{block}{Conclusion}
                \vspace*{-1cm}
                \begin{itemize}
                \item TASL demonstrated that CEA and CAS elicited increases in the
                  PV of stenotic ICAs, which resulted in equalization of the
                  PV of the left and right ICAs.
                \item Patients with reduced PV tended to increase the PV
                  more markedly than patients with PV within normal ranges.
                \item In some patients with a reduced PV, the PV increased
                  slightly, while the ICA flow markedly increased, which
                  resulted in a large increase in CBF or hyperperfusion.
                \item These findings suggested that an imbalance between
                  increases in the PV and ICA flow could play an important
                  role in the pathophysiology of hyperperfusion.
                \end{itemize}
                \vspace{-1ex}
              \end{block}

              \vspace*{-0.5cm}
              \begin{block}{References}
                \vspace*{-0.75cm}
                \begin{enumerate}
                  \scriptsize{
                  \item Uchihashi et al. Clinical application of arterial
                    spin-labeling MR imaging in patients with carotid
                    stenosis: quantitative comparative study with
                    single-photon emission CT. AJNR Am J Neuroradiol 32,
                    1545--51, 2011
                  \item Hartkamp et al. Mapping of cerebral
                    perfusion territories using territorial arterial spin
                    labeling: techniques and clinical application. NMR Biomed
                    26, 901--12, 2013}
                \end{enumerate}
              \end{block}
             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            \end{column}
          \end{columns}
        \end{frame}

        \end{document}
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% Local Variables:
        %%% mode: latex
        %%% TeX-PDF-mode: t
        %%% TeX-master: t
        %%% End:
      #+end_src

**** Templates
     [[https://www.overleaf.com/latex/templates?addsearch=beamerposter][Overleaf beamerposter templates]] : Overleafにあるbeamposterのテンプレート．膨大な数のテンプレートがあるので，参考になる．

*** Gemini
    texliveには含まれていないbeamerの新しいポスター用テーマ
**** References
     - [[https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/][Gemini: A Modern LaTeX Poster Theme]]
     - [[https://github.com/anishathalye/gemini][Gemini is a modern LaTex beamerposter theme]] : GitHub site
**** Installation
     - 上記のGitHub siteをcloneするかdownloadすれば良い．
     - beamerposterに依存
**** Usage
     - GitHub siteに書いてある通り

*** baposter
    texliveには含まれていない．より新し目のパッケージ？
**** References
     - [[http://www.brian-amberg.de/uni/poster/][LaTeX Poster Template]]  ご本家．ポスターの実例が数多く挙げられており，FAQもある．
**** Installation
     上記サイトから *baposter.tar.bz2* をdownloadする．
**** Usage
     上記サイトや， *[[http://www.brian-amberg.de/uni/poster/baposter/baposter_guide.pdf][The baposter latex poster style]]* を参照
**** Templates
     [[https://www.overleaf.com/latex/templates?addsearch=baposter][Overleaf baposter templates]] : Overleafにあるbaposterのテンプレート．

*** tikzposter
    「科学的ポスターを効率的に作成するLaTeXのクラス」である．
**** References
     - [[https://ctan.org/pkg/tikzposter][tikzposter – Create scientific posters using TikZ]]   CTAN
     - [[https://bitbucket.org/surmann/tikzposter/wiki/Home][TikZposter]]    Wiki    ガイドをダウンロードできるリンクあり
     - [[https://www.doc.ic.ac.uk/~ebotoeva/fancytikzposter.html][Elena Botoeva]]   作者のページ
**** Installation
     texliveをインストールすれば，一緒に入ってくる．
**** Usage
     上記のガイドを参照．最も簡単な例は以下の通り．
     #+begin_src tex -n
       \documentclass{tikzposter}

       \title{Title}
       \author{Author}
       \institute{Institute}

       \begin{document}

       \maketitle

       \block{Block}{Content}
       \end{document}
     #+end_src
**** Templates
     [[https://www.overleaf.com/latex/templates?addsearch=tikzposter][Overleaf tikzposter templates]] : Overleafにあるtikzposterのテンプレート．多数のテンプレートがあるので，参考になる．

*** betterposter
    伝統的な学術ポスターに対する新たなスタイルのポスター．実にユニーク！
      #+attr_html: :width 80% :target _self
    [[./static/img/betterposter_example.png]]

    要するに中核的なメッセージを簡潔な文章で特大に表示し，方法，結果，考察などは極端に簡潔にし，詳細はQR codeから論文を落として読んでもらうという，とんでもない発想のポスターである．
**** References
     - [[https://osf.io/ef53g/][Better Scientific Poster]] : ご本家．元々はPowerPointのテンプレート
     - [[https://www.youtube.com/watch?v=1RwJbhkCA58&feature=youtu.be][How to create a better research poster in less time (including templates)]] : 作者自身のYouTube動画．面白い．必見！
     - [[https://github.com/rafaelbailo/betterposter-latex-template][Better Poster Latex Template]] : GitHub. LaTeXへの移植版．
     - [[https://twitter.com/mikemorrison][Mike Morrison]] : 作者のTwitter．多くの人が自分の"betterposter"をアップしているのが見られる．
**** Installation
     上記の [[https://github.com/rafaelbailo/betterposter-latex-template][Better Poster Latex Template]] に詳細に書いてあるが，repositoryをclone するか，ダウンロードして，パスが通るところに置く．
**** Usage
     上記の [[https://github.com/rafaelbailo/betterposter-latex-template][Better Poster Latex Template]] を参考．

*** Inkscape
    これはオマケ．なぜかというと，ダントツでかっこいいから（笑）．
**** [[http://blog.felixbreuer.net/2010/10/24/poster.html?utm_source=share&utm_medium=ios_app&utm_name=iossmf][Making a Math Conference Poster with Inkscape]]
       これを見ると，羨望の念が．．．でも，Inkscapeを使えるようにならないと．．．
        #+attr_html: :width 80% :target _self
        [[./static/img/poster-fpsac2010.png]]
**** [[https://dionhaefner.github.io/2015/07/creating-a-science-conference-poster-with-inkscape/][Creating a Science Conference Poster with Inkscape]]
     こちらも同じく．．．
        #+attr_html: :width 80% :target _self
        [[./static/img/poster-lowres.png]]

*** まとめ
    今回ポスターについてまとめてみて，改めて思ったのは，一旦自分のスタイルが出来上がると，万年一日のごとく，同じフォーマットで作成してしまい，金太郎飴のようになってしまうという事である．もちろん，内容が一番大事なのだが，如何に伝えるかという点でポスターのフォーマットは重要と思う．そういう意味では，[[betterposter][betterposter]] や [[Inkscape][Inkscape]] によるポスターは非常に刺激的であった．特に，betterposterの手法は比較的模倣がしやすそうなので，次回は是非試みてみたい．
** COMMENT How to install Emacs & LaTeX to MacBook Pro 16-inch on Catalina :macbookpro16:Emacs:LaTeX:Catalina:setup:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-install-emacs-and-latex-to-macbook-pro-16in-on-catalina
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2019-12-31
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Emacs, LaTeXなどのMacBook Pro 16-inch, Catalinaへのインストール"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Desktop of MacBook Pro 16 inch (Catalina)"))
   :END:
   1ヶ月ほど前にMacBook Pro late 2016のバッテリーが逝かれてしまい，laptopのはずがコンセントに繋がないと動かないdesktopになってしまった．すると待っていたかのようにMacBook Pro 16-inch 2019が発売となり，速攻で注文してしまった．これまでは常に半年ぐらい様子を見てから新機を購入していたのだが，今回は止むを得ず発売直後のものを購入せざるを得なかった．新しい計算機やOSへのEmacsやLaTeXのインストールは色々な問題に遭遇することが多い．幸いなことに今回の年末年始の休みは長いので，こちらにまとめておくことにした．基本的には，[[../mojave][Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew]]でまとめたことをやれば良くて，大きな問題はなかった．トップの画像で示しているように各種ソフトがスムーズに動いている．

  <!--more-->

  *Table of contents*
  {{{toc(2)}}}

*** Dealing with read-only system volume in Catalina
    - 参照サイト : [[https://news.mynavi.jp/article/osxhack-242/][Catalinaでファイルシステムがこう変わる]]
    Catalinaのファイルシステムではファイルアクセスが厳格化されており，APFS (Apple File System)でフォーマットされたルートボリューム(起動ディスク)はシステム領域とデータ領域に2分割され，そのうちシステム領域は完全にリードオンリーとなる（上記の参照サイトが詳細かつわかりやすく解説しているので参照されたい）．

    私はこれまでは，root directoryにData directoryを作成し，そこにほぼ全てのデータを入れ，また，各種ソフトウェアのソースなどは，root directoryにSources directoryを作成し保存してきた．しかし，Catalinaでは上述の変化に伴い，これが不可能となった．実際，管理者権限でdirectoryをrootに作成しようとしても，
    #+begin_src sh
      $ cd /
      $ sudo mkdir test
      Password:
      mkdir: test: Read-only file system
    #+end_src
    と言う具合に撥ねられてしまう．

    そこで，Data directoryやSources directoryを自分のhome directory，即ち，/Users/taipapa/の下に入れることにした．つまり，

    #+begin_src sh
      /
      ├── Data
      └── Sources
    #+end_src
    から
    #+begin_src sh
      taipapa
      ├── Data
      └── Sources
    #+end_src
    に変更した．これに伴い，各ファイル内のパスも修正した．基本的にはファイルパスの最初に，/Users/taipapa/もしくは *~* をつければ良いだけであるが，これでうまくいかないものは個別に対応するしかない．例えば，文献管理ソフトの *BibDesk* がそうであった．これらの問題は別稿にまとめることにする．

*** Preparation for Emacs installation
    つい先日やったばかりなのに，もはや記憶が定かではないのだが，要は，[[../mojave//#upgrade-to-xcode-10-dot-2-dot-1][Upgrade to Mojave and upgrade to Emacs 26.2 by homebrewのUpgrade to Xcode 10.2.1]]にまとめたことを行った．tmp directoryのpermissionの問題があったかどうかは覚えていない（笑）．homebrew自体のインストールにも特に問題はなかった．要するに，ほとんど何も覚えていないくらいスムーズにことは運んだと言うことである．

*** How to install Emacs 26.3 into MacBook Pro 16 inch (Catalina)
    Emacsのインストールも，[[../mojave/#upgrade-to-emacs-26-dot-2-from-26-dot-1][Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew の Upgrade to Emacs 26.2 from 26.1]] にまとめたことを行っただけである．

    #+begin_src sh
      $ brew tap railwaycat/emacsmacport
      $ brew install emacs-mac --with-modern-icon --with-imagemagick
      $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
    #+end_src

    これで， */usr/local/Cellar/emacs-mac/emacs-26.3-z-mac-7.8 (4,010 files, 129.7MB)* がインストールされた．

   あとは，以前に書いた以下の記事に従ってセットアップした．

    [[../prelude_install][Emacsの設定（その1）Preludeの導入（2018年10月9日修正）]]

    [[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]

    [[../japanese_setup][Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など]]

    実際には，preludeを導入した後に，前のMacBook Pro 2016 lateの/Users/taipapa/.emacs.d/personal/init.orgをコピペしただけである．もちろん，多少の微調整は必要であったが，特に問題なく設定も終了した．diredがらみの微調整はCatalinaに特有の問題ではないようだが，後日に別途まとめるつもりである．

*** How to install  LaTeX into MacBook Pro 16 inch (Catalina)
**** References
     - [[https://doratex.hatenablog.jp/entry/20190502/1556775026][MacTeX 2019 のインストール＆日本語環境構築法]]
     - [[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記）]]
     - [[../mojave][Upgrade to Mojave and upgrade to Emacs 26.2 by homebrew]]

   最初の[[https://doratex.hatenablog.jp/entry/20190502/1556775026][MacTeX 2019 のインストール＆日本語環境構築法]]の通りにすれば良い．これにより， *texlive2019* がインストールされる．下の2つのサイトは当ブログの以前の記事であるが，これをもとに補足作業を行なった．なお，[[https://texwiki.texjp.org/?ヒラギノフォント#macos-hiragino-setup][macOS Catalina / macOS Mojave / macOS High Sierra / macOS Sierra / OS X El Capitan に付属するヒラギノフォントのセットアップ]] にCatalinaでのtexlive2019のインストールの方法が詳細に記載されているが，私は前述の通りにやった後にこのサイトに気が付いたので，こちらのやり方は行っていない．

**** フォントマップの確認とpdfへのフォントの埋め込みの確認
     [[https://qiita.com/potato_omom/items/88b5964bb057bbddf2c3][いまさらMacTeXの更新]] を参考に，フォントマップを見ると，
     #+begin_src sh
       $ kanji-config-updmap-sys status
       Cannot find ptex-fontmaps-macos-data.dat, skipping!
       CURRENT family for ja: hiragino-highsierra-pron
       Standby family : ipa
       Standby family : ipaex
     #+end_src
     とりあえず， *CURRENT family for ja: hiragino-highsierra-pron* になっているのでよしとする．latexで生成したhogehoge.pdfのフォントの埋め込みを，pdffontを用いて確認してみると，
     #+begin_src sh
       $ pdffonts SMC-Ab.pdf
       name                                 type              encoding         emb sub uni object ID
       ------------------------------------ ----------------- ---------------- --- --- --- ---------
       RWTTMJ+LMSans10-Bold                 Type 1C           Custom           yes yes yes      4  0
       CZOKCD+CMMI12                        Type 1C           Builtin          yes yes yes      5  0
       NBDCJR+HiraKakuProN-W6-Identity-H    CID Type 0C       Identity-H       yes yes no       7  0
       TYTYWC+LMRoman17-Regular             Type 1C           Custom           yes yes yes      8  0
       GWABID+LMRoman12-Bold                Type 1C           Custom           yes yes yes      9  0
       AJNMNY+LMRoman12-Regular             Type 1C           Custom           yes yes yes     10  0
       HCOYDP+HiraMinProN-W3-Identity-H     CID Type 0C       Identity-H       yes yes no      16  0
       RMUEJU+LMRoman8-Regular              Type 1C           Custom           yes yes yes     21  0
       XXHLXJ+LMRoman7-Regular              Type 1C           Custom           yes yes yes     23  0
       PPVQFL+LMMono10-Regular              Type 1C           Custom           yes yes yes     24  0
     #+end_src
     とヒラギノフォントも含めて全てのフォントはemb = yesとなっており，確かに埋め込まれている．

     なお，文献管理ソフトであるBibDeskのpdfの管理に問題が生じたが，これについては解決策とともに別稿でまとめる．

*** How to setup org-mode in MacBook Pro 16 inch (Catalina)
    最もよく使うorg-modeのセットアップは以下の以前の記事の通りに作業した．
    - [[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]
    - [[../org-mode_paper_2][Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）]]
    - [[../org-mode_paper_3][Emacsのorg-modeで論文を書く（その3：org-modeとbibtexとreftexの連携による文献引用の自動化]]
    - [[../org-mode_paper_4][Emacsのorg-modeで論文を書く（その4：pandocを利用してorg-modeからword [docx]を文献付きでexportする）]]
    といっても実際にやったのは，以前の/Users/taipapa/.emacs.d/personal/init.orgをコピペしたことがほぼ全てである．

*** How to setup full text search of pdf files on Catalina
    以前の記事で全文検索についてまとめたが（[[../fulltextsearch][Full text search of PDF archives with hyperestraier on maos (mojave) — Hyper Estraierでpdfの全文検索を行う]]），Catalinaでもこの記事と同じ設定でpdf fileの全文検索が可能となった．Mojaveでもhome directoryでセットアップしたので，大きな問題はなかったのであろう．ただし，Catalinaでは，pdf fileの置き場所がhome directoryの下のData directory以下に変更されているため，/Users/taipapa/Sites/cgi-bin/est/estseek.confの設定は以下のように変更した．

    #+begin_src sh
      1 #indexname: casket
      2 indexname: /Users/taipapa/Sites/pdf/casket
      3
      4 tmplfile: estseek.tmpl
      5
      6 topfile: estseek.top
      7
      8 helpfile: estseek.help
      9
      10 lockindex: true
      11
      12 pseudoindex:
      13
      14 #replace: ^file:///home/mikio/public_html/{{!}}http://localhost/
      15 #replace: /index\.html?${{!}}/
      16
      17 #replace: ^file:///Data/{{!}}http://localhost/~taipapa/pdf/PDFs/
      18
      19 replace: ^file:///Users/taipapa/Data/{{!}}http://localhost/~taipapa/pdf/PDFs/
      20
    #+end_src
    これでブラウザによるpdf fileの全文検索が可能となった．なお，MacBook Pro late 2016では，document数が11734個，語数が1351563のindex作成に要した時間は約40分強であったが，今回，MacBook Pro 2019 16 inch では，document数が11782個，語数が1362430のindex作成に要した時間は約31分強であった．

*** Encountered problems: 遭遇した問題点
    ここからは，上述のセットアップの際に遭遇した問題点についてまとめておく．
**** zxjafontのプリセットの変更
     - 参照サイト：[[https://zrbabbler.hatenablog.com/entry/20180721/1532187775][そういえば ZXjafont が新しくなった（v0.4）]]
     - zxjafontとは，「和文フォントのプリセット設定」を XeLaTeX + zxjatype の環境で行うためのもの
     上記サイト（[[../org-mode_paper_1][Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力）]]）にあるorg fileをコピペして，org fileからpdfをexportしようとすると，
     #+begin_src sh
       ! Package zxjafont Error: The old preset 'hiragino-dx' is *abolished*.

       See the zxjafont package documentation for explanation.
       Type  H <return>  for immediate help.
     #+end_src
     と言うようなエラーになる．要するに，texlive2019をインストールしてzxjafontが新しくなったのに伴い，"hiragino-dx"と言うpresetは古くてもう廃止されたと言われているのである．指示に従ってドキュメントを読むと， *hiragino-pron* を使えとあるので，init.orgの中のhiragino-dxを全てhiragino-pronに変更するとうまくいくようになった．

**** org-modeからhtml exportの際のthemeを読み込まない（パスを読まない）
     以前の記事（[[../org-html-export-theme][Org-modeでhtml exportの際のthemeについて]]）で，好きなテーマとしてあげた *org-spec* であるが，org fileの冒頭の部分は以下のようになっている．

     #+begin_src lisp
       ,#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
       ,#+HTML_HEAD: <link href="/Hoge/Fuga/org-spec-master/css/style.css" rel="stylesheet" type="text/css" />
     #+end_src

    これを，Catalinaではパスの変更に合わせて以下のように設定した．

     #+begin_src lisp
       ,#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
       ,#+HTML_HEAD: <link href="/Users/taipapa/Hoge/Fuga/org-spec-master/css/style.css" rel="stylesheet" type="text/css" />
     #+end_src
     しかし，上記の2行目を，Catalinaではうまく読めなくなり，設定が読み込まれなくなった．スッピンのhtml とでも言うか，単なるテキストに近いものとしてexportされてしまう．しかし，org-specのcss/style.cssをorg fileと同じdirectoryに置いて，

     #+begin_src lisp
       ,#+HTML_HEAD: <link href="css/style.css" rel="stylesheet" type="text/css" />
     #+end_src
     と冒頭の部分を書き直すとうまくいく．前述の1行目はなくてもよかった．

**** Location of pdf files in BibDesk on Catalina
     以前の記事でBibDeskについてまとめた（[[../org-mode_paper_2][Emacsのorg-modeで論文を書く（その2：BibDeskによる論文収集と整理）]]）が，その中で，自分の文献リストに“hogefuga-reference.bib”と名前をつけて保存していることを記載している．ただ，保存場所については記述していなかった．実はこのリストは，/Users/taipapa/Documentsに置いており，iCloudを利用して，仕事場のiMacでも同じ文献リストが使えるようにしている．BibDeskでは，その論文のpdfも一緒に管理できるのだが，上述のファイルシステム構造の変化により，全て，pdfが行方不明になってしまった．

     BibDeskにおけるpdfのlocationを修正しようとしてhogefuga-reference.bibの中を見てみると，
    #+begin_src tex
              Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAhLi4vLi4vLi4vRGF0YS9OUy1wZGYvMjVfM18zMTMucGRmTxEBQgAAAAABQgACAAAKSGllcm9ueW11cwAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////DDI1XzNfMzEzLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAwADAAAKIGN1AAAAAAAAAAAAAAAAAAZOUy1wZGYAAgApLzpVc2Vyczprb2hraWNoaTpEYXRhOk5TLXBkZjoyNV8zXzMxMy5wZGYAAA4AGgAMADIANQBfADMAXwAzADEAMwAuAHAAZABmAA8AFgAKAEgAaQBlAHIAbwBuAHkAbQB1AHMAEgAnVXNlcnMva29oa2ljaGkvRGF0YS9OUy1wZGYvMjVfM18zMTMucGRmAAATAAEvAAAVAAIAD///AAAACAANABoAJABIAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAY4=}}
    #+end_src
    と言うふうに，pdfの場所は暗号化？されており，修正などできないことが判明した．1万数千のpdf fileをもう一度手作業でBibDeskに認識させないといけないのかと気が遠くなりかけた．しかし，よく考えてみると，BibDeskは相対的な場所やパスを認識している．以前のMacBook Pro late 2016では，/Data/hoge-pdf/のように，/Dataの下にdirectoryを作成して，そこにpdfを保存していた．Catalinaでは，Data directoryはhome directoryである/Users/taipapaの下に置かれるようになった．つまり，相対的には2レベル下のdirectoryに文献リストであるhogefuga-References.bibを置けば良いのである．

    #+begin_src sh
      $ cd /Users
      $ tree -L 5
      .
      └── taipapa
           └── Documents
                └── taipapa2
                     └── Documents
                          └── hogefuga-References.bib
    #+end_src
    上図のように，Documentsの下にtaipapa2 directoryを作成し，さらにその下にDocuments directoryを作成し，そこにhogefuga-References.bibを置くようにしたところ，BibDeskがpdfの場所を認識するようになった．ただ，iCloudを介してMojaveがインストールされた他のマック（まだmojave）からもこの文献リストを共有するためには，/Users/taipapa/Documents/にhogefuga-References.bibをコピーしておかなければならない．symbolic linkではオリジナルの方を認識してしまいうまくいかないし，hard linkではiCloudを経由するとうまくいかない．

*** まとめ
    今回はかなり苦労すると予想していたのだが，意外とスムーズに行ってしまった（笑）．問題になったのは細かい点が多く，ファイルシステムの変更に伴う問題が一番厄介であった．そのほかでは，GIMPも特に問題なく動き，動画ファイルも問題なかった．お陰で仕事ができる環境を素早く確立することができた．今回も，「案ずるより産むが易し」であった．😄
** COMMENT Dired reinforcement                                :emacs:dired:treemacs:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: dired
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2020-02-18
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "Diredを補強してEmacsをfile viewerとして使う"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Stone figure of warrior on horse at National Museum of Ireland"))
   :END:
   考えてみれば，EmacsのFile ViewerであるDiredについては，[[../peep][peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）]]を投稿した以外はほとんど何も書いていないことに気がついた．そこで，今回は，Diredを強化するパッケージについてまとめることにした．

  <!--more-->

  {{{toc(2)}}}

*** [[http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/][DIRED: HUMAN-READABLE SIZES AND SORT BY SIZE]]
    Emacsの老舗ブログの一つである *Pragmatic Emacs* からのパクリである．diredのデフォルトではファイルサイズが *24345* のようにバイトサイズで正確に表示されるのであるが，はっきり言って見にくい．そこで人間に読みやすい表示になるようにls commandのオプションを与える．例によって，~/.emacs.d/personal/init.orgに以下を追記する．
    #+begin_src lisp
      ,#+begin_src emacs-lisp
      (setq dired-listing-switches "-alh")
      ,#+end_src
    #+end_src
    これで上記の例では， *24K* と表示されるようになる．

*** [[https://github.com/Fuco1/dired-hacks#dired-subtree][dired-subtree]]
**** 参照サイト： [[https://github.com/Fuco1/dired-hacks][dired-hacks]]
     これはdiredの様々な追加物のコレクションであるが，この中のdired-subtreeが便利である．

**** Installation
     diredのデフォルトでは，directoryでEnterすると新しいバッファが開いてそのdirectoryが表示される．しかし，ここは，やはり，同じバッファでsubdirectoryとして表示して欲しいところである．それを実現するのが，このdired-subtreeである．これも以下を，~/.emacs.d/personal/init.orgに書き込めば良い．
      #+begin_src lisp
      ,#+begin_src emacs-lisp
      (use-package dired-subtree
        :ensure t
        :config
        (bind-keys :map dired-mode-map
                   ("i" . dired-subtree-insert)
                   (";" . dired-subtree-remove)))
      ,#+end_src
      #+end_src
      これで，directoryにカーソルを持っていって *i* を叩けば同じバッファ内でsubdirectoryとしてそのdirectoryが開き， *;* を叩けば閉じるようになる．
**** Usage
      以下の図で説明する．（前述の設定でファイルサイズはKBやMBで表示されている）

      #+attr_html: :width 80% :target _self
      [[./static/img/subtree-1.jpg]]

      まず，13行目のstatic directoryにカーソルを持っていき，i を叩くとstaticの行の下にimgとox-hugoのdirectoryが現れる．

      #+attr_html: :width 80% :target _self
      [[./static/img/subtree-2.jpg]]

      ついで，imgにカーソルを移動し，再び i を叩くと下図のようにimg directoryの中身が表示される．

      #+attr_html: :width 80% :target _self
      [[./static/img/subtree-3.jpg]]

      directoryを閉じるときには，前述のごとく ; を叩けば良い．

*** Dired Plus
    Diredの拡張強化版．多くの機能を有するが，私は色使いが綺麗なので使用している．それ以外の機能はほとんど使用していない（笑）．
**** 参照サイト
     - https://www.emacswiki.org/emacs/DiredPlus  ご本家
     - [[https://www.reddit.com/r/emacs/comments/84thzd/what_happened_to_dired_package/][What happened to dired+ package?]]
**** Installation
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package dired+
         :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus")
         :defer 1
         :init
         (setq diredp-hide-details-initially-flag nil)
         (setq diredp-hide-details-propagate-flag nil)
         :config
         (diredp-toggle-find-file-reuse-dir 1)
         (let ((gls "/usr/local/bin/gls"))
           (if (file-exists-p gls) (setq insert-directory-program gls)))
         )
       ,#+end_src
     #+end_src
**** Usage
     上記のご本家サイトを参照．ここまでの画像はDired Plusがインストールされた状態のものであり，ファイル名，拡張子，time, size, permissionなどが色分けされているのが分かる．

*** dired-quick-sort
    dired-modeにおいて，"S"をsort用のhydra立ち上げにバインドする．
**** 参照サイト
     - https://gitlab.com/xuhdev/dired-quick-sort
     - http://pragmaticemacs.com/emacs/speedy-sorting-in-dired-with-dired-quick-sort/
**** Installation
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package dired-quick-sort
         :ensure t
         :config
         (dired-quick-sort-setup))
       ,#+end_src
     #+end_src
**** Usage
     以下の図で説明する．

      #+attr_html: :width 80% :target _self
      [[./static/img/dired-default.jpg]]

      これはdirectoryを開いた時のデフォルトの画像である．ここで，*S*を叩くと下図のような画面になる．

      #+attr_html: :width 80% :target _self
      [[./static/img/dired-default2.jpg]]

      下に開いたhydraのバッファを見て，例えば，グループとサイズでソートするようにsとgを叩くと下の画像（directoryが最初に来てファイルがその後になり，サイズの大きい順になっている）のようになる．


      #+attr_html: :width 80% :target _self
      [[./static/img/dired-sort.jpg]]

      ここでqを叩けば，このソートの状態が維持されたままhydraのバッファが閉じる．

*** treemacs-icons-dired
**** 参照サイト
     - [[https://github.com/Alexander-Miller/treemacs#treemacs-icons-dired][treemacs-icons-dired]]  ご本家
     - [[../treemacs_projectile/][Treemacs and Projectile]]  当サイトの以前の記事

   treemacsのアイコンをdiredでも使えるようにしてくれるモード．この記事のここまでのdired bufferの画像に表示されているアイコンがそれである．treemacsをインストールすれば一緒にインストールされる（インストールについては，上記の過去記事を参考にされたい）．treemacsを立ち上げていれば，diredを立ち上げると自動的にバッファにアイコンが表示される．が，時々何故か表示されないことがある．そういう時は，M-x treemacs-icons-dired-modeを何回かやってtreemacs-icons-dired-modeを再起動すれば表示されるようになる．

*** peep-dired
    以前の記事（[[../peep][peep-diredで画像をチラ見して，orgファイルに簡単にリンクを貼り付ける（おまけ：最近開けたdirectoryを一覧表示する方法）]]）を参照．実はこれが一番役に立つかも．．．
** COMMENT How to create presentation slides by reveal.js and org-mode (org-reveal) :reveal:js:org_reveal:emacs:org_mode:presentation:slide:javascript:
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode--org-re-reveal
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2020-04-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "reveal.jsとorg-modeでプレゼン用スライドを作成する（org-reveal）"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Trinity College Dublin"))
   :END:

    このブログを始めた頃にLaTeXを用いたスライド作成について一連の記事（[[../beamer][beamerでスライド原稿用pdfを作成する（その１）]]など）にまとめた．しかし，10年以上もこの方法を使ってきて，少々飽きてきたと言うのが正直な感想である．そんな時に気になっていたのが， *reveal.js* である．今回は，思いきってreveal.jsによるスライド作成に挑んでみたので，その顛末をまとめておく．私にはhtmlやjavascriptはさっぱりなので，例によってorg-modeを介しての作成となった．

  <!--more-->

  {{{toc(2)}}}

*** [[https://github.com/hakimel/reveal.js][reveal.js]]
    「HTMLを使って簡単に美しいプレゼンテーションを作成できるフレームワーク」だそうである．nested slides, Markdown support, PDF export, speaker notes, JavaScript APIなどの特徴を有する．[[https://revealjs.com/#/][リンク先のデモ]]を見れば，どんなことができるか一目瞭然である．これがなかなかカッコ良い．．．
**** Installation of reveal.js
     上述のご本家のサイトに詳細に記述されているとおりにすれば良い．
     1. まず，node.jsをインストールする．macであれば，homebrewを使うのが簡単である．ついでにnpmもインストールする．他のOSでは，各自ググっていただきたい．．．(^^;;;
       #+begin_src sh
         $ brew install node.js
         $ brew install npm
       #+end_src
     2. スライドを作る場所として，適当なdirectoryを作成し，そこに移動して，reveal.jsのリポジトリをクローンする．ここでは，Slidesと言うdirectoryを作った．
       #+begin_src sh
         $ mkdir /Users/taipapa/Data/Slides
         $ cd /Users/taipapa/Data/Slides
         $ git clone https://github.com/hakimel/reveal.js.git
       #+end_src
     - reveal.js directoryに移動する

       #+begin_src sh
         $ cd reveal.js
       #+end_src
     - 依存関係をインストールする
       #+begin_src sh
         $  npm install
       #+end_src
     - プレゼンテーションを開始する
       #+begin_src sh
           $ npm start

         > reveal.js@3.9.2 start /Users/taipapa/Data/Slides/reveal.js
         > grunt serve

         Running "connect:server" (connect) task
         Started connect web server on http://localhost:8000

         Running "watch" task
         Waiting...
       #+end_src
     - ブラウザで， http://localhost:8000 が開き，プレゼンテーションが見られる．

     ここまで非常に簡単である．defaultで開くプレゼンは素っ気ないものであるが，reveal.js directoryにあるdemo.htmlを以下のようにindex.htmlにすれば，上述のご本家のGitHub pageのリンクにあるデモと同じスライドが開くようになる．
       #+begin_src sh
         $ cd /Users/taipapa/Data/Slides/reveal.js
         $ ls
         CONTRIBUTING.md     css                 js                   package.json
         LICENSE             demo.html           lib                  plugin
         README.md           gruntfile.js        node_modules         test
         bower.json          index.html          package-lock.json
         $ mv index.html index.html_original
         $ cp demo.html index.html
         $ ls
         CONTRIBUTING.md     css                 index.html_original  package-lock.json
         LICENSE             demo.html           js                   package.json
         README.md           gruntfile.js        lib                  plugin
         bower.json          index.html          node_modules         test
         $ npm start
       #+end_src

     directory（フォルダ）の中身は以下のようになっている．
     - css/ : これがないとプロジェクトが機能しないコアのスタイル
     - js/ : 上記に同じだがJavascript用
     - plugin/ : reveal.jsの拡張用として開発されてきたコンポーネント
     - lib/ : 他のすべてのthird party assets (JavaScript, CSS, fonts)

**** [[https://github.com/hakimel/reveal.js/wiki/Example-Presentations][Example Presentations]]
     reveal.jsでどんなスライドを作れるのか実例を集めたページ．
     - [[https://www.cfa.harvard.edu/~pwilliam/htmltalk/#/][Sample scientific talk (on magnetism in small stars) by Peter Williams]]
     - [[https://leefsmp.github.io/forge-connected-data/#/1][Autodesk Forge Viewer: Visual Reports with Connected Data by Philippe Leefsma]]
     などは興味深い．

    reveal.jsの特徴として，Markdownでもスライドが作成できると言うことがあるが，私はいつも通りorg-modeを使用することにした．

*** org-reveal
**** References
     - [[https://github.com/yjwen/org-reveal][org-reveal]]: 御本家
     - [[http://jr0cket.co.uk/slides/revealjs.html][Introduction to org-reveal]]：御本家のデモ
     - [[https://dev.classmethod.jp/articles/org-mode-re-reveal/][【Org-mode】Org文書から reveal.js スライドを作成する]]
     - [[https://gitlab.com/oer/emacs-reveal][emacs-reveal]]：御本家からのフォーク
     - [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]]：御本家からのフォーク
    htmlもJavascriptも知らなくてもブログが書けるように，これらを知らなくても，org-modeとreveal.jsを組み合わせて使えばスライドが簡単に作れる．reveal.js用のorg-modeのパッケージは，元来は， *org-reveal* ([[https://github.com/yjwen/org-reveal][org-reveal]], [[http://jr0cket.co.uk/slides/revealjs.html][Introduction to org-reveal]]) であり，そのforkである *org-re-reveal* も活発に開発されているとのことで，どちらをインストールするか迷ったのであるが，上記の御本家のGitHub pageを見ると，2018年6月ごろから作者のyiwenさんが再び盛んにcommitするようになっている．また，フォークのorg-re-revealはemacs-revealのバンドルの一部となっており，少し複雑である．以上の理由から，やはり，御本家を使うことにした．なお，フォークのorg-re-revealに関しては，[[https://dev.classmethod.jp/articles/org-mode-re-reveal/][【Org-mode】Org文書から reveal.js スライドを作成する]] に詳しく紹介されているので，参考にされたい．

**** Installation of org-reveal
     御本家の[[https://github.com/yjwen/org-reveal][org-reveal]]に書いてある通りにすれば良いのだが，私は，いつものごとく，use-packageを用いて以下のようにinit.orgに書き込んでインストールした．
     #+begin_src lisp
       ,#+begin_src emacs-lisp
       (use-package ox-reveal
         :ensure t)
       ,#+end_src
     #+end_src
***** Installation of emacs-reveal
      前述したように，org-revealのフォークであるorg-re-revealはemacs-revealのバンドルの一部である．後述するが，reveal.jsのthemeや設定ファイルとして有用なものが含まれているので，emacs-revealもクローンしておいて必要に応じて使えるようにすることをお勧めする．個々に行うと面倒なので，全部突っ込むことにして，[[https://gitlab.com/oer/emacs-reveal#emacs-reveal-for-daily-use][Emacs-reveal for daily use]]の方法に従い，emacs-revealをクローンする．この際にrecursive optionをつけて再帰的にクローンすれば，org-re-reveal, org-re-reveal-ref, oer-revealなどが全部一緒に（161MB）入ってくる．

       #+begin_src sh
         $ cd /Users/taipapa/Sources
         $ git clone --recursive https://gitlab.com/oer/emacs-reveal.git
         $ cd emacs-reveal
         $ pwd
         /Users/taipapa/Sources/emacs-reveal
         $ ls
         CHANGELOG.org           docker                  org-re-reveal-ref
         CONTRIBUTING.md         emacs-reveal-submodules paper.bib
         LICENSE                 emacs-reveal.el         paper.bib.license
         LICENSES                oer-reveal              paper.md
         Makefile                org-mode                paper.md.license
         README.md               org-re-reveal           tests
       #+end_src


**** Configuration of org-reveal
     設定に関しては， [[https://github.com/yjwen/org-reveal][org-reveal]]に詳細に記載されているが，重要なことを中心に抜粋しておく．
***** [[https://github.com/yjwen/org-reveal#set-the-location-of-revealjs][Set the location of Reveal.js]]
      org-revealはファイルの内容をexportする前にreveal.jsがどこにあるかを知っておく必要がある．reveal.jsの在り処というのは，reveal.jsのパッケージのトップディレクトリへのパスのことであり，そのディレクトリは *reveal.jsのファイルを含むディレクトリではなく，*  *README.mdを含むディレクトリ* のことである．

      デフォルトでは，./reveal.js であるが，このままだと，全てのスライド原稿がreveal.jsと同じディレクトリにないといけなくなり不便である．そこで，init.orgにパスを書き込むか，あるいは，個々のorg fileの冒頭にrevieal.jsの在り処を書き込む．私は後者の方法をとっており，以下のように書き込んでいる．
      #+begin_src lisp
        ,#+REVEAL_ROOT: file:///Users/taipapa/Data/Slides/reveal.js
      #+end_src

      なお，org-re-revealでは，このパスを書き込んでも読み込んでくれない．私の環境の問題なのかは追及していないが，これも御本家のorg-revealを使用する理由である．
***** [[https://github.com/yjwen/org-reveal#select-theme][Select theme]]
      テーマをREVEAL_THEMEでセットする．テーマはdefaultで11個ぐらいついてくるが，ネットのあちこちにいろいろなテーマが落ちているので，あちこちのテーマを見て参考にし，自分なりに変更して好みのテーマを作れば良い．上述のemacs-orgの中のテーマ（oer-reveal.css）が割と良かったので，使用することにした．テーマを使用するには，reveal.jsのcss directoryの中のtheme directoryに入れれば良い．具体的には以下のようにした．

      #+begin_src sh
        $ cd /Users/taipapa/Sources/emacs-reveal/oer-reveal/css
        $ ls
        dbis-longtitle.css             folder_inbox.png.license
        dbis.css                       index.css
        ercis-quote.css                oer-reveal.css
        ercis.css                      outgoing-link.png
        ercis2019.css                  outgoing-link.png.base
        folder_inbox.png               outgoing-link.png.base.license
        folder_inbox.png.base          outgoing-link.png.license
        folder_inbox.png.base.license  toc-style.css
        $ cp oer-reveal.css /Users/taipapa/Slides/reveal.js/css/theme/
      #+end_src

*** Plugin of reveal.js
    reveal.jsを素のままで使っても十分に有用ではあるが，やはり，pdfやパワーポイントではできないことをやれるようにしたいものである．そこで，プラグインの登場である．

**** Default plugin ([[https://github.com/hakimel/reveal.js/tree/master/plugin][reveal.js/plugin/]])
     デフォルトのプラグインについては，．[[https://revealjs.com/#/][デモ]]を見て貰えばどんな機能か分かると思う．例えば，notesは，発表者用の別フレームが表示され，その中に現在と次のスライドとタイマーが表示される．あるいは，zoomでは，option keyを押しながらクリックすると拡大し，もう一度同じことをすると元に戻る．

**** [[https://github.com/rajgoel/reveal.js-plugins][reveal.js-plugins]]
     これはthird-partyのプラグインである．このサイトにはデモのリンクも貼ってあるので参考にしていただきたい．私は蛍光ペンをスライドショーの際中にリアルタイムで使いたかったので，chalkboardをインストールして設定した．
***** Installation
      リンク先に書いてある通りbowerを用いてインストールする．bower自体はbrewでインストールした．前述のchalkboardだけでなく，このサイトの全プラグインがインストールされる．
      #+begin_src sh
        $ brew install bower
        $ brew info bower
        bower: stable 1.8.8 (bottled)
        Package manager for the web
        https://bower.io/
        /usr/local/Cellar/bower/1.8.8 (5,413 files, 16.9MB) *
        Poured from bottle on 2020-03-01 at 17:58:14
        .....
        $ bower install reveal.js-plugins
      #+end_src
       なお，次節のmenu-pluginはsubmoduleであり，別途インストールする必要がある．

**** [[https://github.com/denehyg/reveal.js-menu][reveal.js-menu]]
     各スライドのタイトルにジャンプできるようにするslide out menu プラグインである．また，テーマやスライド遷移を変更できる．この[[https://denehyg.github.io/reveal.js-menu/#/home][live demo]]を見ると分かりやすい．同じく，bowerでインストールする．
***** Installation
      #+begin_src sh
        $ bower install reveal.js-menu
      #+end_src
**** Plugin location
     上述のthird partyのプラグインのインストールされる場所は以下の通りである．
     #+begin_src sh
       $ cd /Users/taipapa/Data/Slides/reveal.js/bower_components
       $ tree -L 2
       .
       ├── reveal.js-menu
       │   ├── CONTRIBUTING.md
       │   ├── LICENSE
       │   ├── README.md
       │   ├── bower.json
       │   ├── font-awesome
       │   ├── menu.css
       │   ├── menu.js
       │   └── package.json
       └── reveal.js-plugins
       ├── LICENSE
       ├── README.md
       ├── anything
       ├── audio-slideshow
       ├── bower.json
       ├── broadcast
       ├── chalkboard
       ├── chart
       ├── customcontrols
       ├── embed-tweet
       ├── fullscreen
       ├── mathsvg
       ├── package.json
       └── spreadsheet
     #+end_src
     つまり，reveal.jsのbower_components directoryに入る．

     なお，default pluginはreveal.jsのすぐしたのplugin directoryに入る．


*** Creation of slides by org-reveal and reveal.js
     以前の記事（[[../beamer][beamerでスライド原稿用pdfを作成する（その１）]]）と同じような内容のスライド原稿をorg-revealを用いて作成してみる．作成したものはまとめてGithub pageに置いておくので（[[https://github.com/taipapamotohus/MySlides][MySlides]]，live demoは[[https://taipapamotohus.com/MySlides/][こちら]]），クローンするか落とすかして中身を見て貰えば良いのだが，こちらでも順番に説明しておく．なお，前述のプラグインの中にはこのままでは動かないものもあるので，後述するように，一旦，exportしてからhtmlを修正する．（Github pageとlive demoは修正済みのものである）

**** Creation of main file

     まず以下のファイルを作成する．簡単に解説をつけておく．
     1. REVEAL_ROOTでreveal.jsを設定する．
     2. REVEAL_HLEVELを999にすると遷移が全て横向きとなる．
     3. REVEAL_TITLE_SLIDEでタイトル（%t）と著者（%a）のヘッダーレベルを決める．
     4. REVEAL_INIT_OPTIONで各種のコントロールを行う．下図の設定を参照
     5. REVEAL_THEMEでテーマを決める．前述のように，emacs-revealのバンドルから取ってきたoer-reveal.cssを使用した．
     6. REVEAL_EXTRA_CSSで追加のCSSを設定し，これで細かな調整を行う．
     7. REVEAL_PREAMBLEで，フッターを指定した．

   #+begin_src lisp
     ,#+REVEAL_ROOT: ./reveal.js # パスは各自の環境に合わせて書き換えていただきたい

     ,#+REVEAL_HLEVEL: 999 # transitionsは全て横向き

     ,#+REVEAL_TITLE_SLIDE: <h3>%t</h3><h5>%a</h5>

     # スライド移動のコントローラーは右下に表示．スライド番号は，スライドの番号／全スライド数．
     ,#+REVEAL_INIT_OPTIONS: width:1200, height:800, controlsLayout: 'bottom-right', slideNumber:"c/t", margin: 0, minScale:0.2, maxScale:2.5, transition: 'fade', menu: {side: 'left', titleSelector: 'h1, h2, h3, h4, h5, h6', hideMissingTitles: false, markers: true, custom: false, themes: true, transitions: true, openButton: true, openSlideNumber: false, keyboard: true, sticky: false, autoOpen: true}, chalkboard: {boardmarkerWidth: 8,	toggleChalkboardButton: { left: "80px" }, toggleNotesButton: { left: "130px"}}

     ,#+REVEAL_THEME: oer-reveal

     ,#+OPTIONS: num:nil toc:nil

     ,#+REVEAL_EXTRA_CSS: ./custom_oer.css

     # [[https://github.com/yjwen/org-reveal/issues/254][List of external plugins?#254]]
     # #+REVEAL_EXTERNAL_PLUGINS: {src: '%sbower_components/reveal.js-menu/menu.js', async: true }
     ,#+REVEAL_EXTERNAL_PLUGINS: {src: '%sbower_components/reveal.js-menu/menu.js'}


     # #+REVEAL_EXTRA_CSS: https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css

     # フッター
     ,#+REVEAL_PREAMBLE: <div class="footer"><p>日本hogefuga外科学会 第??回学術総会　202X年X月XX日 日本のどこか</p></div>

     ,#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
     ,#+Author: \\
     ,#+Author: hogefuga大学大学院 hogefuga研究科　hogefuga分野　\\
     ,#+Author: taipapa, 織田信長, 豊臣秀吉, 徳川家康
     # #+DATE: 2020年3月22日


     ,* 背景と目的
       - hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い.
       - 当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．
       - そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した.
       - 参照サイト：[[https://github.com/yjwen/org-reveal][Introduction to Org-Reveal]]

     ,* Table
       ,#+ATTR_HTML: :width 25%

       |        | cTIA/SIE |  stable   | asymptomatic |  P   |
       |        | (n = 12) | (n = 122) |  (n = 186)   |      |
       |        |   <c>    |   <c4>    |     <c4>     | <c>  |
       |--------+----------+-----------+--------------+------|
       | stroke | 1 (8.3%) | 4 (3.3%)  |   5 (2.7%)   | 0.32 |
       | death  |    0     | 1 (0.8%)  |      0       | 0.42 |
       | MI     |    0     | 1 (0.8%)  |      0       | 0.42 |
       | Total  | 1 (8.3%) | 6 (4.9%)  |   5 (2.7%)   | 0.26 |


     ,* hogefuga症例の画像
       [[./figures/hoge_fuga.jpg]]

     ,* hogefuga症例の画像２
       ,#+ATTR_REVEAL: :frag roll-in
       遅延表示も可能
       ,#+ATTR_REVEAL: :frag roll-in
       ,#+ATTR_HTML: :height 600px
        [[./figures/hoge_fuga.jpg]]
     ,* hogefuga症例の画像３
       ,#+ATTR_REVEAL: :frag roll-in
       - 遅延表示も可能
       ,#+ATTR_REVEAL: :frag roll-in
       - 画像の大きさを変更することも可能
       ,#+ATTR_REVEAL: :frag roll-in
       ,#+ATTR_HTML: :height 400px
       [[./figures/hoge_fuga.jpg]]

     ,* ダブルコラムも可能
       ,#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
       Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.
       ,#+REVEAL_HTML: </div>
       ,#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
       ,#+CAPTION: Hoge-fuga (2020)
        [[./figures/hoge_fuga.jpg]]
       ,#+REVEAL_HTML: </div>

       ,#+ATTR_REVEAL: :frag roll-in
       キャプションも可能
     ,* 動画もOK
       ,#+REVEAL_HTML: <video controls data-autoplay src="./Movies/Knight-33990.mp4"></video>

       ,#+CAPTION: Coronavirus
     ,* 動画もOK（大きな画面）
       ,#+REVEAL_HTML: <video class="stretch" controls data-autoplay src="./Movies/Knight-33990.mp4"></video>

   #+end_src

   このファイルを，/Users/taipapa/Slides/reveal_test.org として保存する．

**** creation of custom css file
     ついで，微調整のために以下に示すcssファイルを作成し，/Users/taipapa/Slides/custom_oer.cssとして作成する．locationが内容と齟齬のないように注意する．試行錯誤の痕跡もそのままにしておく．このファイルでは，フォントの大きさや色などを指定している．

     #+begin_src html
       /* http://nwidger.github.io/blog/post/making-a-reveal.js-presentation-with-org-reveal/ */
       .reveal table th, .reveal table td {
       /* text-align: center; */
       border: 1px solid white;
       }

       /* https://stackoverflow.com/questions/4012872/how-to-center-a-footer-div-on-a-webpage/4012888 */
       /* https://stackoverflow.com/questions/15629511/how-can-i-make-my-footer-center-to-the-bottom-of-the-page/15629635 */

       /* div.footer { */
       /*   /\* font-family: "Source Sans Pro", Helvetica, sans-serif; *\/ */
       /*   font-size: 2vh; */
       /*   color: gray; */
       /*   position: fixed; */
       /*   left: 400px; */
       /*   bottom: 2px; */
       /*   /\* z-index: 50; *\/ } */

       div.footer {
       /* font-family: "Source Sans Pro", Helvetica, sans-serif; */
       font-size: 2vh;
       color: gray;
       position: fixed;
       /* left: 400px; */
       bottom: 1px;
       width: 100%;
       text-align: center;
       /* margin-left:auto; */
       /* margin-right:auto; */
       /* margin-top:2em; */
       /* z-index: 50; */ }

       .reveal .slides section > section {  /*これによりフレームタイトルが上部に固定される．*/
       /* height: 100%; */
       height: 95%;
       /* width:  100%; */
       }

       .reveal h3 {
       font-size: 1.8em; }

       .reveal h2 {
       font-size: 2.0em; }

       /* 段落内の行間の調整 */
       /* https://github.com/yjwen/org-reveal/issues/38 */
       /* .reveal p { */
       /*   line-height: 3; */
       /* } */
       /* .reveal .org-ul { */
       /*   line-height: 2; */
       /* } */

       /* リストの間のスペースの調整 */
       /* https://github.com/yjwen/org-reveal/issues/38 */
       .reveal li { margin: 0; padding: 0.5em}

       /* Push each slide change to the browser history */
       /* スライドの変更をブラウザの履歴に記録する */
       Reveal.initialize({
       history: true,
       });
     #+end_src

     （うーむ，何故かhtml blockはsyntax highlightが効かない．．．まぁ，ここは後日に追求することにする．．．😅）

   これでようやく準備が整った．reveal_test.orgをhtmlファイルとしてexportするために， *C-c C-e* とすると，下図のような画面になる．

      #+attr_html: :width 100%
      [[./static/img/ox-reveal-export.jpg]]

   *R* が *Export to reveal.js HTML Presentation* になっており， *B* によりファイルに保存してブラウザで開くことになる，つまり，続けて *C-c C-e RB* と打てば，作成したスライドがブラウザーで開く．1200x800でwideに設定してあるので，横長の画面で見た方が見やすいと思う．

   出来上がったスライドは，ほぼ期待通り動いてくれた．動画も問題なく動く．しかし，残念ながら，プラグインが問題であった．解決策を次節でまとめる．

**** Modification of main file
     これでできたhtmlファイルのスライドをいじってみると，いくつか不具合があることが分かる．要するにプラグインのいくつかが動かないのである．
     1. スライドの左下にある3つのアイコンは，それぞれ，メニュー，黒板，notesのボタンである．
     2. メニューは問題なく動く．
     3. 黒板も動く．ペンで書くことも，右クリックでwipeして書いたものを消すこともできる．
     4. しかし，delete keyで描いたものを一挙に消すことはできない．
     5. 右端のnotesをクリックすると，カーソルがマーカーに変わり，グレーの蛍光ペンとして書くことはできる．しかし，"x"を押すことにより，グレー，青，赤，緑，オレンジ，紫，黄色と順番に色が変わっていく機能は効かない．また，右クリックでwipeして書いたものを消すことはできるが，delete keyで描いたものを一挙に消すことはできない．

    いちばん使いたかった蛍光ペンがうまく動かないのである．色々と弄ってみたが，ox-revealのレベルではorg-modeをどう設定しても機能するようにはならず，結局，出来上がったhtmlファイルに直に以下のように追記することにした．

    #+begin_src sh
      --- org-reveal_for_blog_oer-FINAL_v2.html	2020-04-20 21:08:18.000000000 +0900
      +++ org-reveal_for_blog_oer-FINAL_v2-keyboard.html	2020-04-11 13:28:15.000000000 +0900
      @@ -219,7 +219,16 @@
        { src: 'file:///Users/kohkichi/Data/Slides/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: 'file:///Users/kohkichi/Data/Slides/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: 'file:///Users/kohkichi/Data/Slides/reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      - { src: 'file:///Users/kohkichi/Data/Slides/reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }]
      +    { src: 'file:///Users/kohkichi/Data/Slides/reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }],
      +    keyboard: {
      +	    67: function() { RevealChalkboard.toggleNotesCanvas() },	// toggle notes canvas when 'c' is pressed
      +	    66: function() { RevealChalkboard.toggleChalkboard() },	// toggle chalkboard when 'b' is pressed
      +	    46: function() { RevealChalkboard.clear() },	// clear chalkboard when 'DEL' is pressed
      +	     8: function() { RevealChalkboard.reset() },	// reset chalkboard data on current slide when 'BACKSPACE' is pressed
      +	    68: function() { RevealChalkboard.download() },	// downlad recorded chalkboard drawing when 'd' is pressed
      +	    88: function() { RevealChalkboard.colorNext() },	// cycle colors forward when 'x' is pressed
      +	    89: function() { RevealChalkboard.colorPrev() },	// cycle colors backward when 'y' is pressed
      +	},
       });
       </script>
       </body>
    #+end_src
    要するに，keyboard以下が追加部分である．chalkboardの設定を[[https://github.com/rajgoel/reveal.js-plugins/tree/master/chalkboard][reveal.js-plugins/chalkboard/]]の解説に従って追記した．これにより，上記1ー5で述べた問題は全て解消された．

    下に，Hugoのshortcodeを使って，できあがったスライドそのものを埋め込んでみた． *”f”* を叩けば，フルスクリーンになる．色々と弄って遊んでいただければ有り難い．

{{< SlideInclusion "https://taipapamotohus.github.io/MySlides/" >}}

    これで，やりたいことがほぼ出来るスライドの作成が可能になった．他にも色々な機能があるので，うまく動くようになれば，今後も報告していくつもりである．

** How to create presentation slides by reveal.js and org-mode (org-reveal) Part2
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode--org-reveal--part2
   :EXPORT_FILE_NAME: index
   :EXPORT_DATE: 2020-05-05
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: taipapa
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :subtitle "reveal.jsとorg-modeでプレゼン用スライドを作成する（org-reveal）その2"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((placement . 3) (caption . "Testing coverage"))
   :END:

*** コロナ肺炎（COVID-19）について
    COVID-19に対する緊急事態宣言が5月末まで延長されることになった．現状を鑑みればやむを得ない判断であろう．今回の会見で，ようやくPCR検査が少ないことを認めた．[[https://www.covid19-yamanaka.com/cont3/17.html][山中伸弥による新型コロナウイルス情報発信]]から辿れる[[https://ourworldindata.org/covid-testing#testing-coverage][Testing coverage]]に行けば，PCR検査の国別の比較の最新データを見ることができる．冒頭の写真はいつものお気楽な観光写真ではなく，このサイトからのグラフである．一目瞭然ではあるが，既にこれまでも報道されてきた通り，日本のPCR検査数は圧倒的に少ない．「途上国並み」と揶揄する報道もあったが，それでは多くの途上国に失礼になるような数字である．グラフは1000人あたりのPCR検査数を示しており，アイスランドの147.8人（人口の15%!）は別格として，いわゆる先進国は2桁以上である．トルコ，韓国も12ー13，台湾 2.71，ベトナム 2.68などに対して， *日本は1.46* である．

    PCR検査が少ないことを認めたわけなので，今後は一刻も早く増やしてもらいたい．脳卒中，心筋梗塞，外傷などの救急治療や癌の手術などは延期することは困難であり，救急に携わる医療スタッフ，救急医，麻酔科医，外科医，手術室スタッフなどは高い感染リスクに晒されている．特に，全身麻酔の際に気管内挿管を行う麻酔科医はエアロゾルを直接浴びることになる．基本的に通常の手術の前でも，B型肝炎，C型肝炎，梅毒，HIVなどの感染症をルーチンに調べる．緊急手術か定期手術かにかかわらず，術前検査にCOVID-19のPCRを加えることは医療崩壊を防ぐためにも必須であろう．僅かではあるが，既にそうしている病院もある．

   さて，今回はコロナ肺炎の話で始まってしまったが，ここからの内容は前回のreveal.jsによるスライド作成に関する追加である．弄っているうちに多少装飾もできるようになってきたので報告する．ほとんどは，Cascading Style Sheets (CSS)に関することになるので，分かってる人には不要な話かも．．．😅

  <!--more-->

  {{{toc(2)}}}

*** How to add shadow and color to the text box
    前回（[[../how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode-org-re-reveal][How to create presentation slides by reveal.js and org-mode (org-reveal)]]）にデザインを変更するために *custom_oer.css* を作成した．今回はこのcssにいくつか追記をしてスライドをさらにattractiveにしようという内容である．もはやreveal.jsそのものとはほとんど関係ない．．．．

    まず，定番からやってみた．テキストの部分に影をつけて立体的にし四角の角を丸くし，背景色をラベンダーにしてみる．LaTeXのbeamerのblockからのパクリである．以下のコードを *custom_oer.css* に追加する．

   #+begin_src sh
     .shadowLavender{
       /*影を入れて角を丸くし背景色をラベンダーにする*/
       -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.5);
       -moz-box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.5);
       box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.5);
       border-radius: 20px;
       padding-left: 15pt;
       background-color: rgba(230, 230, 250, 0.5);
     }
   #+end_src

   padding-leftの部分は文字がテキストボックスの左端に寄りすぎるので，少し隙間が空くように調整している．その上で，前回（[[../how-to-create-presentation-slides-by-reveal-dot-js-and-org-mode-org-re-reveal][How to create presentation slides by reveal.js and org-mode (org-reveal)]]）に作成したメインファイルである *reveal_test.org* の最初の部分である「背景と目的」を以下のように修正する． *#+REVEAL_HTML:* を使うのがミソである．

    #+begin_src lisp

      ,* 背景と目的
        ,#+REVEAL_HTML: <div class="shadowLavender">
        - hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い.
        - 当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．
        - そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した.
        - 参照サイト：[[https://github.com/yjwen/org-reveal][Introduction to Org-Reveal]]
        ,#+REVEAL_HTML: </div>
    #+end_src

    これを保存したのちに，C-c C-e RBとして確認すると下図のようになる．やはり多少装飾性を有する方がattractiveであろう．shadowの大きさや背景色はお好みに合わせて調整していただきたい．

     #+attr_html: :width 100%
     [[./static/img/CSS-1.jpg]]

*** How to add shadow to the image
    次も定番である．画像に同様に影をつけてみる．先ほどと同様に，以下のコードを *custom_oer.css* に追加する．

    #+begin_src sh
      .image_carousel img {
          box-shadow: 0px 4px 8px 0 rgba(0, 0, 0, 0.5);
          -webkit-box-shadow: 0px 4px 8px 0 rgba(0, 0, 0, 0.5);
          -moz-box-shadow: 0px 4px 8px 0 rgba(0, 0, 0, 0.5);
      }
    #+end_src

    ついで，メインファイルである *reveal_test.org* の画像を含む部分を修正する．例えば，以下のようにする．「hogefuga症例の画像」の部分を以下のように修正する． *#+REVEAL_HTML:* を使うのは同様である．

    #+begin_src lisp
      ,* hogefuga症例の画像 shadow
        ,#+REVEAL_HTML: <div class="figure image_carousel"><img src="./figures/hoge_fuga.jpg" alt=""/></div>
    #+end_src

    これを保存したのちに，C-c C-e RBとして確認すると下図のようになる．

     #+attr_html: :width 100%
     [[./static/img/CSS-2.jpg]]

    画像に影をつけると，centering（中央寄せ）がなかなかうまくいかず苦労したが， *figure* と組み合わせることでなんとかなった．もっとうまい方法があるのだろうが，私にはこれが精一杯であった．

*** How to add color to table row
    次はテーブルの色つけである．これもbeamerを参考にほんのりラベンダーにしてみた．以下のコードを *custom_oer.css* に追加する．タイトル行は濃い目に，奇数行は薄めに，偶数行は中間の透明度にしてみた．

    #+begin_src sh
      /* テーブルのセルの色を変更 */
      .reveal section table th {
        background-color: rgba(230, 230, 250, 1);
        font-weight: bold; }

      .reveal section table tr:nth-child(even) {
        background-color:  rgba(230, 230, 250, 0.7); }

      .reveal section table tr:nth-child(odd) {
        background-color:  rgba(230, 230, 250, 0.3); }
    #+end_src

  テーブルの色つけは，reveal_test.orgをいじる必要はなく，cssを設定するだけで良い．以下のようになる．

     #+attr_html: :width 100%
     [[./static/img/CSS-3.jpg]]

    割合と良い感じになった．

    こんなところであろうか．個人的には，LaTeXのbeamerでやれていたことはほぼできるようになり，beamerでは不可能なこともできるようになったので，かなり満足している．CSSに詳しい人なら，もっと色々できると思う．アドバイスなどコメントいただければ有り難い．
